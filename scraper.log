2024-11-03 19:08:25,552 - INFO - Starting scraper...
2024-11-03 19:08:25,553 - INFO - Initializing scraper...
2024-11-03 19:08:25,890 - INFO - Scraping: https://developer.apple.com/documentation/visionos/adding-3d-content-to-your-app
2024-11-03 19:08:28,309 - INFO - Found 31 new URLs
2024-11-03 19:08:28,310 - INFO - Scraping: https://developer.apple.com/documentation/visionos/creating-your-first-visionos-app
2024-11-03 19:08:30,015 - INFO - Found 26 new URLs
2024-11-03 19:08:30,015 - INFO - Scraping: https://developer.apple.com/documentation/visionos/creating-fully-immersive-experiences
2024-11-03 19:08:31,489 - INFO - Found 24 new URLs
2024-11-03 19:08:31,489 - INFO - Cleaning up...
2024-11-03 19:08:31,517 - INFO - Scraper finished
2024-11-03 19:18:10,503 - INFO - Starting scraper...
2024-11-03 19:18:10,503 - INFO - Initializing scraper...
2024-11-03 19:18:11,113 - INFO - Scraping: https://developer.apple.com/documentation/visionos/adding-3d-content-to-your-app
2024-11-03 19:19:13,481 - ERROR - Error scraping https://developer.apple.com/documentation/visionos/adding-3d-content-to-your-app (attempt 1/3): Timeout 60000ms exceeded.
2024-11-03 19:20:15,845 - ERROR - Error scraping https://developer.apple.com/documentation/visionos/adding-3d-content-to-your-app (attempt 2/3): Timeout 60000ms exceeded.
2024-11-03 19:21:19,339 - ERROR - Error scraping https://developer.apple.com/documentation/visionos/adding-3d-content-to-your-app (attempt 3/3): Timeout 60000ms exceeded.
2024-11-03 19:21:19,339 - INFO - Scraping: https://developer.apple.com/documentation/visionos/creating-your-first-visionos-app
2024-11-03 19:22:21,061 - ERROR - Error scraping https://developer.apple.com/documentation/visionos/creating-your-first-visionos-app (attempt 1/3): Timeout 60000ms exceeded.
2024-11-03 19:23:52,949 - ERROR - Error scraping https://developer.apple.com/documentation/visionos/creating-your-first-visionos-app (attempt 2/3): Timeout 60000ms exceeded.
2024-11-03 19:23:57,856 - INFO - Cleaning up...
2024-11-03 19:23:57,895 - ERROR - Error during cleanup: Protocol error (Target.disposeBrowserContext): Failed to find context with id 062E75EB370136F541CF99B92B5DA069
2024-11-03 19:23:57,905 - ERROR - Future exception was never retrieved
future: <Future finished exception=TargetClosedError('Target page, context or browser has been closed')>
playwright._impl._errors.TargetClosedError: Target page, context or browser has been closed
2024-11-04 12:49:51,380 - INFO - Processing documentation page: https://developer.apple.com/documentation/visionos/creating-3d-shapes-in-visionos-with-realitykit
2024-11-04 12:49:51,714 - ERROR - No project information found
2024-11-04 12:52:20,559 - INFO - Processing documentation page: https://developer.apple.com/documentation/visionos/creating-3d-shapes-in-visionos-with-realitykit
2024-11-04 12:52:20,807 - ERROR - No download button found
2024-11-04 12:52:20,808 - INFO - Saved debug HTML to data/docs/debug_creating-3d-shapes-in-visionos-with-realitykit.html
2024-11-04 12:52:20,808 - ERROR - No project information found
2024-11-04 12:54:48,314 - INFO - Processing documentation page: https://developer.apple.com/documentation/visionos/creating-3d-shapes-in-visionos-with-realitykit
2024-11-04 12:54:48,652 - ERROR - No download button found
2024-11-04 12:54:48,653 - INFO - Saved debug HTML to data/docs/debug_creating-3d-shapes-in-visionos-with-realitykit.html
2024-11-04 12:54:48,653 - ERROR - No project information found
2024-11-04 12:56:33,584 - INFO - Processing documentation page: https://developer.apple.com/documentation/visionos/creating-3d-shapes-in-visionos-with-realitykit
2024-11-04 12:56:33,872 - ERROR - No download button found
2024-11-04 12:56:33,873 - INFO - Saved debug HTML to data/docs/debug_creating-3d-shapes-in-visionos-with-realitykit.html
2024-11-04 12:56:33,877 - ERROR - No project information found
2024-11-04 12:57:48,178 - INFO - Processing documentation page: https://developer.apple.com/documentation/visionos/creating-3d-shapes-in-visionos-with-realitykit
2024-11-04 12:57:48,559 - INFO - Found buttons/links:
2024-11-04 12:57:48,560 - ERROR - No download button found
2024-11-04 12:57:48,560 - INFO - Saved debug HTML to data/docs/debug_creating-3d-shapes-in-visionos-with-realitykit.html
2024-11-04 12:57:48,561 - ERROR - No project information found
2024-11-04 12:58:43,297 - INFO - Processing documentation page: https://developer.apple.com/documentation/visionos/creating-3d-shapes-in-visionos-with-realitykit
2024-11-04 12:58:43,578 - INFO - Found links:
2024-11-04 12:58:43,578 - ERROR - No download button found
2024-11-04 12:58:43,579 - INFO - Saved debug HTML to data/docs/debug_creating-3d-shapes-in-visionos-with-realitykit.html
2024-11-04 12:58:43,579 - ERROR - No project information found
2024-11-04 12:59:30,118 - INFO - Processing documentation page: https://developer.apple.com/documentation/visionos/creating-3d-shapes-in-visionos-with-realitykit
2024-11-04 12:59:33,103 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/eca86063e133/Creating3DEntitiesInVisionOSWithRealityKit.zip
2024-11-04 12:59:33,137 - INFO - Found project: Creating 3D entities with RealityKit
2024-11-04 12:59:33,137 - INFO - Description: 
2024-11-04 12:59:33,137 - INFO - Requirements: {'visionOS': '2.0+', 'Xcode': '15.0+'}
2024-11-04 12:59:33,137 - INFO - Downloading project...
2024-11-04 12:59:33,552 - INFO - Downloaded project to data/projects/creating-3d-entities-with-realitykit
2024-11-04 12:59:33,552 - INFO - Project downloaded to: data/projects/creating-3d-entities-with-realitykit
2024-11-04 13:10:19,715 - INFO - Processing documentation page: https://developer.apple.com/documentation/visionos/creating-3d-shapes-in-visionos-with-realitykit
2024-11-04 13:10:22,297 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/eca86063e133/Creating3DEntitiesInVisionOSWithRealityKit.zip
2024-11-04 13:10:22,331 - INFO - Found project: Creating 3D entities with RealityKit
2024-11-04 13:10:22,331 - INFO - Description: 
2024-11-04 13:10:22,331 - INFO - Requirements: {'visionOS': '2.0+', 'Xcode': '15.0+'}
2024-11-04 13:10:22,331 - INFO - Downloading project...
2024-11-04 13:10:22,527 - INFO - Downloaded project to data/projects/creating-3d-entities-with-realitykit
2024-11-04 13:10:22,527 - INFO - Project downloaded to: data/projects/creating-3d-entities-with-realitykit
2024-11-04 13:10:22,527 - INFO - Analyzing project...
2024-11-04 13:10:22,528 - INFO - Found 3 Swift files
2024-11-04 13:10:22,529 - INFO - Found cylinder example in ShapesView+Entities.swift
2024-11-04 13:10:22,529 - INFO - 
Found 1 3d_content examples:
2024-11-04 13:10:22,529 - INFO - - In file: ShapesView+Entities.swift
2024-11-04 13:10:22,529 - INFO -   Preview: /*
See the LICENSE.txt file for this sampleâ€™s licensing information.

Abstract:
An extension of the app's main view that creates entities with geometries.
*/

import RealityKit

extension ShapesView {...
2024-11-04 13:10:22,529 - INFO - 
Found 0 animation examples:
2024-11-04 13:10:22,529 - INFO - 
Found 0 transforms examples:
2024-11-04 13:10:22,529 - INFO - 
Found 0 ui_components examples:
2024-11-04 13:13:02,336 - INFO - Processing documentation page: https://developer.apple.com/documentation/visionos/bot-anist
2024-11-04 13:13:06,308 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/0bc6997cb1f0/BOTAnist.zip
2024-11-04 13:13:06,355 - INFO - Found project: BOT-anist
2024-11-04 13:13:06,355 - INFO - Description: 
2024-11-04 13:13:06,355 - INFO - Requirements: {'visionOS': '2.0+', 'Xcode': '15.0+'}
2024-11-04 13:13:06,355 - INFO - Downloading project...
2024-11-04 13:13:20,375 - INFO - Downloaded project to data/projects/bot-anist
2024-11-04 13:13:20,381 - INFO - Project downloaded to: data/projects/bot-anist
2024-11-04 13:13:20,381 - INFO - Analyzing project...
2024-11-04 13:13:20,386 - INFO - Found 30 Swift files
2024-11-04 13:13:20,387 - INFO - 
Analyzing AppState.swift:
2024-11-04 13:13:20,387 - INFO - Found transform usage
2024-11-04 13:13:20,387 - ERROR - Error analyzing project: 'ProjectAnalyzer' object has no attribute '_extract_code_block'
2024-11-04 13:17:01,427 - INFO - Processing documentation page: https://developer.apple.com/documentation/visionos/bot-anist
2024-11-04 13:17:06,859 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/0bc6997cb1f0/BOTAnist.zip
2024-11-04 13:17:06,890 - INFO - Found project: BOT-anist
2024-11-04 13:17:06,891 - INFO - Description: 
2024-11-04 13:17:06,891 - INFO - Requirements: {'visionOS': '2.0+', 'Xcode': '15.0+'}
2024-11-04 13:17:06,891 - INFO - Downloading project...
2024-11-04 13:17:17,860 - INFO - Downloaded project to data/projects/bot-anist
2024-11-04 13:17:17,867 - INFO - Project downloaded to: data/projects/bot-anist
2024-11-04 13:17:17,867 - INFO - Analyzing project...
2024-11-04 13:17:17,872 - INFO - Found 30 Swift files
2024-11-04 13:17:17,872 - INFO - 
Analyzing AppState.swift:
2024-11-04 13:17:17,873 - INFO - Found 3 animation examples
2024-11-04 13:17:17,873 - INFO - 
Analyzing PlantAnimationProvider.swift:
2024-11-04 13:17:17,873 - INFO - Found 32 animation examples
2024-11-04 13:17:17,873 - INFO - 
Analyzing AppState+Exploration.swift:
2024-11-04 13:17:17,873 - INFO - Found 3 transform/rotation examples
2024-11-04 13:17:17,873 - INFO - Found 5 animation examples
2024-11-04 13:17:17,873 - INFO - 
Analyzing BOTanistApp.swift:
2024-11-04 13:17:17,873 - INFO - 
Analyzing Package.swift:
2024-11-04 13:17:17,873 - INFO - 
Analyzing BOTanistAssets.swift:
2024-11-04 13:17:17,873 - INFO - 
Analyzing EntityExtensions.swift:
2024-11-04 13:17:17,873 - INFO - Found 3 animation examples
2024-11-04 13:17:17,874 - INFO - 
Analyzing PlantComponent.swift:
2024-11-04 13:17:17,874 - INFO - 
Analyzing RobotCharacter+Movement.swift:
2024-11-04 13:17:17,874 - INFO - Found 13 animation examples
2024-11-04 13:17:17,874 - INFO - 
Analyzing RobotProvider.swift:
2024-11-04 13:17:17,874 - INFO - 
Analyzing RobotProvider+Loading.swift:
2024-11-04 13:17:17,874 - INFO - Found 7 animation examples
2024-11-04 13:17:17,874 - INFO - 
Analyzing RobotCharacter.swift:
2024-11-04 13:17:17,874 - INFO - Found 23 animation examples
2024-11-04 13:17:17,874 - INFO - 
Analyzing RobotData.swift:
2024-11-04 13:17:17,874 - INFO - 
Analyzing AnimationStateMachine.swift:
2024-11-04 13:17:17,874 - INFO - Found 16 animation examples
2024-11-04 13:17:17,874 - INFO - 
Analyzing RealityView+TouchControls.swift:
2024-11-04 13:17:17,874 - INFO - Found 6 animation examples
2024-11-04 13:17:17,874 - INFO - 
Analyzing EntityExtensions.swift:
2024-11-04 13:17:17,874 - INFO - Found 2 transform/rotation examples
2024-11-04 13:17:17,874 - INFO - Found 4 animation examples
2024-11-04 13:17:17,874 - INFO - 
Analyzing StringExtensions.swift:
2024-11-04 13:17:17,874 - INFO - 
Analyzing Preview+AppStateEnvironment.swift:
2024-11-04 13:17:17,874 - INFO - 
Analyzing ColorExtensions.swift:
2024-11-04 13:17:17,874 - INFO - 
Analyzing RealityView+KeyboardControls.swift:
2024-11-04 13:17:17,875 - INFO - Found 2 animation examples
2024-11-04 13:17:17,875 - INFO - 
Analyzing CaseIterableExtensions.swift:
2024-11-04 13:17:17,875 - INFO - 
Analyzing JointPinComponent.swift:
2024-11-04 13:17:17,875 - INFO - 
Analyzing JointPinSystem.swift:
2024-11-04 13:17:17,875 - INFO - 
Analyzing StartScreenView.swift:
2024-11-04 13:17:17,875 - INFO - 
Analyzing OrnamentView.swift:
2024-11-04 13:17:17,875 - INFO - 
Analyzing SelectorViews.swift:
2024-11-04 13:17:17,875 - INFO - 
Analyzing RobotView.swift:
2024-11-04 13:17:17,875 - INFO - 
Analyzing RobotCustomizationView.swift:
2024-11-04 13:17:17,875 - INFO - Found 1 animation examples
2024-11-04 13:17:17,875 - INFO - 
Analyzing ExplorationView.swift:
2024-11-04 13:17:17,875 - INFO - Found 4 animation examples
2024-11-04 13:17:17,875 - INFO - 
Analyzing ContentView.swift:
2024-11-04 13:17:17,875 - INFO - 
Found 0 3d_content examples:
2024-11-04 13:17:17,875 - INFO - 
Found 13 animation examples:
2024-11-04 13:17:17,875 - INFO - 
File: AppState.swift
2024-11-04 13:17:17,875 - INFO - 
File: PlantAnimationProvider.swift
2024-11-04 13:17:17,875 - INFO - 
File: AppState+Exploration.swift
2024-11-04 13:17:17,875 - INFO - 
File: EntityExtensions.swift
2024-11-04 13:17:17,875 - INFO - 
File: RobotCharacter+Movement.swift
2024-11-04 13:17:17,875 - INFO - 
File: RobotProvider+Loading.swift
2024-11-04 13:17:17,875 - INFO - 
File: RobotCharacter.swift
2024-11-04 13:17:17,875 - INFO - 
File: AnimationStateMachine.swift
2024-11-04 13:17:17,875 - INFO - 
File: RealityView+TouchControls.swift
2024-11-04 13:17:17,875 - INFO - 
File: EntityExtensions.swift
2024-11-04 13:17:17,875 - INFO - 
File: RealityView+KeyboardControls.swift
2024-11-04 13:17:17,875 - INFO - 
File: RobotCustomizationView.swift
2024-11-04 13:17:17,875 - INFO - 
File: ExplorationView.swift
2024-11-04 13:17:17,876 - INFO - 
Found 2 transforms examples:
2024-11-04 13:17:17,876 - INFO - 
File: AppState+Exploration.swift
2024-11-04 13:17:17,876 - INFO - 
File: EntityExtensions.swift
2024-11-04 13:17:17,876 - INFO - 
Found 0 ui_components examples:
2024-11-04 13:18:54,400 - INFO - Processing documentation page: https://developer.apple.com/documentation/visionos/bot-anist
2024-11-04 13:18:57,196 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/0bc6997cb1f0/BOTAnist.zip
2024-11-04 13:18:57,229 - INFO - Found project: BOT-anist
2024-11-04 13:18:57,229 - INFO - Description: 
2024-11-04 13:18:57,229 - INFO - Requirements: {'visionOS': '2.0+', 'Xcode': '15.0+'}
2024-11-04 13:18:57,229 - INFO - Downloading project...
2024-11-04 13:19:02,966 - INFO - Downloaded project to data/projects/bot-anist
2024-11-04 13:19:02,973 - INFO - Project downloaded to: data/projects/bot-anist
2024-11-04 13:19:02,973 - INFO - Analyzing project...
2024-11-04 13:19:02,978 - INFO - Found 30 Swift files
2024-11-04 13:19:02,978 - INFO - 
Analyzing AppState.swift:
2024-11-04 13:19:02,978 - INFO - Found 3 animation examples
2024-11-04 13:19:02,978 - INFO - Animation example:
_ = PlantAnimationProvider.shared
2024-11-04 13:19:02,979 - INFO - Context:
    /// The orientation of the robot model in the creation screen.
    var robotCreationOrientation: Rotation3D = Rotation3D()
    
    var isRotating = false
    
    /// The camera establishing the rendering perspective for the creation screen `RealityView` for platforms other than visionOS.
    let robotCamera = PerspectiveCamera()
    /// The camera establishing the rendering perspective for the exploration screen `RealityView` for platforms other than visionOS.
    var explorationCamera = PerspectiveCamera()
        
    var totalPlants: Int = 3
    
    init() {
        // Warm up the provider and load the assets
        let provider = RobotProvider.shared
        _ = PlantAnimationProvider.shared
       
        phase = .loadingAssets
        provider.listenForLoadComplete() { provider in
            self.phase = .playing
            self.robotData = RobotData()
            
            #if os(macOS) || os(iOS)
            self.creationRoot.scale = SIMD3<Float>(repeating: 0.027)
            self.creationRoot.position = SIMD3<Float>(x: -0, y: -0.022, z: -0.05)
            #else
            self.creationRoot.scale = SIMD3<Float>(repeating: 0.23)
            self.creationRoot.position = SIMD3<Float>(x: -0.02, y: -0.175, z: -0.05)
            #endif

            RobotPart.allCases.forEach { part in

2024-11-04 13:19:02,979 - INFO - Animation example:
if let celebrateAnim = PlantAnimationProvider.shared.celebrateAnimations[plantComponent.plantType] {
2024-11-04 13:19:02,979 - INFO - Context:
            }
            
            setMaterial(part: part, material: .plastic)
            robotData.lightColor[part] = .white
            robotData.materialColorIndex[part] = 0
            robotData.face = .circle
            updateRobotAppearance()
        }
    }
    
    /// Starts the celebration after the robot finishes propagating all the plants.
    public func startCelebration() {
        celebrating = true
        explorationEnvironment?.forEachDescendant(withComponent: PlantComponent.self) { plantEntity, plantComponent in
            plantEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { blendEntity, blendComponent in
                if let celebrateAnim = PlantAnimationProvider.shared.celebrateAnimations[plantComponent.plantType] {
                    blendEntity.playAnimation(celebrateAnim.repeat())
                }
            }
        }
    }
}


2024-11-04 13:19:02,979 - INFO - Animation example:
blendEntity.playAnimation(celebrateAnim.repeat())
2024-11-04 13:19:02,979 - INFO - Context:
            
            setMaterial(part: part, material: .plastic)
            robotData.lightColor[part] = .white
            robotData.materialColorIndex[part] = 0
            robotData.face = .circle
            updateRobotAppearance()
        }
    }
    
    /// Starts the celebration after the robot finishes propagating all the plants.
    public func startCelebration() {
        celebrating = true
        explorationEnvironment?.forEachDescendant(withComponent: PlantComponent.self) { plantEntity, plantComponent in
            plantEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { blendEntity, blendComponent in
                if let celebrateAnim = PlantAnimationProvider.shared.celebrateAnimations[plantComponent.plantType] {
                    blendEntity.playAnimation(celebrateAnim.repeat())
                }
            }
        }
    }
}


2024-11-04 13:19:02,979 - INFO - 
Analyzing PlantAnimationProvider.swift:
2024-11-04 13:19:02,979 - INFO - Found 26 animation examples
2024-11-04 13:19:02,979 - INFO - Animation example:
Loads and provides access to plant animations.
2024-11-04 13:19:02,979 - INFO - Context:
/*
See the LICENSE.txt file for this sampleâ€™s licensing information.

Abstract:
Loads and provides access to plant animations.
*/

import Foundation
import RealityKit
import BOTanistAssets
import SwiftUI
import Spatial

/// An object that loads and provides all the necessary animations for each plant model.
@MainActor
class PlantAnimationProvider: Sendable {
    static var shared = PlantAnimationProvider()
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()

2024-11-04 13:19:02,979 - INFO - Animation example:
class PlantAnimationProvider: Sendable {
2024-11-04 13:19:02,979 - INFO - Context:
/*
See the LICENSE.txt file for this sampleâ€™s licensing information.

Abstract:
Loads and provides access to plant animations.
*/

import Foundation
import RealityKit
import BOTanistAssets
import SwiftUI
import Spatial

/// An object that loads and provides all the necessary animations for each plant model.
@MainActor
class PlantAnimationProvider: Sendable {
    static var shared = PlantAnimationProvider()
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the celebration animations for each type of plant.
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)

2024-11-04 13:19:02,979 - INFO - Animation example:
static var shared = PlantAnimationProvider()
2024-11-04 13:19:02,979 - INFO - Context:
See the LICENSE.txt file for this sampleâ€™s licensing information.

Abstract:
Loads and provides access to plant animations.
*/

import Foundation
import RealityKit
import BOTanistAssets
import SwiftUI
import Spatial

/// An object that loads and provides all the necessary animations for each plant model.
@MainActor
class PlantAnimationProvider: Sendable {
    static var shared = PlantAnimationProvider()
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the celebration animations for each type of plant.
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)

2024-11-04 13:19:02,979 - INFO - Animation example:
public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
2024-11-04 13:19:02,979 - INFO - Context:
Loads and provides access to plant animations.
*/

import Foundation
import RealityKit
import BOTanistAssets
import SwiftUI
import Spatial

/// An object that loads and provides all the necessary animations for each plant model.
@MainActor
class PlantAnimationProvider: Sendable {
    static var shared = PlantAnimationProvider()
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the celebration animations for each type of plant.
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }

2024-11-04 13:19:02,979 - INFO - Animation example:
public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
2024-11-04 13:19:02,979 - INFO - Context:

import Foundation
import RealityKit
import BOTanistAssets
import SwiftUI
import Spatial

/// An object that loads and provides all the necessary animations for each plant model.
@MainActor
class PlantAnimationProvider: Sendable {
    static var shared = PlantAnimationProvider()
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the celebration animations for each type of plant.
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim

2024-11-04 13:19:02,979 - INFO - Animation example:
public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
2024-11-04 13:19:02,979 - INFO - Context:
import RealityKit
import BOTanistAssets
import SwiftUI
import Spatial

/// An object that loads and provides all the necessary animations for each plant model.
@MainActor
class PlantAnimationProvider: Sendable {
    static var shared = PlantAnimationProvider()
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the celebration animations for each type of plant.
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }

2024-11-04 13:19:02,979 - INFO - Animation example:
await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
2024-11-04 13:19:02,979 - INFO - Context:

/// An object that loads and provides all the necessary animations for each plant model.
@MainActor
class PlantAnimationProvider: Sendable {
    static var shared = PlantAnimationProvider()
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the celebration animations for each type of plant.
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    

2024-11-04 13:19:02,979 - INFO - Animation example:
let growAnim = await self.generateGrowAnimationResource(for: plantType)
2024-11-04 13:19:02,979 - INFO - Context:
class PlantAnimationProvider: Sendable {
    static var shared = PlantAnimationProvider()
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the celebration animations for each type of plant.
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"

2024-11-04 13:19:02,980 - INFO - Animation example:
let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
2024-11-04 13:19:02,980 - INFO - Context:
    static var shared = PlantAnimationProvider()
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the celebration animations for each type of plant.
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil

2024-11-04 13:19:02,980 - INFO - Animation example:
return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
2024-11-04 13:19:02,980 - INFO - Context:
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the celebration animations for each type of plant.
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {

2024-11-04 13:19:02,980 - INFO - Animation example:
growAnimations[result.plantType] = result.growAnim
2024-11-04 13:19:02,980 - INFO - Context:
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value

2024-11-04 13:19:02,980 - INFO - Animation example:
celebrateAnimations[result.plantType] = result.celebrateAnim
2024-11-04 13:19:02,980 - INFO - Context:
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }

2024-11-04 13:19:02,980 - INFO - Animation example:
private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
2024-11-04 13:19:02,980 - INFO - Context:
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }

2024-11-04 13:19:02,980 - INFO - Animation example:
let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
2024-11-04 13:19:02,980 - INFO - Context:
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    

2024-11-04 13:19:02,980 - INFO - Animation example:
var ret: AnimationResource? = nil
2024-11-04 13:19:02,980 - INFO - Context:
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    
    /// Loads the celebration animation for the given plant type.

2024-11-04 13:19:02,980 - INFO - Animation example:
if let index = entity.animationLibraryComponent?.animations.startIndex {
2024-11-04 13:19:02,980 - INFO - Context:
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    
    /// Loads the celebration animation for the given plant type.
    private func generateCelebrateAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_celebrate_anim"
        var ret: AnimationResource? = nil
        do {

2024-11-04 13:19:02,980 - INFO - Animation example:
ret = entity.animationLibraryComponent?.animations[index].value
2024-11-04 13:19:02,980 - INFO - Context:
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    
    /// Loads the celebration animation for the given plant type.
    private func generateCelebrateAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_celebrate_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)

2024-11-04 13:19:02,980 - INFO - Animation example:
guard let ret else { fatalError("Animation resource unexpectedly nil.") }
2024-11-04 13:19:02,980 - INFO - Context:
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    
    /// Loads the celebration animation for the given plant type.
    private func generateCelebrateAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_celebrate_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
             rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                 ret = entity.animationLibraryComponent?.defaultAnimation
             }

2024-11-04 13:19:02,980 - INFO - Animation example:
private func generateCelebrateAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
2024-11-04 13:19:02,980 - INFO - Context:
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    
    /// Loads the celebration animation for the given plant type.
    private func generateCelebrateAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_celebrate_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
             rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                 ret = entity.animationLibraryComponent?.defaultAnimation
             }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
}


2024-11-04 13:19:02,980 - INFO - Animation example:
let sceneName = "Assets/plants/animations/\(plantType.rawValue)_celebrate_anim"
2024-11-04 13:19:02,980 - INFO - Context:
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    
    /// Loads the celebration animation for the given plant type.
    private func generateCelebrateAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_celebrate_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
             rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                 ret = entity.animationLibraryComponent?.defaultAnimation
             }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
}

@MainActor

2024-11-04 13:19:02,980 - INFO - Animation example:
var ret: AnimationResource? = nil
2024-11-04 13:19:02,980 - INFO - Context:
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    
    /// Loads the celebration animation for the given plant type.

2024-11-04 13:19:02,980 - INFO - Animation example:
ret = entity.animationLibraryComponent?.defaultAnimation
2024-11-04 13:19:02,980 - INFO - Context:
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    
    /// Loads the celebration animation for the given plant type.
    private func generateCelebrateAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_celebrate_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
             rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                 ret = entity.animationLibraryComponent?.defaultAnimation
             }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
}

@MainActor
public struct PlantAnimationResult: Sendable {
    var growAnim: AnimationResource
    var celebrateAnim: AnimationResource
    var plantType: PlantComponent.PlantTypeKey
}

2024-11-04 13:19:02,980 - INFO - Animation example:
guard let ret else { fatalError("Animation resource unexpectedly nil.") }
2024-11-04 13:19:02,980 - INFO - Context:
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    
    /// Loads the celebration animation for the given plant type.
    private func generateCelebrateAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_celebrate_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
             rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                 ret = entity.animationLibraryComponent?.defaultAnimation
             }

2024-11-04 13:19:02,980 - INFO - Animation example:
public struct PlantAnimationResult: Sendable {
2024-11-04 13:19:02,981 - INFO - Context:
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
             rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                 ret = entity.animationLibraryComponent?.defaultAnimation
             }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
}

@MainActor
public struct PlantAnimationResult: Sendable {
    var growAnim: AnimationResource
    var celebrateAnim: AnimationResource
    var plantType: PlantComponent.PlantTypeKey
}


2024-11-04 13:19:02,981 - INFO - Animation example:
var growAnim: AnimationResource
2024-11-04 13:19:02,981 - INFO - Context:
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
             rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                 ret = entity.animationLibraryComponent?.defaultAnimation
             }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
}

@MainActor
public struct PlantAnimationResult: Sendable {
    var growAnim: AnimationResource
    var celebrateAnim: AnimationResource
    var plantType: PlantComponent.PlantTypeKey
}


2024-11-04 13:19:02,981 - INFO - Animation example:
var celebrateAnim: AnimationResource
2024-11-04 13:19:02,981 - INFO - Context:
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
             rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                 ret = entity.animationLibraryComponent?.defaultAnimation
             }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
}

@MainActor
public struct PlantAnimationResult: Sendable {
    var growAnim: AnimationResource
    var celebrateAnim: AnimationResource
    var plantType: PlantComponent.PlantTypeKey
}


2024-11-04 13:19:02,981 - INFO - 
Analyzing AppState+Exploration.swift:
2024-11-04 13:19:02,981 - INFO - Found 3 transform/rotation examples
2024-11-04 13:19:02,981 - INFO - Transform example:
robot?.head.transform.rotation = simd_quatf()
2024-11-04 13:19:02,981 - INFO - Context:
    
    /// Exits the exploration phase of the app and return to the creation view.
    public func exitExploration() {
        if let bodies = RobotProvider.shared.robotParts[.body] {
            for body in bodies {
                body.stopAllAnimations()
            }
        }

        robot?.animationState = .idle
        robot?.head.removeFromParent()
        robot?.body.removeFromParent()
        robot?.backpack.removeFromParent()
        
        robot?.head.transform.translation = .zero
        robot?.head.transform.rotation = simd_quatf()
        robot?.body.transform.translation = .zero
        robot?.body.transform.rotation = simd_quatf()
        robot?.backpack.transform.translation = .zero
        robot?.backpack.transform.rotation = simd_quatf()
       
        if let skeleton = robot?.body.findEntity(named: "rig_grp") {
            skeleton.jointPinComponent = nil
        }
        
        let children = explorationRoot.children
        for child in children {
            child.removeFromParent()
        }
        
        explorationEnvironment = nil

2024-11-04 13:19:02,981 - INFO - Transform example:
robot?.body.transform.rotation = simd_quatf()
2024-11-04 13:19:02,981 - INFO - Context:
    public func exitExploration() {
        if let bodies = RobotProvider.shared.robotParts[.body] {
            for body in bodies {
                body.stopAllAnimations()
            }
        }

        robot?.animationState = .idle
        robot?.head.removeFromParent()
        robot?.body.removeFromParent()
        robot?.backpack.removeFromParent()
        
        robot?.head.transform.translation = .zero
        robot?.head.transform.rotation = simd_quatf()
        robot?.body.transform.translation = .zero
        robot?.body.transform.rotation = simd_quatf()
        robot?.backpack.transform.translation = .zero
        robot?.backpack.transform.rotation = simd_quatf()
       
        if let skeleton = robot?.body.findEntity(named: "rig_grp") {
            skeleton.jointPinComponent = nil
        }
        
        let children = explorationRoot.children
        for child in children {
            child.removeFromParent()
        }
        
        explorationEnvironment = nil
    
        restoreRobotInCreator()

2024-11-04 13:19:02,981 - INFO - Transform example:
robot?.backpack.transform.rotation = simd_quatf()
2024-11-04 13:19:02,981 - INFO - Context:
            for body in bodies {
                body.stopAllAnimations()
            }
        }

        robot?.animationState = .idle
        robot?.head.removeFromParent()
        robot?.body.removeFromParent()
        robot?.backpack.removeFromParent()
        
        robot?.head.transform.translation = .zero
        robot?.head.transform.rotation = simd_quatf()
        robot?.body.transform.translation = .zero
        robot?.body.transform.rotation = simd_quatf()
        robot?.backpack.transform.translation = .zero
        robot?.backpack.transform.rotation = simd_quatf()
       
        if let skeleton = robot?.body.findEntity(named: "rig_grp") {
            skeleton.jointPinComponent = nil
        }
        
        let children = explorationRoot.children
        for child in children {
            child.removeFromParent()
        }
        
        explorationEnvironment = nil
    
        restoreRobotInCreator()
        phase = .playing
    }

2024-11-04 13:19:02,981 - INFO - Found 5 animation examples
2024-11-04 13:19:02,981 - INFO - Animation example:
Extensions to global app state with animation-related functions.
2024-11-04 13:19:02,981 - INFO - Context:
/*
See the LICENSE.txt file for this sampleâ€™s licensing information.

Abstract:
Extensions to global app state with animation-related functions.
*/

import Foundation
import RealityKit
import BOTanistAssets
import SwiftUI
import Spatial

extension AppState {
    
    /// Prepares the app to transition from the creation phase to the exploration phase.
    public func prepareForExploration() {
        do {
            
            // Load the environment entity and set the blendshape weight mapping for each entity with a BlendShapeWeightsComponent.

2024-11-04 13:19:02,981 - INFO - Animation example:
robot?.animationState.transition(to: .idle)
2024-11-04 13:19:02,981 - INFO - Context:
        let cameraTilt = -0.5
        let rotationAngle = Angle2D(radians: cameraTilt)
        let rotation = Rotation3D(angle: rotationAngle, axis: RotationAxis3D.x)
        let startOrientation = Rotation3D()
        let newOrientation = startOrientation.rotated(by: rotation)
        explorationCamera.setOrientation(.init(newOrientation), relativeTo: nil)
        
        explorationRoot.addChild(robot.characterParent)
        explorationRoot.addChild(explorationEnvironment)
        explorationRoot.scale = SIMD3<Float>(repeating: 0.7)
    }
    
    /// Resets the environment so that no plants have been collected and the robot is back in the intial position.
    public func resetExploration() {
        robot?.plantsFound = 0
        robot?.animationState.transition(to: .idle)
        celebrating = false
        explorationRoot.forEachDescendant(withComponent: PlantComponent.self) { entity, component in
            var plantComponent = component
            plantComponent.interactedWith = false
            entity.components.set(plantComponent)
            entity.stopAllAnimations(recursive: true)
        }
        explorationEnvironment!.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
            Task { @MainActor [entity] in
                entity.components[BlendShapeWeightsComponent.self]!.weightSet[0].weights = BlendShapeWeights([0, 1, 0, 0, 0, 0, 0])
            }
        }
        robot?.characterParent.teleportCharacter(to: [0, 0.065, 0], relativeTo: explorationEnvironment)
    }
    

2024-11-04 13:19:02,981 - INFO - Animation example:
entity.stopAllAnimations(recursive: true)
2024-11-04 13:19:02,981 - INFO - Context:
        
        explorationRoot.addChild(robot.characterParent)
        explorationRoot.addChild(explorationEnvironment)
        explorationRoot.scale = SIMD3<Float>(repeating: 0.7)
    }
    
    /// Resets the environment so that no plants have been collected and the robot is back in the intial position.
    public func resetExploration() {
        robot?.plantsFound = 0
        robot?.animationState.transition(to: .idle)
        celebrating = false
        explorationRoot.forEachDescendant(withComponent: PlantComponent.self) { entity, component in
            var plantComponent = component
            plantComponent.interactedWith = false
            entity.components.set(plantComponent)
            entity.stopAllAnimations(recursive: true)
        }
        explorationEnvironment!.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
            Task { @MainActor [entity] in
                entity.components[BlendShapeWeightsComponent.self]!.weightSet[0].weights = BlendShapeWeights([0, 1, 0, 0, 0, 0, 0])
            }
        }
        robot?.characterParent.teleportCharacter(to: [0, 0.065, 0], relativeTo: explorationEnvironment)
    }
    
    /// Exits the exploration phase of the app and return to the creation view.
    public func exitExploration() {
        if let bodies = RobotProvider.shared.robotParts[.body] {
            for body in bodies {
                body.stopAllAnimations()
            }

2024-11-04 13:19:02,981 - INFO - Animation example:
body.stopAllAnimations()
2024-11-04 13:19:02,981 - INFO - Context:
            entity.components.set(plantComponent)
            entity.stopAllAnimations(recursive: true)
        }
        explorationEnvironment!.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
            Task { @MainActor [entity] in
                entity.components[BlendShapeWeightsComponent.self]!.weightSet[0].weights = BlendShapeWeights([0, 1, 0, 0, 0, 0, 0])
            }
        }
        robot?.characterParent.teleportCharacter(to: [0, 0.065, 0], relativeTo: explorationEnvironment)
    }
    
    /// Exits the exploration phase of the app and return to the creation view.
    public func exitExploration() {
        if let bodies = RobotProvider.shared.robotParts[.body] {
            for body in bodies {
                body.stopAllAnimations()
            }
        }

        robot?.animationState = .idle
        robot?.head.removeFromParent()
        robot?.body.removeFromParent()
        robot?.backpack.removeFromParent()
        
        robot?.head.transform.translation = .zero
        robot?.head.transform.rotation = simd_quatf()
        robot?.body.transform.translation = .zero
        robot?.body.transform.rotation = simd_quatf()
        robot?.backpack.transform.translation = .zero
        robot?.backpack.transform.rotation = simd_quatf()
       

2024-11-04 13:19:02,981 - INFO - Animation example:
robot?.animationState = .idle
2024-11-04 13:19:02,981 - INFO - Context:
            Task { @MainActor [entity] in
                entity.components[BlendShapeWeightsComponent.self]!.weightSet[0].weights = BlendShapeWeights([0, 1, 0, 0, 0, 0, 0])
            }
        }
        robot?.characterParent.teleportCharacter(to: [0, 0.065, 0], relativeTo: explorationEnvironment)
    }
    
    /// Exits the exploration phase of the app and return to the creation view.
    public func exitExploration() {
        if let bodies = RobotProvider.shared.robotParts[.body] {
            for body in bodies {
                body.stopAllAnimations()
            }
        }

        robot?.animationState = .idle
        robot?.head.removeFromParent()
        robot?.body.removeFromParent()
        robot?.backpack.removeFromParent()
        
        robot?.head.transform.translation = .zero
        robot?.head.transform.rotation = simd_quatf()
        robot?.body.transform.translation = .zero
        robot?.body.transform.rotation = simd_quatf()
        robot?.backpack.transform.translation = .zero
        robot?.backpack.transform.rotation = simd_quatf()
       
        if let skeleton = robot?.body.findEntity(named: "rig_grp") {
            skeleton.jointPinComponent = nil
        }
        

2024-11-04 13:19:02,981 - INFO - 
Analyzing BOTanistApp.swift:
2024-11-04 13:19:02,981 - INFO - 
Analyzing Package.swift:
2024-11-04 13:19:02,981 - INFO - 
Analyzing BOTanistAssets.swift:
2024-11-04 13:19:02,981 - INFO - 
Analyzing EntityExtensions.swift:
2024-11-04 13:19:02,981 - INFO - Found 3 animation examples
2024-11-04 13:19:02,981 - INFO - Animation example:
var animationLibraryComponent: AnimationLibraryComponent? {
2024-11-04 13:19:02,982 - INFO - Context:
    /// Recursive search of children looking for any descendants with a specific component and calling a closure with them.
    func forEachDescendant<T: Component>(withComponent componentClass: T.Type, _ closure: (Entity, T) -> Void) {
        for child in children {
            if let component = child.components[componentClass] {
                closure(child, component)
            }
            child.forEachDescendant(withComponent: componentClass, closure)
        }
    }
    
    var modelComponent: ModelComponent? {
        get { components[ModelComponent.self] }
        set { components[ModelComponent.self] = newValue }
    }
    
    var animationLibraryComponent: AnimationLibraryComponent? {
        get { components[AnimationLibraryComponent.self] }
        set { components[AnimationLibraryComponent.self] = newValue }
    }
}


2024-11-04 13:19:02,982 - INFO - Animation example:
get { components[AnimationLibraryComponent.self] }
2024-11-04 13:19:02,982 - INFO - Context:
    func forEachDescendant<T: Component>(withComponent componentClass: T.Type, _ closure: (Entity, T) -> Void) {
        for child in children {
            if let component = child.components[componentClass] {
                closure(child, component)
            }
            child.forEachDescendant(withComponent: componentClass, closure)
        }
    }
    
    var modelComponent: ModelComponent? {
        get { components[ModelComponent.self] }
        set { components[ModelComponent.self] = newValue }
    }
    
    var animationLibraryComponent: AnimationLibraryComponent? {
        get { components[AnimationLibraryComponent.self] }
        set { components[AnimationLibraryComponent.self] = newValue }
    }
}


2024-11-04 13:19:02,982 - INFO - Animation example:
set { components[AnimationLibraryComponent.self] = newValue }
2024-11-04 13:19:02,982 - INFO - Context:
        for child in children {
            if let component = child.components[componentClass] {
                closure(child, component)
            }
            child.forEachDescendant(withComponent: componentClass, closure)
        }
    }
    
    var modelComponent: ModelComponent? {
        get { components[ModelComponent.self] }
        set { components[ModelComponent.self] = newValue }
    }
    
    var animationLibraryComponent: AnimationLibraryComponent? {
        get { components[AnimationLibraryComponent.self] }
        set { components[AnimationLibraryComponent.self] = newValue }
    }
}


2024-11-04 13:19:02,982 - INFO - 
Analyzing PlantComponent.swift:
2024-11-04 13:19:02,982 - INFO - 
Analyzing RobotCharacter+Movement.swift:
2024-11-04 13:19:02,982 - INFO - Found 11 animation examples
2024-11-04 13:19:02,982 - INFO - Animation example:
guard ![.celebrate, .wave].contains(animationState) else { return }
2024-11-04 13:19:02,982 - INFO - Context:

Abstract:
A class extension containing movement-related functions.
*/

import BOTanistAssets
import Combine
import Foundation
import RealityKit
import Spatial
import SwiftUI

extension RobotCharacter {
    /// Handles the movement of the robot every time RealityKit updates the scene.
    func handleMovement(deltaTime: Float) {
        guard ![.celebrate, .wave].contains(animationState) else { return }
        if movementVector != .zero {
            handleNonZeroMovement(deltaTime: deltaTime)
        } else {
            handleZeroMovement(deltaTime: deltaTime)
        }
    }
    
    /// Handles the behavior of the robot if its movement vector is non-zero.
    private func handleNonZeroMovement(deltaTime: Float) {
        // If the player is moving the robot, reset the idle timer.
        idleTimer = 0
        
        // Normalizing the movement vector makes sure diagonal movement doesn't have a higher speed
        // than movement in the cardinal directions.
        let normalizedMovement = movementVector / max(100, length(movementVector))

2024-11-04 13:19:02,982 - INFO - Animation example:
if animationState == .walkEnd {
2024-11-04 13:19:02,982 - INFO - Context:
            handleNonZeroMovement(deltaTime: deltaTime)
        } else {
            handleZeroMovement(deltaTime: deltaTime)
        }
    }
    
    /// Handles the behavior of the robot if its movement vector is non-zero.
    private func handleNonZeroMovement(deltaTime: Float) {
        // If the player is moving the robot, reset the idle timer.
        idleTimer = 0
        
        // Normalizing the movement vector makes sure diagonal movement doesn't have a higher speed
        // than movement in the cardinal directions.
        let normalizedMovement = movementVector / max(100, length(movementVector))
        var speed = baseSpeed
        if animationState == .walkEnd {
            speed = 0.001
        }

        // Move the robot in the direction of the movement vector with scaling applied to account for volume size changes.
        // In the event of a collision, check if the collision object is a plant that hasn't been interacted with.
        // If it is a plant, trigger the plant's grow animation.
        characterParent.moveCharacter(by: normalizedMovement * speed * speedScale * deltaTime, deltaTime: deltaTime, relativeTo: nil) { collision in
            if var plantComponent = collision.hitEntity.plantComponent {
                if plantComponent.interactedWith == false {
                    plantComponent.interactedWith = true
                    collision.hitEntity.components.set(plantComponent)
                    self.plantsFound += 1
                    if let growAnimation = PlantAnimationProvider.shared.growAnimations[plantComponent.plantType] {
                        collision.hitEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                            let playbackController = entity.playAnimation(growAnimation)

2024-11-04 13:19:02,982 - INFO - Animation example:
if let growAnimation = PlantAnimationProvider.shared.growAnimations[plantComponent.plantType] {
2024-11-04 13:19:02,982 - INFO - Context:
        let normalizedMovement = movementVector / max(100, length(movementVector))
        var speed = baseSpeed
        if animationState == .walkEnd {
            speed = 0.001
        }

        // Move the robot in the direction of the movement vector with scaling applied to account for volume size changes.
        // In the event of a collision, check if the collision object is a plant that hasn't been interacted with.
        // If it is a plant, trigger the plant's grow animation.
        characterParent.moveCharacter(by: normalizedMovement * speed * speedScale * deltaTime, deltaTime: deltaTime, relativeTo: nil) { collision in
            if var plantComponent = collision.hitEntity.plantComponent {
                if plantComponent.interactedWith == false {
                    plantComponent.interactedWith = true
                    collision.hitEntity.components.set(plantComponent)
                    self.plantsFound += 1
                    if let growAnimation = PlantAnimationProvider.shared.growAnimations[plantComponent.plantType] {
                        collision.hitEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                            let playbackController = entity.playAnimation(growAnimation)
                            PlantAnimationProvider.shared.currentGrowAnimations[plantComponent.plantType] = playbackController
                        }
                    }
                }
            }
            if self.plantsFound == self.appState.totalPlants && self.animationState != .celebrate {
                self.animationState.transition(to: .celebrate)
            }
        }
        // Make sure the robot's facing the direction of the movement.
        characterModel.look(at: characterModel.position(relativeTo: characterParent) - normalizedMovement,
                            from: characterModel.position(relativeTo: characterParent), relativeTo: characterParent)
    }

2024-11-04 13:19:02,982 - INFO - Animation example:
let playbackController = entity.playAnimation(growAnimation)
2024-11-04 13:19:02,982 - INFO - Context:
        if animationState == .walkEnd {
            speed = 0.001
        }

        // Move the robot in the direction of the movement vector with scaling applied to account for volume size changes.
        // In the event of a collision, check if the collision object is a plant that hasn't been interacted with.
        // If it is a plant, trigger the plant's grow animation.
        characterParent.moveCharacter(by: normalizedMovement * speed * speedScale * deltaTime, deltaTime: deltaTime, relativeTo: nil) { collision in
            if var plantComponent = collision.hitEntity.plantComponent {
                if plantComponent.interactedWith == false {
                    plantComponent.interactedWith = true
                    collision.hitEntity.components.set(plantComponent)
                    self.plantsFound += 1
                    if let growAnimation = PlantAnimationProvider.shared.growAnimations[plantComponent.plantType] {
                        collision.hitEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                            let playbackController = entity.playAnimation(growAnimation)
                            PlantAnimationProvider.shared.currentGrowAnimations[plantComponent.plantType] = playbackController
                        }
                    }
                }
            }
            if self.plantsFound == self.appState.totalPlants && self.animationState != .celebrate {
                self.animationState.transition(to: .celebrate)
            }
        }
        // Make sure the robot's facing the direction of the movement.
        characterModel.look(at: characterModel.position(relativeTo: characterParent) - normalizedMovement,
                            from: characterModel.position(relativeTo: characterParent), relativeTo: characterParent)
    }
    
    /// Handles the behavior of the robot if its movement vector is zero.

2024-11-04 13:19:02,982 - INFO - Animation example:
PlantAnimationProvider.shared.currentGrowAnimations[plantComponent.plantType] = playbackController
2024-11-04 13:19:02,982 - INFO - Context:
            speed = 0.001
        }

        // Move the robot in the direction of the movement vector with scaling applied to account for volume size changes.
        // In the event of a collision, check if the collision object is a plant that hasn't been interacted with.
        // If it is a plant, trigger the plant's grow animation.
        characterParent.moveCharacter(by: normalizedMovement * speed * speedScale * deltaTime, deltaTime: deltaTime, relativeTo: nil) { collision in
            if var plantComponent = collision.hitEntity.plantComponent {
                if plantComponent.interactedWith == false {
                    plantComponent.interactedWith = true
                    collision.hitEntity.components.set(plantComponent)
                    self.plantsFound += 1
                    if let growAnimation = PlantAnimationProvider.shared.growAnimations[plantComponent.plantType] {
                        collision.hitEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                            let playbackController = entity.playAnimation(growAnimation)
                            PlantAnimationProvider.shared.currentGrowAnimations[plantComponent.plantType] = playbackController
                        }
                    }
                }
            }
            if self.plantsFound == self.appState.totalPlants && self.animationState != .celebrate {
                self.animationState.transition(to: .celebrate)
            }
        }
        // Make sure the robot's facing the direction of the movement.
        characterModel.look(at: characterModel.position(relativeTo: characterParent) - normalizedMovement,
                            from: characterModel.position(relativeTo: characterParent), relativeTo: characterParent)
    }
    
    /// Handles the behavior of the robot if its movement vector is zero.
    private func handleZeroMovement (deltaTime: Float) {

2024-11-04 13:19:02,982 - INFO - Animation example:
if self.plantsFound == self.appState.totalPlants && self.animationState != .celebrate {
2024-11-04 13:19:02,982 - INFO - Context:
        // If it is a plant, trigger the plant's grow animation.
        characterParent.moveCharacter(by: normalizedMovement * speed * speedScale * deltaTime, deltaTime: deltaTime, relativeTo: nil) { collision in
            if var plantComponent = collision.hitEntity.plantComponent {
                if plantComponent.interactedWith == false {
                    plantComponent.interactedWith = true
                    collision.hitEntity.components.set(plantComponent)
                    self.plantsFound += 1
                    if let growAnimation = PlantAnimationProvider.shared.growAnimations[plantComponent.plantType] {
                        collision.hitEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                            let playbackController = entity.playAnimation(growAnimation)
                            PlantAnimationProvider.shared.currentGrowAnimations[plantComponent.plantType] = playbackController
                        }
                    }
                }
            }
            if self.plantsFound == self.appState.totalPlants && self.animationState != .celebrate {
                self.animationState.transition(to: .celebrate)
            }
        }
        // Make sure the robot's facing the direction of the movement.
        characterModel.look(at: characterModel.position(relativeTo: characterParent) - normalizedMovement,
                            from: characterModel.position(relativeTo: characterParent), relativeTo: characterParent)
    }
    
    /// Handles the behavior of the robot if its movement vector is zero.
    private func handleZeroMovement (deltaTime: Float) {
        idleTimer += deltaTime
        guard idleTimer > idleTimeout && animationState == .idle && !isRotatingToFaceFront else { return }
        
        guard hasChangedOrientationSinceLastWave else {
            return

2024-11-04 13:19:02,982 - INFO - Animation example:
self.animationState.transition(to: .celebrate)
2024-11-04 13:19:02,982 - INFO - Context:
        characterParent.moveCharacter(by: normalizedMovement * speed * speedScale * deltaTime, deltaTime: deltaTime, relativeTo: nil) { collision in
            if var plantComponent = collision.hitEntity.plantComponent {
                if plantComponent.interactedWith == false {
                    plantComponent.interactedWith = true
                    collision.hitEntity.components.set(plantComponent)
                    self.plantsFound += 1
                    if let growAnimation = PlantAnimationProvider.shared.growAnimations[plantComponent.plantType] {
                        collision.hitEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                            let playbackController = entity.playAnimation(growAnimation)
                            PlantAnimationProvider.shared.currentGrowAnimations[plantComponent.plantType] = playbackController
                        }
                    }
                }
            }
            if self.plantsFound == self.appState.totalPlants && self.animationState != .celebrate {
                self.animationState.transition(to: .celebrate)
            }
        }
        // Make sure the robot's facing the direction of the movement.
        characterModel.look(at: characterModel.position(relativeTo: characterParent) - normalizedMovement,
                            from: characterModel.position(relativeTo: characterParent), relativeTo: characterParent)
    }
    
    /// Handles the behavior of the robot if its movement vector is zero.
    private func handleZeroMovement (deltaTime: Float) {
        idleTimer += deltaTime
        guard idleTimer > idleTimeout && animationState == .idle && !isRotatingToFaceFront else { return }
        
        guard hasChangedOrientationSinceLastWave else {
            return
        }

2024-11-04 13:19:02,982 - INFO - Animation example:
guard idleTimer > idleTimeout && animationState == .idle && !isRotatingToFaceFront else { return }
2024-11-04 13:19:02,982 - INFO - Context:
                    }
                }
            }
            if self.plantsFound == self.appState.totalPlants && self.animationState != .celebrate {
                self.animationState.transition(to: .celebrate)
            }
        }
        // Make sure the robot's facing the direction of the movement.
        characterModel.look(at: characterModel.position(relativeTo: characterParent) - normalizedMovement,
                            from: characterModel.position(relativeTo: characterParent), relativeTo: characterParent)
    }
    
    /// Handles the behavior of the robot if its movement vector is zero.
    private func handleZeroMovement (deltaTime: Float) {
        idleTimer += deltaTime
        guard idleTimer > idleTimeout && animationState == .idle && !isRotatingToFaceFront else { return }
        
        guard hasChangedOrientationSinceLastWave else {
            return
        }

#if os(visionOS)
        // Generate a rotation animation for the model parent to face the given viewpoint.
        guard let rotateAnimation = characterModel.getRotationAnimation(toFace: self.idleViewpoint,
                                                                        duration: rotationDuration) else { fatalError() }
        hasChangedOrientationSinceLastWave = false
        isRotatingToFaceFront = true
        self.animationState.transition(to: .wave)
        
        Task { @MainActor in
            try? await Task.sleep(for: .seconds(rotationDuration / 2.0))

2024-11-04 13:19:02,982 - INFO - Animation example:
guard let rotateAnimation = characterModel.getRotationAnimation(toFace: self.idleViewpoint,
2024-11-04 13:19:02,982 - INFO - Context:
        characterModel.look(at: characterModel.position(relativeTo: characterParent) - normalizedMovement,
                            from: characterModel.position(relativeTo: characterParent), relativeTo: characterParent)
    }
    
    /// Handles the behavior of the robot if its movement vector is zero.
    private func handleZeroMovement (deltaTime: Float) {
        idleTimer += deltaTime
        guard idleTimer > idleTimeout && animationState == .idle && !isRotatingToFaceFront else { return }
        
        guard hasChangedOrientationSinceLastWave else {
            return
        }

#if os(visionOS)
        // Generate a rotation animation for the model parent to face the given viewpoint.
        guard let rotateAnimation = characterModel.getRotationAnimation(toFace: self.idleViewpoint,
                                                                        duration: rotationDuration) else { fatalError() }
        hasChangedOrientationSinceLastWave = false
        isRotatingToFaceFront = true
        self.animationState.transition(to: .wave)
        
        Task { @MainActor in
            try? await Task.sleep(for: .seconds(rotationDuration / 2.0))
            characterModel.playAnimation(rotateAnimation)
            try? await Task.sleep(for: .seconds(rotationDuration / 2.0))
            let angle = self.idleViewpoint.orientation.angle.radians
            let finalOrientation = simd_quatf(angle: Float(angle), axis: SIMD3<Float>(x: 0, y: 1, z: 0))
            self.characterModel.orientation = finalOrientation
            self.idleTimer = 0
            self.isRotatingToFaceFront = false
        }

2024-11-04 13:19:02,982 - INFO - Animation example:
self.animationState.transition(to: .wave)
2024-11-04 13:19:02,982 - INFO - Context:
    /// Handles the behavior of the robot if its movement vector is zero.
    private func handleZeroMovement (deltaTime: Float) {
        idleTimer += deltaTime
        guard idleTimer > idleTimeout && animationState == .idle && !isRotatingToFaceFront else { return }
        
        guard hasChangedOrientationSinceLastWave else {
            return
        }

#if os(visionOS)
        // Generate a rotation animation for the model parent to face the given viewpoint.
        guard let rotateAnimation = characterModel.getRotationAnimation(toFace: self.idleViewpoint,
                                                                        duration: rotationDuration) else { fatalError() }
        hasChangedOrientationSinceLastWave = false
        isRotatingToFaceFront = true
        self.animationState.transition(to: .wave)
        
        Task { @MainActor in
            try? await Task.sleep(for: .seconds(rotationDuration / 2.0))
            characterModel.playAnimation(rotateAnimation)
            try? await Task.sleep(for: .seconds(rotationDuration / 2.0))
            let angle = self.idleViewpoint.orientation.angle.radians
            let finalOrientation = simd_quatf(angle: Float(angle), axis: SIMD3<Float>(x: 0, y: 1, z: 0))
            self.characterModel.orientation = finalOrientation
            self.idleTimer = 0
            self.isRotatingToFaceFront = false
        }
#endif
    }
}


2024-11-04 13:19:02,983 - INFO - Animation example:
characterModel.playAnimation(rotateAnimation)
2024-11-04 13:19:02,983 - INFO - Context:
        
        guard hasChangedOrientationSinceLastWave else {
            return
        }

#if os(visionOS)
        // Generate a rotation animation for the model parent to face the given viewpoint.
        guard let rotateAnimation = characterModel.getRotationAnimation(toFace: self.idleViewpoint,
                                                                        duration: rotationDuration) else { fatalError() }
        hasChangedOrientationSinceLastWave = false
        isRotatingToFaceFront = true
        self.animationState.transition(to: .wave)
        
        Task { @MainActor in
            try? await Task.sleep(for: .seconds(rotationDuration / 2.0))
            characterModel.playAnimation(rotateAnimation)
            try? await Task.sleep(for: .seconds(rotationDuration / 2.0))
            let angle = self.idleViewpoint.orientation.angle.radians
            let finalOrientation = simd_quatf(angle: Float(angle), axis: SIMD3<Float>(x: 0, y: 1, z: 0))
            self.characterModel.orientation = finalOrientation
            self.idleTimer = 0
            self.isRotatingToFaceFront = false
        }
#endif
    }
}


2024-11-04 13:19:02,983 - INFO - 
Analyzing RobotProvider.swift:
2024-11-04 13:19:02,983 - INFO - 
Analyzing RobotProvider+Loading.swift:
2024-11-04 13:19:02,983 - INFO - Found 7 animation examples
2024-11-04 13:19:02,983 - INFO - Animation example:
var libComponent = AnimationLibraryComponent()
2024-11-04 13:19:02,983 - INFO - Context:
            fatalError("\tEncountered fatal error: \(error.localizedDescription)")
        }
        return materials
    }
    
    /// Loads each robot part asynchronously as a task that this method adds to a provided task group.
    func loadRobotParts(taskGroup: inout TaskGroup<RobotPartLoadResult>) async {
        RobotPart.allCases.forEach { part in
            for (index, sceneName) in part.sceneNames.enumerated() {
                taskGroup.addTask {
                    do {
                        let partName = part.partNames[index]
                        logger.info("Loading scene \(sceneName), part: \(partName) for part type \(part.rawValue)")
                        if let entity = try await self.loadEntityFromRCPro(named: partName, fromSceneNamed: sceneName) {
                            if part == .body {
                                var libComponent = AnimationLibraryComponent()
                                let animationDirectory = "Assets/Robot/animations/\(partName)/"
                                for animationType in AnimationState.allCases {
                                    if let rootEntity = try? await Entity(named: "\(animationDirectory)\(partName)\(animationType.fileSuffix())",
                                                                          in: BOTanistAssetsBundle) {
                                        if let animationEntity = await rootEntity.findEntity(named: "rig_grp") {
                                            if let animationLibraryComponent = await animationEntity.animationLibraryComponent {
                                                libComponent.animations[animationType.rawValue] = animationLibraryComponent.defaultAnimation
                                            }
                                        }
                                    }
                                }
                                await entity.components.set(libComponent)
                            }
                            return RobotPartLoadResult(entity: entity, type: part, index: index)
                        } else {

2024-11-04 13:19:02,987 - INFO - Animation example:
let animationDirectory = "Assets/Robot/animations/\(partName)/"
2024-11-04 13:19:02,987 - INFO - Context:
        }
        return materials
    }
    
    /// Loads each robot part asynchronously as a task that this method adds to a provided task group.
    func loadRobotParts(taskGroup: inout TaskGroup<RobotPartLoadResult>) async {
        RobotPart.allCases.forEach { part in
            for (index, sceneName) in part.sceneNames.enumerated() {
                taskGroup.addTask {
                    do {
                        let partName = part.partNames[index]
                        logger.info("Loading scene \(sceneName), part: \(partName) for part type \(part.rawValue)")
                        if let entity = try await self.loadEntityFromRCPro(named: partName, fromSceneNamed: sceneName) {
                            if part == .body {
                                var libComponent = AnimationLibraryComponent()
                                let animationDirectory = "Assets/Robot/animations/\(partName)/"
                                for animationType in AnimationState.allCases {
                                    if let rootEntity = try? await Entity(named: "\(animationDirectory)\(partName)\(animationType.fileSuffix())",
                                                                          in: BOTanistAssetsBundle) {
                                        if let animationEntity = await rootEntity.findEntity(named: "rig_grp") {
                                            if let animationLibraryComponent = await animationEntity.animationLibraryComponent {
                                                libComponent.animations[animationType.rawValue] = animationLibraryComponent.defaultAnimation
                                            }
                                        }
                                    }
                                }
                                await entity.components.set(libComponent)
                            }
                            return RobotPartLoadResult(entity: entity, type: part, index: index)
                        } else {
                            fatalError("Error loading robot part \(partName) from scene \(sceneName)")

2024-11-04 13:19:02,987 - INFO - Animation example:
for animationType in AnimationState.allCases {
2024-11-04 13:19:02,987 - INFO - Context:
        return materials
    }
    
    /// Loads each robot part asynchronously as a task that this method adds to a provided task group.
    func loadRobotParts(taskGroup: inout TaskGroup<RobotPartLoadResult>) async {
        RobotPart.allCases.forEach { part in
            for (index, sceneName) in part.sceneNames.enumerated() {
                taskGroup.addTask {
                    do {
                        let partName = part.partNames[index]
                        logger.info("Loading scene \(sceneName), part: \(partName) for part type \(part.rawValue)")
                        if let entity = try await self.loadEntityFromRCPro(named: partName, fromSceneNamed: sceneName) {
                            if part == .body {
                                var libComponent = AnimationLibraryComponent()
                                let animationDirectory = "Assets/Robot/animations/\(partName)/"
                                for animationType in AnimationState.allCases {
                                    if let rootEntity = try? await Entity(named: "\(animationDirectory)\(partName)\(animationType.fileSuffix())",
                                                                          in: BOTanistAssetsBundle) {
                                        if let animationEntity = await rootEntity.findEntity(named: "rig_grp") {
                                            if let animationLibraryComponent = await animationEntity.animationLibraryComponent {
                                                libComponent.animations[animationType.rawValue] = animationLibraryComponent.defaultAnimation
                                            }
                                        }
                                    }
                                }
                                await entity.components.set(libComponent)
                            }
                            return RobotPartLoadResult(entity: entity, type: part, index: index)
                        } else {
                            fatalError("Error loading robot part \(partName) from scene \(sceneName)")
                        }

2024-11-04 13:19:02,987 - INFO - Animation example:
if let rootEntity = try? await Entity(named: "\(animationDirectory)\(partName)\(animationType.fileSuffix())",
2024-11-04 13:19:02,987 - INFO - Context:
    }
    
    /// Loads each robot part asynchronously as a task that this method adds to a provided task group.
    func loadRobotParts(taskGroup: inout TaskGroup<RobotPartLoadResult>) async {
        RobotPart.allCases.forEach { part in
            for (index, sceneName) in part.sceneNames.enumerated() {
                taskGroup.addTask {
                    do {
                        let partName = part.partNames[index]
                        logger.info("Loading scene \(sceneName), part: \(partName) for part type \(part.rawValue)")
                        if let entity = try await self.loadEntityFromRCPro(named: partName, fromSceneNamed: sceneName) {
                            if part == .body {
                                var libComponent = AnimationLibraryComponent()
                                let animationDirectory = "Assets/Robot/animations/\(partName)/"
                                for animationType in AnimationState.allCases {
                                    if let rootEntity = try? await Entity(named: "\(animationDirectory)\(partName)\(animationType.fileSuffix())",
                                                                          in: BOTanistAssetsBundle) {
                                        if let animationEntity = await rootEntity.findEntity(named: "rig_grp") {
                                            if let animationLibraryComponent = await animationEntity.animationLibraryComponent {
                                                libComponent.animations[animationType.rawValue] = animationLibraryComponent.defaultAnimation
                                            }
                                        }
                                    }
                                }
                                await entity.components.set(libComponent)
                            }
                            return RobotPartLoadResult(entity: entity, type: part, index: index)
                        } else {
                            fatalError("Error loading robot part \(partName) from scene \(sceneName)")
                        }
                    } catch {

2024-11-04 13:19:02,987 - INFO - Animation example:
if let animationEntity = await rootEntity.findEntity(named: "rig_grp") {
2024-11-04 13:19:02,987 - INFO - Context:
    /// Loads each robot part asynchronously as a task that this method adds to a provided task group.
    func loadRobotParts(taskGroup: inout TaskGroup<RobotPartLoadResult>) async {
        RobotPart.allCases.forEach { part in
            for (index, sceneName) in part.sceneNames.enumerated() {
                taskGroup.addTask {
                    do {
                        let partName = part.partNames[index]
                        logger.info("Loading scene \(sceneName), part: \(partName) for part type \(part.rawValue)")
                        if let entity = try await self.loadEntityFromRCPro(named: partName, fromSceneNamed: sceneName) {
                            if part == .body {
                                var libComponent = AnimationLibraryComponent()
                                let animationDirectory = "Assets/Robot/animations/\(partName)/"
                                for animationType in AnimationState.allCases {
                                    if let rootEntity = try? await Entity(named: "\(animationDirectory)\(partName)\(animationType.fileSuffix())",
                                                                          in: BOTanistAssetsBundle) {
                                        if let animationEntity = await rootEntity.findEntity(named: "rig_grp") {
                                            if let animationLibraryComponent = await animationEntity.animationLibraryComponent {
                                                libComponent.animations[animationType.rawValue] = animationLibraryComponent.defaultAnimation
                                            }
                                        }
                                    }
                                }
                                await entity.components.set(libComponent)
                            }
                            return RobotPartLoadResult(entity: entity, type: part, index: index)
                        } else {
                            fatalError("Error loading robot part \(partName) from scene \(sceneName)")
                        }
                    } catch {
                        fatalError("Error loading scene \(sceneName) for part \(part.rawValue)")
                    }

2024-11-04 13:19:02,987 - INFO - Animation example:
if let animationLibraryComponent = await animationEntity.animationLibraryComponent {
2024-11-04 13:19:02,987 - INFO - Context:
    func loadRobotParts(taskGroup: inout TaskGroup<RobotPartLoadResult>) async {
        RobotPart.allCases.forEach { part in
            for (index, sceneName) in part.sceneNames.enumerated() {
                taskGroup.addTask {
                    do {
                        let partName = part.partNames[index]
                        logger.info("Loading scene \(sceneName), part: \(partName) for part type \(part.rawValue)")
                        if let entity = try await self.loadEntityFromRCPro(named: partName, fromSceneNamed: sceneName) {
                            if part == .body {
                                var libComponent = AnimationLibraryComponent()
                                let animationDirectory = "Assets/Robot/animations/\(partName)/"
                                for animationType in AnimationState.allCases {
                                    if let rootEntity = try? await Entity(named: "\(animationDirectory)\(partName)\(animationType.fileSuffix())",
                                                                          in: BOTanistAssetsBundle) {
                                        if let animationEntity = await rootEntity.findEntity(named: "rig_grp") {
                                            if let animationLibraryComponent = await animationEntity.animationLibraryComponent {
                                                libComponent.animations[animationType.rawValue] = animationLibraryComponent.defaultAnimation
                                            }
                                        }
                                    }
                                }
                                await entity.components.set(libComponent)
                            }
                            return RobotPartLoadResult(entity: entity, type: part, index: index)
                        } else {
                            fatalError("Error loading robot part \(partName) from scene \(sceneName)")
                        }
                    } catch {
                        fatalError("Error loading scene \(sceneName) for part \(part.rawValue)")
                    }
                }

2024-11-04 13:19:02,987 - INFO - Animation example:
libComponent.animations[animationType.rawValue] = animationLibraryComponent.defaultAnimation
2024-11-04 13:19:02,987 - INFO - Context:
        RobotPart.allCases.forEach { part in
            for (index, sceneName) in part.sceneNames.enumerated() {
                taskGroup.addTask {
                    do {
                        let partName = part.partNames[index]
                        logger.info("Loading scene \(sceneName), part: \(partName) for part type \(part.rawValue)")
                        if let entity = try await self.loadEntityFromRCPro(named: partName, fromSceneNamed: sceneName) {
                            if part == .body {
                                var libComponent = AnimationLibraryComponent()
                                let animationDirectory = "Assets/Robot/animations/\(partName)/"
                                for animationType in AnimationState.allCases {
                                    if let rootEntity = try? await Entity(named: "\(animationDirectory)\(partName)\(animationType.fileSuffix())",
                                                                          in: BOTanistAssetsBundle) {
                                        if let animationEntity = await rootEntity.findEntity(named: "rig_grp") {
                                            if let animationLibraryComponent = await animationEntity.animationLibraryComponent {
                                                libComponent.animations[animationType.rawValue] = animationLibraryComponent.defaultAnimation
                                            }
                                        }
                                    }
                                }
                                await entity.components.set(libComponent)
                            }
                            return RobotPartLoadResult(entity: entity, type: part, index: index)
                        } else {
                            fatalError("Error loading robot part \(partName) from scene \(sceneName)")
                        }
                    } catch {
                        fatalError("Error loading scene \(sceneName) for part \(part.rawValue)")
                    }
                }
            }

2024-11-04 13:19:02,987 - INFO - 
Analyzing RobotCharacter.swift:
2024-11-04 13:19:02,988 - INFO - Found 21 animation examples
2024-11-04 13:19:02,988 - INFO - Animation example:
var animationState: AnimationState = .idle
2024-11-04 13:19:02,988 - INFO - Context:
    
    /// The vector that represents the direction of the robot's movement.
    var movementVector: SIMD3<Float> = .zero
    /// A multiplier you use to calculate the movement speed for the robot.
    var baseSpeed: Float = 0.165
    /// A multiplier you use to calculate the movement speed for the robot.
    ///
    /// When a person resizes the volume, this value updates to keep the robot's speed consistent.
    var speedScale: Float = 1
    /// The number of plants the robot has planted.
    var plantsFound: Int = 0
    var collisionCapsuleRadius: Float = 0.2
    var collisionCapsuleHeight: Float = 2
    
    /// The robot's current animation state.
    var animationState: AnimationState = .idle
    var subscriptions = [any Cancellable]()
    var appState: AppState
    
    #if os(visionOS)
    /// The direction the robot turns to face front after the idle timer expires.
    var idleViewpoint: SquareAzimuth = .front
    #endif
    
    /// The amount of idle time before the robot turns to face the direction in the idle Viewpoint.
    let idleTimeout: Float = 2.0
    /// The amount of time the robot has been idle.
    var idleTimer: Float = 0.0
    
    /// A Boolean value that indicates whether the robot is rotating.
    var isRotatingToFaceFront = false

2024-11-04 13:19:03,042 - INFO - Animation example:
var animationControllers = [AnimationState: AnimationPlaybackController]()
2024-11-04 13:19:03,042 - INFO - Context:
    /// The amount of idle time before the robot turns to face the direction in the idle Viewpoint.
    let idleTimeout: Float = 2.0
    /// The amount of time the robot has been idle.
    var idleTimer: Float = 0.0
    
    /// A Boolean value that indicates whether the robot is rotating.
    var isRotatingToFaceFront = false
    /// A Boolean value that indicates whether the person using the app has changed the orientation they're viewing the volume from.
    var hasChangedOrientationSinceLastWave = false
    
    /// The scale factor of the 3D models that comprise the robot.
    private var modelScale: Float = 0.065

    let rotationDuration = 0.5
    
    var animationControllers = [AnimationState: AnimationPlaybackController]()
    
    init(head: Entity, body: Entity, backpack: Entity, appState: AppState, headOffset: SIMD3<Float>? = nil, backpackOffset: SIMD3<Float>? = nil) {
        self.head = head
        self.body = body
        self.backpack = backpack
        self.appState = appState
        
        self.body.removeFromParent()
        self.head.removeFromParent()
        self.backpack.removeFromParent()
        
        guard let skeleton = body.findEntity(named: "rig_grp") as? ModelEntity else {
            fatalError("Didn't find expected rig_grp entity as descendent of rigged body.")
        }
        

2024-11-04 13:19:03,043 - INFO - Animation example:
animationState.registerHandler { @MainActor state in
2024-11-04 13:19:03,043 - INFO - Context:
                                                            backpackOffset: Transform(translation: backpackOffset).matrix,
                                                            bodyEntity: self.body)
        
        characterParent.components.set(CharacterControllerComponent(radius: collisionCapsuleRadius,
                                                                    height: collisionCapsuleHeight,
                                                                    slopeLimit: 0,
                                                                    stepLimit: 0))
        characterParent.setPosition([0, collisionCapsuleHeight / 2 * modelScale, 0], relativeTo: nil)
        characterModel.addChild(self.head)
        characterModel.addChild(self.body)
        characterModel.addChild(self.backpack)
        characterParent.addChild(characterModel)
        characterModel.setPosition([0, -collisionCapsuleHeight / 2, 0], relativeTo: characterParent)
        
        characterParent.scale = SIMD3<Float>(repeating: modelScale)
        animationState.registerHandler { @MainActor state in
            self.playAnimation(state)
        }
    }
    
    /// Plays the robot animation for the given animation state.
    func playAnimation(_ animState: AnimationState) {
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)

2024-11-04 13:19:03,043 - INFO - Animation example:
self.playAnimation(state)
2024-11-04 13:19:03,043 - INFO - Context:
                                                            bodyEntity: self.body)
        
        characterParent.components.set(CharacterControllerComponent(radius: collisionCapsuleRadius,
                                                                    height: collisionCapsuleHeight,
                                                                    slopeLimit: 0,
                                                                    stepLimit: 0))
        characterParent.setPosition([0, collisionCapsuleHeight / 2 * modelScale, 0], relativeTo: nil)
        characterModel.addChild(self.head)
        characterModel.addChild(self.body)
        characterModel.addChild(self.backpack)
        characterParent.addChild(characterModel)
        characterModel.setPosition([0, -collisionCapsuleHeight / 2, 0], relativeTo: characterParent)
        
        characterParent.scale = SIMD3<Float>(repeating: modelScale)
        animationState.registerHandler { @MainActor state in
            self.playAnimation(state)
        }
    }
    
    /// Plays the robot animation for the given animation state.
    func playAnimation(_ animState: AnimationState) {
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback

2024-11-04 13:19:03,043 - INFO - Animation example:
func playAnimation(_ animState: AnimationState) {
2024-11-04 13:19:03,043 - INFO - Context:
                                                                    stepLimit: 0))
        characterParent.setPosition([0, collisionCapsuleHeight / 2 * modelScale, 0], relativeTo: nil)
        characterModel.addChild(self.head)
        characterModel.addChild(self.body)
        characterModel.addChild(self.backpack)
        characterParent.addChild(characterModel)
        characterModel.setPosition([0, -collisionCapsuleHeight / 2, 0], relativeTo: characterParent)
        
        characterParent.scale = SIMD3<Float>(repeating: modelScale)
        animationState.registerHandler { @MainActor state in
            self.playAnimation(state)
        }
    }
    
    /// Plays the robot animation for the given animation state.
    func playAnimation(_ animState: AnimationState) {
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                

2024-11-04 13:19:03,043 - INFO - Animation example:
guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
2024-11-04 13:19:03,043 - INFO - Context:
        characterParent.setPosition([0, collisionCapsuleHeight / 2 * modelScale, 0], relativeTo: nil)
        characterModel.addChild(self.head)
        characterModel.addChild(self.body)
        characterModel.addChild(self.backpack)
        characterParent.addChild(characterModel)
        characterModel.setPosition([0, -collisionCapsuleHeight / 2, 0], relativeTo: characterParent)
        
        characterParent.scale = SIMD3<Float>(repeating: modelScale)
        animationState.registerHandler { @MainActor state in
            self.playAnimation(state)
        }
    }
    
    /// Plays the robot animation for the given animation state.
    func playAnimation(_ animState: AnimationState) {
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)

2024-11-04 13:19:03,043 - INFO - Animation example:
fatalError("Didn't find requested animation in library.")
2024-11-04 13:19:03,043 - INFO - Context:
        characterModel.addChild(self.head)
        characterModel.addChild(self.body)
        characterModel.addChild(self.backpack)
        characterParent.addChild(characterModel)
        characterModel.setPosition([0, -collisionCapsuleHeight / 2, 0], relativeTo: characterParent)
        
        characterParent.scale = SIMD3<Float>(repeating: modelScale)
        animationState.registerHandler { @MainActor state in
            self.playAnimation(state)
        }
    }
    
    /// Plays the robot animation for the given animation state.
    func playAnimation(_ animState: AnimationState) {
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in

2024-11-04 13:19:03,043 - INFO - Animation example:
let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
2024-11-04 13:19:03,043 - INFO - Context:
        animationState.registerHandler { @MainActor state in
            self.playAnimation(state)
        }
    }
    
    /// Plays the robot animation for the given animation state.
    func playAnimation(_ animState: AnimationState) {
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in
                        guard let self = self else { fatalError("Could not get reference to 'self' in closure.") }
                        let nextState = self.animationState.nextState
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0

2024-11-04 13:19:03,043 - INFO - Animation example:
animationControllers[animState] = playback
2024-11-04 13:19:03,043 - INFO - Context:
            self.playAnimation(state)
        }
    }
    
    /// Plays the robot animation for the given animation state.
    func playAnimation(_ animState: AnimationState) {
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in
                        guard let self = self else { fatalError("Could not get reference to 'self' in closure.") }
                        let nextState = self.animationState.nextState
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }

2024-11-04 13:19:03,043 - INFO - Animation example:
let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
2024-11-04 13:19:03,043 - INFO - Context:
    
    /// Plays the robot animation for the given animation state.
    func playAnimation(_ animState: AnimationState) {
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in
                        guard let self = self else { fatalError("Could not get reference to 'self' in closure.") }
                        let nextState = self.animationState.nextState
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {

2024-11-04 13:19:03,044 - INFO - Animation example:
animationControllers[animState] = playback
2024-11-04 13:19:03,044 - INFO - Context:
            self.playAnimation(state)
        }
    }
    
    /// Plays the robot animation for the given animation state.
    func playAnimation(_ animState: AnimationState) {
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in
                        guard let self = self else { fatalError("Could not get reference to 'self' in closure.") }
                        let nextState = self.animationState.nextState
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }

2024-11-04 13:19:03,044 - INFO - Animation example:
let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
2024-11-04 13:19:03,044 - INFO - Context:
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in
                        guard let self = self else { fatalError("Could not get reference to 'self' in closure.") }
                        let nextState = self.animationState.nextState
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }

2024-11-04 13:19:03,044 - INFO - Animation example:
let nextState = self.animationState.nextState
2024-11-04 13:19:03,044 - INFO - Context:
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in
                        guard let self = self else { fatalError("Could not get reference to 'self' in closure.") }
                        let nextState = self.animationState.nextState
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }
        }
    }
    

2024-11-04 13:19:03,044 - INFO - Animation example:
if self.animationState != self.animationState.nextState {
2024-11-04 13:19:03,044 - INFO - Context:
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in
                        guard let self = self else { fatalError("Could not get reference to 'self' in closure.") }
                        let nextState = self.animationState.nextState
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }
        }
    }
    
    func stopAllAnimations() {

2024-11-04 13:19:03,044 - INFO - Animation example:
self.animationState.transition(to: nextState)
2024-11-04 13:19:03,044 - INFO - Context:
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in
                        guard let self = self else { fatalError("Could not get reference to 'self' in closure.") }
                        let nextState = self.animationState.nextState
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }
        }
    }
    
    func stopAllAnimations() {
        for animState in AnimationState.allCases {

2024-11-04 13:19:03,044 - INFO - Animation example:
if self.animationState != .idle {
2024-11-04 13:19:03,044 - INFO - Context:
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in
                        guard let self = self else { fatalError("Could not get reference to 'self' in closure.") }
                        let nextState = self.animationState.nextState
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }
        }
    }
    
    func stopAllAnimations() {
        for animState in AnimationState.allCases {
            let controller = animationControllers[animState]
            controller?.stop()

2024-11-04 13:19:03,044 - INFO - Animation example:
func stopAllAnimations() {
2024-11-04 13:19:03,044 - INFO - Context:
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }
        }
    }
    
    func stopAllAnimations() {
        for animState in AnimationState.allCases {
            let controller = animationControllers[animState]
            controller?.stop()
            animationControllers[animState] = nil
        }
        body.stopAllAnimations(recursive: true)
    }
    
    private func getJointHierarchy(_ skeleton: ModelEntity, for jointName: String) -> [Int] {
        guard let jointIndex = skeleton.getJointIndex(suffix: jointName) else { fatalError("Unable to retrieve joint named \(jointName).") }
        let jointNames = skeleton.jointNames
        let jointPath = jointNames[jointIndex]
        var components = jointPath.components(separatedBy: "/")
        var indices: [Int] = []
        while !components.isEmpty {

2024-11-04 13:19:03,044 - INFO - Animation example:
for animState in AnimationState.allCases {
2024-11-04 13:19:03,044 - INFO - Context:
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }
        }
    }
    
    func stopAllAnimations() {
        for animState in AnimationState.allCases {
            let controller = animationControllers[animState]
            controller?.stop()
            animationControllers[animState] = nil
        }
        body.stopAllAnimations(recursive: true)
    }
    
    private func getJointHierarchy(_ skeleton: ModelEntity, for jointName: String) -> [Int] {
        guard let jointIndex = skeleton.getJointIndex(suffix: jointName) else { fatalError("Unable to retrieve joint named \(jointName).") }
        let jointNames = skeleton.jointNames
        let jointPath = jointNames[jointIndex]
        var components = jointPath.components(separatedBy: "/")
        var indices: [Int] = []
        while !components.isEmpty {
            let path = components.joined(separator: "/")

2024-11-04 13:19:03,044 - INFO - Animation example:
let controller = animationControllers[animState]
2024-11-04 13:19:03,044 - INFO - Context:
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }
        }
    }
    
    func stopAllAnimations() {
        for animState in AnimationState.allCases {
            let controller = animationControllers[animState]
            controller?.stop()
            animationControllers[animState] = nil
        }
        body.stopAllAnimations(recursive: true)
    }
    
    private func getJointHierarchy(_ skeleton: ModelEntity, for jointName: String) -> [Int] {
        guard let jointIndex = skeleton.getJointIndex(suffix: jointName) else { fatalError("Unable to retrieve joint named \(jointName).") }
        let jointNames = skeleton.jointNames
        let jointPath = jointNames[jointIndex]
        var components = jointPath.components(separatedBy: "/")
        var indices: [Int] = []
        while !components.isEmpty {
            let path = components.joined(separator: "/")
            indices.append(jointNames.firstIndex(of: path)!)

2024-11-04 13:19:03,044 - INFO - Animation example:
animationControllers[animState] = nil
2024-11-04 13:19:03,044 - INFO - Context:
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }
        }
    }
    
    func stopAllAnimations() {
        for animState in AnimationState.allCases {
            let controller = animationControllers[animState]
            controller?.stop()
            animationControllers[animState] = nil
        }
        body.stopAllAnimations(recursive: true)
    }
    
    private func getJointHierarchy(_ skeleton: ModelEntity, for jointName: String) -> [Int] {
        guard let jointIndex = skeleton.getJointIndex(suffix: jointName) else { fatalError("Unable to retrieve joint named \(jointName).") }
        let jointNames = skeleton.jointNames
        let jointPath = jointNames[jointIndex]
        var components = jointPath.components(separatedBy: "/")
        var indices: [Int] = []
        while !components.isEmpty {
            let path = components.joined(separator: "/")
            indices.append(jointNames.firstIndex(of: path)!)
            components.removeLast()
        }

2024-11-04 13:19:03,044 - INFO - Animation example:
body.stopAllAnimations(recursive: true)
2024-11-04 13:19:03,044 - INFO - Context:
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }
        }
    }
    
    func stopAllAnimations() {
        for animState in AnimationState.allCases {
            let controller = animationControllers[animState]
            controller?.stop()
            animationControllers[animState] = nil
        }
        body.stopAllAnimations(recursive: true)
    }
    
    private func getJointHierarchy(_ skeleton: ModelEntity, for jointName: String) -> [Int] {
        guard let jointIndex = skeleton.getJointIndex(suffix: jointName) else { fatalError("Unable to retrieve joint named \(jointName).") }
        let jointNames = skeleton.jointNames
        let jointPath = jointNames[jointIndex]
        var components = jointPath.components(separatedBy: "/")
        var indices: [Int] = []
        while !components.isEmpty {
            let path = components.joined(separator: "/")
            indices.append(jointNames.firstIndex(of: path)!)
            components.removeLast()
        }
        
        var boneList = [String]()

2024-11-04 13:19:03,044 - INFO - 
Analyzing RobotData.swift:
2024-11-04 13:19:03,045 - INFO - 
Analyzing AnimationStateMachine.swift:
2024-11-04 13:19:03,045 - INFO - Found 14 animation examples
2024-11-04 13:19:03,045 - INFO - Animation example:
A state machine that tracks the robot's animations.
2024-11-04 13:19:03,045 - INFO - Context:
/*
See the LICENSE.txt file for this sampleâ€™s licensing information.

Abstract:
A state machine that tracks the robot's animations.
*/

import Foundation
import RealityKit

typealias AnimationStateMachineHandler = (AnimationState) -> Void

/// An enumeration that represents a state machine that tracks the current animation state of the robot.
public enum AnimationState: String, Codable, Sendable, Equatable, CaseIterable {
    case idle
    case walkLoop
    case walkEnd
    case plant
    case celebrate
    case wave

2024-11-04 13:19:03,045 - INFO - Animation example:
typealias AnimationStateMachineHandler = (AnimationState) -> Void
2024-11-04 13:19:03,045 - INFO - Context:
/*
See the LICENSE.txt file for this sampleâ€™s licensing information.

Abstract:
A state machine that tracks the robot's animations.
*/

import Foundation
import RealityKit

typealias AnimationStateMachineHandler = (AnimationState) -> Void

/// An enumeration that represents a state machine that tracks the current animation state of the robot.
public enum AnimationState: String, Codable, Sendable, Equatable, CaseIterable {
    case idle
    case walkLoop
    case walkEnd
    case plant
    case celebrate
    case wave
    
    public enum AnimationLoopingBehavior {
        case infinite
        case finite (times: Int)
    }
    

2024-11-04 13:19:03,045 - INFO - Animation example:
public enum AnimationState: String, Codable, Sendable, Equatable, CaseIterable {
2024-11-04 13:19:03,045 - INFO - Context:
/*
See the LICENSE.txt file for this sampleâ€™s licensing information.

Abstract:
A state machine that tracks the robot's animations.
*/

import Foundation
import RealityKit

typealias AnimationStateMachineHandler = (AnimationState) -> Void

/// An enumeration that represents a state machine that tracks the current animation state of the robot.
public enum AnimationState: String, Codable, Sendable, Equatable, CaseIterable {
    case idle
    case walkLoop
    case walkEnd
    case plant
    case celebrate
    case wave
    
    public enum AnimationLoopingBehavior {
        case infinite
        case finite (times: Int)
    }
    
    @MainActor static var handlers = [AnimationStateMachineHandler]()
    
    /// Returns an array containing all valid state transitions from the current state.

2024-11-04 13:19:03,045 - INFO - Animation example:
public enum AnimationLoopingBehavior {
2024-11-04 13:19:03,045 - INFO - Context:

import Foundation
import RealityKit

typealias AnimationStateMachineHandler = (AnimationState) -> Void

/// An enumeration that represents a state machine that tracks the current animation state of the robot.
public enum AnimationState: String, Codable, Sendable, Equatable, CaseIterable {
    case idle
    case walkLoop
    case walkEnd
    case plant
    case celebrate
    case wave
    
    public enum AnimationLoopingBehavior {
        case infinite
        case finite (times: Int)
    }
    
    @MainActor static var handlers = [AnimationStateMachineHandler]()
    
    /// Returns an array containing all valid state transitions from the current state.
    var validNextStates: [AnimationState] {
        switch self {
            case .idle:
                return [.walkLoop, .plant, .celebrate, .wave]
            case .walkLoop:
                return [.walkEnd, .celebrate]
            case .walkEnd, .plant:
                return [.idle, .celebrate, .wave, .walkLoop]

2024-11-04 13:19:03,045 - INFO - Animation example:
@MainActor static var handlers = [AnimationStateMachineHandler]()
2024-11-04 13:19:03,045 - INFO - Context:

/// An enumeration that represents a state machine that tracks the current animation state of the robot.
public enum AnimationState: String, Codable, Sendable, Equatable, CaseIterable {
    case idle
    case walkLoop
    case walkEnd
    case plant
    case celebrate
    case wave
    
    public enum AnimationLoopingBehavior {
        case infinite
        case finite (times: Int)
    }
    
    @MainActor static var handlers = [AnimationStateMachineHandler]()
    
    /// Returns an array containing all valid state transitions from the current state.
    var validNextStates: [AnimationState] {
        switch self {
            case .idle:
                return [.walkLoop, .plant, .celebrate, .wave]
            case .walkLoop:
                return [.walkEnd, .celebrate]
            case .walkEnd, .plant:
                return [.idle, .celebrate, .wave, .walkLoop]
            case .celebrate, .wave:
                return [.idle]
        }
    }
    

2024-11-04 13:19:03,045 - INFO - Animation example:
var validNextStates: [AnimationState] {
2024-11-04 13:19:03,045 - INFO - Context:
    case idle
    case walkLoop
    case walkEnd
    case plant
    case celebrate
    case wave
    
    public enum AnimationLoopingBehavior {
        case infinite
        case finite (times: Int)
    }
    
    @MainActor static var handlers = [AnimationStateMachineHandler]()
    
    /// Returns an array containing all valid state transitions from the current state.
    var validNextStates: [AnimationState] {
        switch self {
            case .idle:
                return [.walkLoop, .plant, .celebrate, .wave]
            case .walkLoop:
                return [.walkEnd, .celebrate]
            case .walkEnd, .plant:
                return [.idle, .celebrate, .wave, .walkLoop]
            case .celebrate, .wave:
                return [.idle]
        }
    }
    
    @MainActor
    func registerHandler(_ handler: @escaping AnimationStateMachineHandler) {
        AnimationState.handlers.append(handler)

2024-11-04 13:19:03,045 - INFO - Animation example:
func registerHandler(_ handler: @escaping AnimationStateMachineHandler) {
2024-11-04 13:19:03,045 - INFO - Context:
    /// Returns an array containing all valid state transitions from the current state.
    var validNextStates: [AnimationState] {
        switch self {
            case .idle:
                return [.walkLoop, .plant, .celebrate, .wave]
            case .walkLoop:
                return [.walkEnd, .celebrate]
            case .walkEnd, .plant:
                return [.idle, .celebrate, .wave, .walkLoop]
            case .celebrate, .wave:
                return [.idle]
        }
    }
    
    @MainActor
    func registerHandler(_ handler: @escaping AnimationStateMachineHandler) {
        AnimationState.handlers.append(handler)
        // Call the handler for the current state, since it doesn't exist during the transition.
        handler(self)
    }
   
    /// The looping behavior of the animation state.
    var loopingBehavior: AnimationLoopingBehavior {
        if [.idle, .walkLoop, .celebrate].contains(self) {
            return .infinite
        } else {
            return .finite(times: 1)
        }
    }
    
    var nextState: AnimationState {

2024-11-04 13:19:03,045 - INFO - Animation example:
AnimationState.handlers.append(handler)
2024-11-04 13:19:03,045 - INFO - Context:
    var validNextStates: [AnimationState] {
        switch self {
            case .idle:
                return [.walkLoop, .plant, .celebrate, .wave]
            case .walkLoop:
                return [.walkEnd, .celebrate]
            case .walkEnd, .plant:
                return [.idle, .celebrate, .wave, .walkLoop]
            case .celebrate, .wave:
                return [.idle]
        }
    }
    
    @MainActor
    func registerHandler(_ handler: @escaping AnimationStateMachineHandler) {
        AnimationState.handlers.append(handler)
        // Call the handler for the current state, since it doesn't exist during the transition.
        handler(self)
    }
   
    /// The looping behavior of the animation state.
    var loopingBehavior: AnimationLoopingBehavior {
        if [.idle, .walkLoop, .celebrate].contains(self) {
            return .infinite
        } else {
            return .finite(times: 1)
        }
    }
    
    var nextState: AnimationState {
        switch self {

2024-11-04 13:19:03,045 - INFO - Animation example:
var loopingBehavior: AnimationLoopingBehavior {
2024-11-04 13:19:03,045 - INFO - Context:
            case .walkEnd, .plant:
                return [.idle, .celebrate, .wave, .walkLoop]
            case .celebrate, .wave:
                return [.idle]
        }
    }
    
    @MainActor
    func registerHandler(_ handler: @escaping AnimationStateMachineHandler) {
        AnimationState.handlers.append(handler)
        // Call the handler for the current state, since it doesn't exist during the transition.
        handler(self)
    }
   
    /// The looping behavior of the animation state.
    var loopingBehavior: AnimationLoopingBehavior {
        if [.idle, .walkLoop, .celebrate].contains(self) {
            return .infinite
        } else {
            return .finite(times: 1)
        }
    }
    
    var nextState: AnimationState {
        switch self {
        case .walkEnd, .celebrate, .plant, .wave:
                return .idle
            default:
                return self
        }
    }

2024-11-04 13:19:03,045 - INFO - Animation example:
var nextState: AnimationState {
2024-11-04 13:19:03,045 - INFO - Context:
    func registerHandler(_ handler: @escaping AnimationStateMachineHandler) {
        AnimationState.handlers.append(handler)
        // Call the handler for the current state, since it doesn't exist during the transition.
        handler(self)
    }
   
    /// The looping behavior of the animation state.
    var loopingBehavior: AnimationLoopingBehavior {
        if [.idle, .walkLoop, .celebrate].contains(self) {
            return .infinite
        } else {
            return .finite(times: 1)
        }
    }
    
    var nextState: AnimationState {
        switch self {
        case .walkEnd, .celebrate, .plant, .wave:
                return .idle
            default:
                return self
        }
    }
    
    func fileSuffix() -> String {
        return "_\(self.rawValue)_anim"
    }
    
    @MainActor
    mutating func reset() {
        self = .idle

2024-11-04 13:19:03,045 - INFO - Animation example:
for handler in AnimationState.handlers {
2024-11-04 13:19:03,045 - INFO - Context:
        switch self {
        case .walkEnd, .celebrate, .plant, .wave:
                return .idle
            default:
                return self
        }
    }
    
    func fileSuffix() -> String {
        return "_\(self.rawValue)_anim"
    }
    
    @MainActor
    mutating func reset() {
        self = .idle
        for handler in AnimationState.handlers {
            handler(self)
        }
    }
    
    func isValidNextState(_ state: AnimationState) -> Bool {
        return validNextStates.contains(state)
    }
    
    /// Requests a state transition.
    @MainActor
    @discardableResult
    mutating public func transition(to newState: AnimationState) -> Bool {
        let oldValue = self.rawValue
        logger.info("Attempting to change state from \(oldValue) to \(newState.rawValue)")
        guard self != newState else {

2024-11-04 13:19:03,045 - INFO - Animation example:
func isValidNextState(_ state: AnimationState) -> Bool {
2024-11-04 13:19:03,045 - INFO - Context:
        }
    }
    
    func fileSuffix() -> String {
        return "_\(self.rawValue)_anim"
    }
    
    @MainActor
    mutating func reset() {
        self = .idle
        for handler in AnimationState.handlers {
            handler(self)
        }
    }
    
    func isValidNextState(_ state: AnimationState) -> Bool {
        return validNextStates.contains(state)
    }
    
    /// Requests a state transition.
    @MainActor
    @discardableResult
    mutating public func transition(to newState: AnimationState) -> Bool {
        let oldValue = self.rawValue
        logger.info("Attempting to change state from \(oldValue) to \(newState.rawValue)")
        guard self != newState else {
            logger.debug("Attempting to change phase to \(newState.rawValue) but already in that state. Treating as a no-op.")
            return false
        }
        guard isValidNextState(newState) else {
            logger.error("Requested transition from \(oldValue) to \(newState.rawValue), but that's not a valid transition.")

2024-11-04 13:19:03,045 - INFO - Animation example:
mutating public func transition(to newState: AnimationState) -> Bool {
2024-11-04 13:19:03,045 - INFO - Context:
    @MainActor
    mutating func reset() {
        self = .idle
        for handler in AnimationState.handlers {
            handler(self)
        }
    }
    
    func isValidNextState(_ state: AnimationState) -> Bool {
        return validNextStates.contains(state)
    }
    
    /// Requests a state transition.
    @MainActor
    @discardableResult
    mutating public func transition(to newState: AnimationState) -> Bool {
        let oldValue = self.rawValue
        logger.info("Attempting to change state from \(oldValue) to \(newState.rawValue)")
        guard self != newState else {
            logger.debug("Attempting to change phase to \(newState.rawValue) but already in that state. Treating as a no-op.")
            return false
        }
        guard isValidNextState(newState) else {
            logger.error("Requested transition from \(oldValue) to \(newState.rawValue), but that's not a valid transition.")
            return false
        }
        self = newState
        for handler in AnimationState.handlers {
            handler(self)
        }
        return true

2024-11-04 13:19:03,045 - INFO - Animation example:
for handler in AnimationState.handlers {
2024-11-04 13:19:03,045 - INFO - Context:
        switch self {
        case .walkEnd, .celebrate, .plant, .wave:
                return .idle
            default:
                return self
        }
    }
    
    func fileSuffix() -> String {
        return "_\(self.rawValue)_anim"
    }
    
    @MainActor
    mutating func reset() {
        self = .idle
        for handler in AnimationState.handlers {
            handler(self)
        }
    }
    
    func isValidNextState(_ state: AnimationState) -> Bool {
        return validNextStates.contains(state)
    }
    
    /// Requests a state transition.
    @MainActor
    @discardableResult
    mutating public func transition(to newState: AnimationState) -> Bool {
        let oldValue = self.rawValue
        logger.info("Attempting to change state from \(oldValue) to \(newState.rawValue)")
        guard self != newState else {

2024-11-04 13:19:03,045 - INFO - 
Analyzing RealityView+TouchControls.swift:
2024-11-04 13:19:03,046 - INFO - Found 6 animation examples
2024-11-04 13:19:03,046 - INFO - Animation example:
if movementVector != .zero && appState.robot?.animationState == .idle {
2024-11-04 13:19:03,046 - INFO - Context:

import Foundation
import RealityKit
import SwiftUI

public extension View {
    
    func platformTouchControls(appState: AppState) -> some View {
#if !os(visionOS)
        return simultaneousGesture(DragGesture()
            .onChanged { value in
                let translation = value.translation
                let movementVector = SIMD3<Float>(x: Float(translation.width), y: 0, z: Float(translation.height))
                appState.robot?.movementVector = movementVector
                
                if movementVector != .zero && appState.robot?.animationState == .idle {
                    appState.robot?.animationState.transition(to: .walkLoop)
                }
            }
            .onEnded { value in
                appState.robot?.animationState.transition(to: .walkEnd)
                appState.robot?.movementVector = .zero
            }
        )
#else
        return simultaneousGesture(DragGesture()
            .targetedToEntity(appState.robot?.characterParent ?? Entity()) // This could be nil during app state restore.
            .onChanged { @MainActor value in
                guard let robot = appState.robot else { fatalError("No robot.") }
                let translation = value.translation3D
                let movementVector = SIMD3<Float>(x: Float(translation.x), y: 0, z: Float(translation.z))

2024-11-04 13:19:03,046 - INFO - Animation example:
appState.robot?.animationState.transition(to: .walkLoop)
2024-11-04 13:19:03,046 - INFO - Context:
import Foundation
import RealityKit
import SwiftUI

public extension View {
    
    func platformTouchControls(appState: AppState) -> some View {
#if !os(visionOS)
        return simultaneousGesture(DragGesture()
            .onChanged { value in
                let translation = value.translation
                let movementVector = SIMD3<Float>(x: Float(translation.width), y: 0, z: Float(translation.height))
                appState.robot?.movementVector = movementVector
                
                if movementVector != .zero && appState.robot?.animationState == .idle {
                    appState.robot?.animationState.transition(to: .walkLoop)
                }
            }
            .onEnded { value in
                appState.robot?.animationState.transition(to: .walkEnd)
                appState.robot?.movementVector = .zero
            }
        )
#else
        return simultaneousGesture(DragGesture()
            .targetedToEntity(appState.robot?.characterParent ?? Entity()) // This could be nil during app state restore.
            .onChanged { @MainActor value in
                guard let robot = appState.robot else { fatalError("No robot.") }
                let translation = value.translation3D
                let movementVector = SIMD3<Float>(x: Float(translation.x), y: 0, z: Float(translation.z))
                

2024-11-04 13:19:03,046 - INFO - Animation example:
appState.robot?.animationState.transition(to: .walkEnd)
2024-11-04 13:19:03,046 - INFO - Context:
public extension View {
    
    func platformTouchControls(appState: AppState) -> some View {
#if !os(visionOS)
        return simultaneousGesture(DragGesture()
            .onChanged { value in
                let translation = value.translation
                let movementVector = SIMD3<Float>(x: Float(translation.width), y: 0, z: Float(translation.height))
                appState.robot?.movementVector = movementVector
                
                if movementVector != .zero && appState.robot?.animationState == .idle {
                    appState.robot?.animationState.transition(to: .walkLoop)
                }
            }
            .onEnded { value in
                appState.robot?.animationState.transition(to: .walkEnd)
                appState.robot?.movementVector = .zero
            }
        )
#else
        return simultaneousGesture(DragGesture()
            .targetedToEntity(appState.robot?.characterParent ?? Entity()) // This could be nil during app state restore.
            .onChanged { @MainActor value in
                guard let robot = appState.robot else { fatalError("No robot.") }
                let translation = value.translation3D
                let movementVector = SIMD3<Float>(x: Float(translation.x), y: 0, z: Float(translation.z))
                
                // Starting movement while idle
                if robot.movementVector == .zero && movementVector != .zero {
                    robot.animationState.transition(to: .walkLoop)
                }

2024-11-04 13:19:03,046 - INFO - Animation example:
robot.animationState.transition(to: .walkLoop)
2024-11-04 13:19:03,046 - INFO - Context:
            .onEnded { value in
                appState.robot?.animationState.transition(to: .walkEnd)
                appState.robot?.movementVector = .zero
            }
        )
#else
        return simultaneousGesture(DragGesture()
            .targetedToEntity(appState.robot?.characterParent ?? Entity()) // This could be nil during app state restore.
            .onChanged { @MainActor value in
                guard let robot = appState.robot else { fatalError("No robot.") }
                let translation = value.translation3D
                let movementVector = SIMD3<Float>(x: Float(translation.x), y: 0, z: Float(translation.z))
                
                // Starting movement while idle
                if robot.movementVector == .zero && movementVector != .zero {
                    robot.animationState.transition(to: .walkLoop)
                }
                
                // Ending movement while walking
                if robot.movementVector != .zero && movementVector == .zero {
                    robot.animationState.transition(to: .walkEnd)
                }
                robot.movementVector = movementVector
                
            } .onEnded { value in
                appState.robot?.movementVector = SIMD3<Float>(x: 0, y: 0, z: 0)
                appState.robot?.animationState.transition(to: .walkEnd)
            }
        )
#endif
    }

2024-11-04 13:19:03,046 - INFO - Animation example:
robot.animationState.transition(to: .walkEnd)
2024-11-04 13:19:03,046 - INFO - Context:
#else
        return simultaneousGesture(DragGesture()
            .targetedToEntity(appState.robot?.characterParent ?? Entity()) // This could be nil during app state restore.
            .onChanged { @MainActor value in
                guard let robot = appState.robot else { fatalError("No robot.") }
                let translation = value.translation3D
                let movementVector = SIMD3<Float>(x: Float(translation.x), y: 0, z: Float(translation.z))
                
                // Starting movement while idle
                if robot.movementVector == .zero && movementVector != .zero {
                    robot.animationState.transition(to: .walkLoop)
                }
                
                // Ending movement while walking
                if robot.movementVector != .zero && movementVector == .zero {
                    robot.animationState.transition(to: .walkEnd)
                }
                robot.movementVector = movementVector
                
            } .onEnded { value in
                appState.robot?.movementVector = SIMD3<Float>(x: 0, y: 0, z: 0)
                appState.robot?.animationState.transition(to: .walkEnd)
            }
        )
#endif
    }
}


2024-11-04 13:19:03,046 - INFO - Animation example:
appState.robot?.animationState.transition(to: .walkEnd)
2024-11-04 13:19:03,046 - INFO - Context:
public extension View {
    
    func platformTouchControls(appState: AppState) -> some View {
#if !os(visionOS)
        return simultaneousGesture(DragGesture()
            .onChanged { value in
                let translation = value.translation
                let movementVector = SIMD3<Float>(x: Float(translation.width), y: 0, z: Float(translation.height))
                appState.robot?.movementVector = movementVector
                
                if movementVector != .zero && appState.robot?.animationState == .idle {
                    appState.robot?.animationState.transition(to: .walkLoop)
                }
            }
            .onEnded { value in
                appState.robot?.animationState.transition(to: .walkEnd)
                appState.robot?.movementVector = .zero
            }
        )
#else
        return simultaneousGesture(DragGesture()
            .targetedToEntity(appState.robot?.characterParent ?? Entity()) // This could be nil during app state restore.
            .onChanged { @MainActor value in
                guard let robot = appState.robot else { fatalError("No robot.") }
                let translation = value.translation3D
                let movementVector = SIMD3<Float>(x: Float(translation.x), y: 0, z: Float(translation.z))
                
                // Starting movement while idle
                if robot.movementVector == .zero && movementVector != .zero {
                    robot.animationState.transition(to: .walkLoop)
                }

2024-11-04 13:19:03,046 - INFO - 
Analyzing EntityExtensions.swift:
2024-11-04 13:19:03,046 - INFO - Found 2 transform/rotation examples
2024-11-04 13:19:03,046 - INFO - Transform example:
let toTransform = Transform(scale: transform.scale, rotation: quat, translation: transform.translation)
2024-11-04 13:19:03,046 - INFO - Context:
import RealityKit
import Foundation
import SwiftUI

public extension Entity {
    var jointPinComponent: JointPinComponent? {
        get { components[JointPinComponent.self] }
        set { components[JointPinComponent.self] = newValue }
    }

    #if os(visionOS)
    /// Generates a rotation animation for the entity from its current orientation to face the person playing.
    func getRotationAnimation(toFace: SquareAzimuth, duration: TimeInterval) -> AnimationResource? {
        let quat = simd_quatf(toFace.orientation)
        let fromTransform = transform
        let toTransform = Transform(scale: transform.scale, rotation: quat, translation: transform.translation)
        let rotateAnim = FromToByAnimation(name: "rotation", from: fromTransform, to: toTransform, duration: duration, bindTarget: .transform )
        return try? AnimationResource.generate(with: rotateAnim)
    }
    #endif
}

extension ModelEntity {
    func getJointIndex(suffix: String) -> Int? {
        return jointNames
            .enumerated()
            .first(where: { $0.element.hasSuffix(suffix) })?
            .offset
    }
}


2024-11-04 13:19:03,046 - INFO - Transform example:
let rotateAnim = FromToByAnimation(name: "rotation", from: fromTransform, to: toTransform, duration: duration, bindTarget: .transform )
2024-11-04 13:19:03,046 - INFO - Context:
import Foundation
import SwiftUI

public extension Entity {
    var jointPinComponent: JointPinComponent? {
        get { components[JointPinComponent.self] }
        set { components[JointPinComponent.self] = newValue }
    }

    #if os(visionOS)
    /// Generates a rotation animation for the entity from its current orientation to face the person playing.
    func getRotationAnimation(toFace: SquareAzimuth, duration: TimeInterval) -> AnimationResource? {
        let quat = simd_quatf(toFace.orientation)
        let fromTransform = transform
        let toTransform = Transform(scale: transform.scale, rotation: quat, translation: transform.translation)
        let rotateAnim = FromToByAnimation(name: "rotation", from: fromTransform, to: toTransform, duration: duration, bindTarget: .transform )
        return try? AnimationResource.generate(with: rotateAnim)
    }
    #endif
}

extension ModelEntity {
    func getJointIndex(suffix: String) -> Int? {
        return jointNames
            .enumerated()
            .first(where: { $0.element.hasSuffix(suffix) })?
            .offset
    }
}


2024-11-04 13:19:03,046 - INFO - Found 3 animation examples
2024-11-04 13:19:03,046 - INFO - Animation example:
func getRotationAnimation(toFace: SquareAzimuth, duration: TimeInterval) -> AnimationResource? {
2024-11-04 13:19:03,046 - INFO - Context:
Extensions on Entity and ModelEntity that add commonly used custom variables and functions.
*/

import RealityKit
import Foundation
import SwiftUI

public extension Entity {
    var jointPinComponent: JointPinComponent? {
        get { components[JointPinComponent.self] }
        set { components[JointPinComponent.self] = newValue }
    }

    #if os(visionOS)
    /// Generates a rotation animation for the entity from its current orientation to face the person playing.
    func getRotationAnimation(toFace: SquareAzimuth, duration: TimeInterval) -> AnimationResource? {
        let quat = simd_quatf(toFace.orientation)
        let fromTransform = transform
        let toTransform = Transform(scale: transform.scale, rotation: quat, translation: transform.translation)
        let rotateAnim = FromToByAnimation(name: "rotation", from: fromTransform, to: toTransform, duration: duration, bindTarget: .transform )
        return try? AnimationResource.generate(with: rotateAnim)
    }
    #endif
}

extension ModelEntity {
    func getJointIndex(suffix: String) -> Int? {
        return jointNames
            .enumerated()
            .first(where: { $0.element.hasSuffix(suffix) })?
            .offset

2024-11-04 13:19:03,046 - INFO - Animation example:
let rotateAnim = FromToByAnimation(name: "rotation", from: fromTransform, to: toTransform, duration: duration, bindTarget: .transform )
2024-11-04 13:19:03,047 - INFO - Context:
import Foundation
import SwiftUI

public extension Entity {
    var jointPinComponent: JointPinComponent? {
        get { components[JointPinComponent.self] }
        set { components[JointPinComponent.self] = newValue }
    }

    #if os(visionOS)
    /// Generates a rotation animation for the entity from its current orientation to face the person playing.
    func getRotationAnimation(toFace: SquareAzimuth, duration: TimeInterval) -> AnimationResource? {
        let quat = simd_quatf(toFace.orientation)
        let fromTransform = transform
        let toTransform = Transform(scale: transform.scale, rotation: quat, translation: transform.translation)
        let rotateAnim = FromToByAnimation(name: "rotation", from: fromTransform, to: toTransform, duration: duration, bindTarget: .transform )
        return try? AnimationResource.generate(with: rotateAnim)
    }
    #endif
}

extension ModelEntity {
    func getJointIndex(suffix: String) -> Int? {
        return jointNames
            .enumerated()
            .first(where: { $0.element.hasSuffix(suffix) })?
            .offset
    }
}


2024-11-04 13:19:03,047 - INFO - Animation example:
return try? AnimationResource.generate(with: rotateAnim)
2024-11-04 13:19:03,047 - INFO - Context:
import SwiftUI

public extension Entity {
    var jointPinComponent: JointPinComponent? {
        get { components[JointPinComponent.self] }
        set { components[JointPinComponent.self] = newValue }
    }

    #if os(visionOS)
    /// Generates a rotation animation for the entity from its current orientation to face the person playing.
    func getRotationAnimation(toFace: SquareAzimuth, duration: TimeInterval) -> AnimationResource? {
        let quat = simd_quatf(toFace.orientation)
        let fromTransform = transform
        let toTransform = Transform(scale: transform.scale, rotation: quat, translation: transform.translation)
        let rotateAnim = FromToByAnimation(name: "rotation", from: fromTransform, to: toTransform, duration: duration, bindTarget: .transform )
        return try? AnimationResource.generate(with: rotateAnim)
    }
    #endif
}

extension ModelEntity {
    func getJointIndex(suffix: String) -> Int? {
        return jointNames
            .enumerated()
            .first(where: { $0.element.hasSuffix(suffix) })?
            .offset
    }
}


2024-11-04 13:19:03,051 - INFO - 
Analyzing StringExtensions.swift:
2024-11-04 13:19:03,051 - INFO - 
Analyzing Preview+AppStateEnvironment.swift:
2024-11-04 13:19:03,051 - INFO - 
Analyzing ColorExtensions.swift:
2024-11-04 13:19:03,051 - INFO - 
Analyzing RealityView+KeyboardControls.swift:
2024-11-04 13:19:03,051 - INFO - Found 2 animation examples
2024-11-04 13:19:03,051 - INFO - Animation example:
appState.robot?.animationState.transition(to: .walkLoop)
2024-11-04 13:19:03,051 - INFO - Context:
        var ret = Set<KeyEquivalent>()
        for (key, _) in keyBindings {
            ret.insert(key)
        }
        return ret
    }
    
    fileprivate func forEachValidKeyPress(_ press: KeyPress, _ handler: @escaping (SIMD3<Float>) -> Void) {
        if let vector = keyBindings[press.key] {
            handler(vector)
        }
    }
     
    func installTouchControls(appState: AppState) -> some View {
        return onKeyPress(keys: boundKeys, phases: .down) { press in
            appState.robot?.animationState.transition(to: .walkLoop)
            forEachValidKeyPress(press) { vector in
                appState.robot?.movementVector += vector
            }
            
            return .handled
        }
        .onKeyPress(keys: boundKeys, phases: .up) { press in
            Task { @MainActor in
                try? await Task.sleep(for: .seconds(0.1))
                if appState.robot?.movementVector == .zero {
                    appState.robot?.animationState.transition(to: .walkEnd)
                }
            }
            forEachValidKeyPress(press) { vector in
                appState.robot?.movementVector -= vector

2024-11-04 13:19:03,051 - INFO - Animation example:
appState.robot?.animationState.transition(to: .walkEnd)
2024-11-04 13:19:03,051 - INFO - Context:
    }
     
    func installTouchControls(appState: AppState) -> some View {
        return onKeyPress(keys: boundKeys, phases: .down) { press in
            appState.robot?.animationState.transition(to: .walkLoop)
            forEachValidKeyPress(press) { vector in
                appState.robot?.movementVector += vector
            }
            
            return .handled
        }
        .onKeyPress(keys: boundKeys, phases: .up) { press in
            Task { @MainActor in
                try? await Task.sleep(for: .seconds(0.1))
                if appState.robot?.movementVector == .zero {
                    appState.robot?.animationState.transition(to: .walkEnd)
                }
            }
            forEachValidKeyPress(press) { vector in
                appState.robot?.movementVector -= vector
            }
            return .handled
        }
        .onKeyPress(keys: boundKeys, phases: .repeat) { press in
            return .handled
        }
    }
}


2024-11-04 13:19:03,052 - INFO - 
Analyzing CaseIterableExtensions.swift:
2024-11-04 13:19:03,052 - INFO - 
Analyzing JointPinComponent.swift:
2024-11-04 13:19:03,052 - INFO - 
Analyzing JointPinSystem.swift:
2024-11-04 13:19:03,052 - INFO - 
Analyzing StartScreenView.swift:
2024-11-04 13:19:03,052 - INFO - 
Analyzing OrnamentView.swift:
2024-11-04 13:19:03,052 - INFO - 
Analyzing SelectorViews.swift:
2024-11-04 13:19:03,052 - INFO - 
Analyzing RobotView.swift:
2024-11-04 13:19:03,052 - INFO - 
Analyzing RobotCustomizationView.swift:
2024-11-04 13:19:03,052 - INFO - Found 1 animation examples
2024-11-04 13:19:03,052 - INFO - Animation example:
withAnimation {
2024-11-04 13:19:03,052 - INFO - Context:
                        FaceSelectorView(currentFace: $currentFace)
                    }
                    MaterialSelectView(currentPart: $currentRobotPart,
                                       materialSelection: $partMaterials,
                                       colorSelection: $partColors)
                    
                    MaterialColorSelectView(currentPart: $currentRobotPart,
                                            materialSelection: $partMaterials,
                                            colorSelection: $partColors)
                    
                    LightColorSelectView(currentPart: $currentRobotPart,
                                         lightColorSelection: $partLights)
                }
                .padding(.horizontal)
                .onChange(of: currentRobotPart) {
                    withAnimation {
                        value.scrollTo("topView", anchor: .top)
                    }
                }
            }
        }
        .padding([.top, .leading, .trailing])
    }
}

#Preview(traits: .sampleAppState) {
    RobotCustomizationView()
}


2024-11-04 13:19:03,053 - INFO - 
Analyzing ExplorationView.swift:
2024-11-04 13:19:03,053 - INFO - Found 4 animation examples
2024-11-04 13:19:03,053 - INFO - Animation example:
let updateEvent = content.subscribe(to: SceneEvents.Update.self, { event in
2024-11-04 13:19:03,053 - INFO - Context:
struct ExplorationView: View {
    @Environment(AppState.self) private var appState
    @Environment(\.scenePhase) private var scenePhase
    @Environment(\.openWindow) var openWindow
    
    @State private var cancellables = [EventSubscription]()
    @FocusState var focusable: Bool
    
    #if os(visionOS)
    /// The current viewpoint from which a person using the app is viewing the volume.
    @State private var currentViewpoint: Viewpoint3D = .standard
    #endif
    var body: some View {
        ZStack {
            RealityView { content in
                let updateEvent = content.subscribe(to: SceneEvents.Update.self, { event in
                    let deltaTime = Float(event.deltaTime)
                    appState.robot?.handleMovement(deltaTime: deltaTime)
                })
                let animationStopEvent = content.subscribe(to: AnimationEvents.PlaybackTerminated.self, { event in
                    guard let robot = appState.robot else { return }
                    
                    if robot.plantsFound == appState.totalPlants && !appState.celebrating {
                        for anim in PlantAnimationProvider.shared.currentGrowAnimations.values where anim.isPlaying {
                                return
                        }
                        appState.startCelebration()
                    }
                })
                #if !os(visionOS)
                    if let environment = try? EnvironmentResource(equirectangular: skyImage) {

2024-11-04 13:19:03,053 - INFO - Animation example:
let animationStopEvent = content.subscribe(to: AnimationEvents.PlaybackTerminated.self, { event in
2024-11-04 13:19:03,053 - INFO - Context:
    
    @State private var cancellables = [EventSubscription]()
    @FocusState var focusable: Bool
    
    #if os(visionOS)
    /// The current viewpoint from which a person using the app is viewing the volume.
    @State private var currentViewpoint: Viewpoint3D = .standard
    #endif
    var body: some View {
        ZStack {
            RealityView { content in
                let updateEvent = content.subscribe(to: SceneEvents.Update.self, { event in
                    let deltaTime = Float(event.deltaTime)
                    appState.robot?.handleMovement(deltaTime: deltaTime)
                })
                let animationStopEvent = content.subscribe(to: AnimationEvents.PlaybackTerminated.self, { event in
                    guard let robot = appState.robot else { return }
                    
                    if robot.plantsFound == appState.totalPlants && !appState.celebrating {
                        for anim in PlantAnimationProvider.shared.currentGrowAnimations.values where anim.isPlaying {
                                return
                        }
                        appState.startCelebration()
                    }
                })
                #if !os(visionOS)
                    if let environment = try? EnvironmentResource(equirectangular: skyImage) {
                        content.environment = .skybox(environment)
                    }
                #endif
                cancellables.append(updateEvent)

2024-11-04 13:19:03,053 - INFO - Animation example:
for anim in PlantAnimationProvider.shared.currentGrowAnimations.values where anim.isPlaying {
2024-11-04 13:19:03,053 - INFO - Context:
    #if os(visionOS)
    /// The current viewpoint from which a person using the app is viewing the volume.
    @State private var currentViewpoint: Viewpoint3D = .standard
    #endif
    var body: some View {
        ZStack {
            RealityView { content in
                let updateEvent = content.subscribe(to: SceneEvents.Update.self, { event in
                    let deltaTime = Float(event.deltaTime)
                    appState.robot?.handleMovement(deltaTime: deltaTime)
                })
                let animationStopEvent = content.subscribe(to: AnimationEvents.PlaybackTerminated.self, { event in
                    guard let robot = appState.robot else { return }
                    
                    if robot.plantsFound == appState.totalPlants && !appState.celebrating {
                        for anim in PlantAnimationProvider.shared.currentGrowAnimations.values where anim.isPlaying {
                                return
                        }
                        appState.startCelebration()
                    }
                })
                #if !os(visionOS)
                    if let environment = try? EnvironmentResource(equirectangular: skyImage) {
                        content.environment = .skybox(environment)
                    }
                #endif
                cancellables.append(updateEvent)
                cancellables.append(animationStopEvent)
                if appState.phase == .exploration {
                    content.add(appState.explorationRoot)
                    content.add(appState.explorationCamera)

2024-11-04 13:19:03,053 - INFO - Animation example:
cancellables.append(animationStopEvent)
2024-11-04 13:19:03,053 - INFO - Context:
                    guard let robot = appState.robot else { return }
                    
                    if robot.plantsFound == appState.totalPlants && !appState.celebrating {
                        for anim in PlantAnimationProvider.shared.currentGrowAnimations.values where anim.isPlaying {
                                return
                        }
                        appState.startCelebration()
                    }
                })
                #if !os(visionOS)
                    if let environment = try? EnvironmentResource(equirectangular: skyImage) {
                        content.environment = .skybox(environment)
                    }
                #endif
                cancellables.append(updateEvent)
                cancellables.append(animationStopEvent)
                if appState.phase == .exploration {
                    content.add(appState.explorationRoot)
                    content.add(appState.explorationCamera)
                }
            } update: { updateContent in
                // Reset the idle timer when the robot moves.
                appState.robot?.idleTimer = 0
                #if os(visionOS)
                if appState.robot?.idleViewpoint != currentViewpoint.squareAzimuth {
                    appState.robot?.idleViewpoint = currentViewpoint.squareAzimuth
                    appState.robot?.hasChangedOrientationSinceLastWave = true
                }
                #endif
            }
            .platformTouchControls(appState: appState)

2024-11-04 13:19:03,053 - INFO - 
Analyzing ContentView.swift:
2024-11-04 13:19:03,053 - INFO - 
Found 0 3d_content examples:
2024-11-04 13:19:03,053 - INFO - 
Found 13 animation examples:
2024-11-04 13:19:03,053 - INFO - 
File: AppState.swift
2024-11-04 13:19:03,053 - INFO - 
File: PlantAnimationProvider.swift
2024-11-04 13:19:03,053 - INFO - 
File: AppState+Exploration.swift
2024-11-04 13:19:03,053 - INFO - 
File: EntityExtensions.swift
2024-11-04 13:19:03,053 - INFO - 
File: RobotCharacter+Movement.swift
2024-11-04 13:19:03,053 - INFO - 
File: RobotProvider+Loading.swift
2024-11-04 13:19:03,053 - INFO - 
File: RobotCharacter.swift
2024-11-04 13:19:03,053 - INFO - 
File: AnimationStateMachine.swift
2024-11-04 13:19:03,053 - INFO - 
File: RealityView+TouchControls.swift
2024-11-04 13:19:03,053 - INFO - 
File: EntityExtensions.swift
2024-11-04 13:19:03,053 - INFO - 
File: RealityView+KeyboardControls.swift
2024-11-04 13:19:03,053 - INFO - 
File: RobotCustomizationView.swift
2024-11-04 13:19:03,053 - INFO - 
File: ExplorationView.swift
2024-11-04 13:19:03,053 - INFO - 
Found 2 transforms examples:
2024-11-04 13:19:03,053 - INFO - 
File: AppState+Exploration.swift
2024-11-04 13:19:03,053 - INFO - 
File: EntityExtensions.swift
2024-11-04 13:19:03,053 - INFO - 
Found 0 ui_components examples:
2024-11-04 14:07:33,877 - INFO - Processing documentation page: https://developer.apple.com/documentation/visionos/bot-anist
2024-11-04 14:07:38,031 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/0bc6997cb1f0/BOTAnist.zip
2024-11-04 14:07:38,081 - INFO - Found project: BOT-anist
2024-11-04 14:07:38,082 - INFO - Description: 
2024-11-04 14:07:38,082 - INFO - Requirements: {'visionOS': '2.0+', 'Xcode': '15.0+'}
2024-11-04 14:07:38,082 - INFO - Downloading project...
2024-11-04 14:07:51,037 - INFO - Downloaded project to data/projects/bot-anist
2024-11-04 14:07:51,043 - INFO - Project downloaded to: data/projects/bot-anist
2024-11-04 14:07:51,043 - INFO - Analyzing project...
2024-11-04 14:07:51,049 - INFO - Found 30 Swift files
2024-11-04 14:07:51,049 - INFO - 
Analyzing AppState.swift:
2024-11-04 14:07:51,050 - INFO - Found 3 animation examples
2024-11-04 14:07:51,050 - INFO - Animation example:
_ = PlantAnimationProvider.shared
2024-11-04 14:07:51,050 - INFO - Context:
    /// The orientation of the robot model in the creation screen.
    var robotCreationOrientation: Rotation3D = Rotation3D()
    
    var isRotating = false
    
    /// The camera establishing the rendering perspective for the creation screen `RealityView` for platforms other than visionOS.
    let robotCamera = PerspectiveCamera()
    /// The camera establishing the rendering perspective for the exploration screen `RealityView` for platforms other than visionOS.
    var explorationCamera = PerspectiveCamera()
        
    var totalPlants: Int = 3
    
    init() {
        // Warm up the provider and load the assets
        let provider = RobotProvider.shared
        _ = PlantAnimationProvider.shared
       
        phase = .loadingAssets
        provider.listenForLoadComplete() { provider in
            self.phase = .playing
            self.robotData = RobotData()
            
            #if os(macOS) || os(iOS)
            self.creationRoot.scale = SIMD3<Float>(repeating: 0.027)
            self.creationRoot.position = SIMD3<Float>(x: -0, y: -0.022, z: -0.05)
            #else
            self.creationRoot.scale = SIMD3<Float>(repeating: 0.23)
            self.creationRoot.position = SIMD3<Float>(x: -0.02, y: -0.175, z: -0.05)
            #endif

            RobotPart.allCases.forEach { part in

2024-11-04 14:07:51,050 - INFO - Animation example:
if let celebrateAnim = PlantAnimationProvider.shared.celebrateAnimations[plantComponent.plantType] {
2024-11-04 14:07:51,050 - INFO - Context:
            }
            
            setMaterial(part: part, material: .plastic)
            robotData.lightColor[part] = .white
            robotData.materialColorIndex[part] = 0
            robotData.face = .circle
            updateRobotAppearance()
        }
    }
    
    /// Starts the celebration after the robot finishes propagating all the plants.
    public func startCelebration() {
        celebrating = true
        explorationEnvironment?.forEachDescendant(withComponent: PlantComponent.self) { plantEntity, plantComponent in
            plantEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { blendEntity, blendComponent in
                if let celebrateAnim = PlantAnimationProvider.shared.celebrateAnimations[plantComponent.plantType] {
                    blendEntity.playAnimation(celebrateAnim.repeat())
                }
            }
        }
    }
}


2024-11-04 14:07:51,050 - INFO - Animation example:
blendEntity.playAnimation(celebrateAnim.repeat())
2024-11-04 14:07:51,050 - INFO - Context:
            
            setMaterial(part: part, material: .plastic)
            robotData.lightColor[part] = .white
            robotData.materialColorIndex[part] = 0
            robotData.face = .circle
            updateRobotAppearance()
        }
    }
    
    /// Starts the celebration after the robot finishes propagating all the plants.
    public func startCelebration() {
        celebrating = true
        explorationEnvironment?.forEachDescendant(withComponent: PlantComponent.self) { plantEntity, plantComponent in
            plantEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { blendEntity, blendComponent in
                if let celebrateAnim = PlantAnimationProvider.shared.celebrateAnimations[plantComponent.plantType] {
                    blendEntity.playAnimation(celebrateAnim.repeat())
                }
            }
        }
    }
}


2024-11-04 14:07:51,050 - INFO - 
Analyzing PlantAnimationProvider.swift:
2024-11-04 14:07:51,050 - INFO - Found 26 animation examples
2024-11-04 14:07:51,050 - INFO - Animation example:
Loads and provides access to plant animations.
2024-11-04 14:07:51,050 - INFO - Context:
/*
See the LICENSE.txt file for this sampleâ€™s licensing information.

Abstract:
Loads and provides access to plant animations.
*/

import Foundation
import RealityKit
import BOTanistAssets
import SwiftUI
import Spatial

/// An object that loads and provides all the necessary animations for each plant model.
@MainActor
class PlantAnimationProvider: Sendable {
    static var shared = PlantAnimationProvider()
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()

2024-11-04 14:07:51,050 - INFO - Animation example:
class PlantAnimationProvider: Sendable {
2024-11-04 14:07:51,050 - INFO - Context:
/*
See the LICENSE.txt file for this sampleâ€™s licensing information.

Abstract:
Loads and provides access to plant animations.
*/

import Foundation
import RealityKit
import BOTanistAssets
import SwiftUI
import Spatial

/// An object that loads and provides all the necessary animations for each plant model.
@MainActor
class PlantAnimationProvider: Sendable {
    static var shared = PlantAnimationProvider()
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the celebration animations for each type of plant.
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)

2024-11-04 14:07:51,050 - INFO - Animation example:
static var shared = PlantAnimationProvider()
2024-11-04 14:07:51,050 - INFO - Context:
See the LICENSE.txt file for this sampleâ€™s licensing information.

Abstract:
Loads and provides access to plant animations.
*/

import Foundation
import RealityKit
import BOTanistAssets
import SwiftUI
import Spatial

/// An object that loads and provides all the necessary animations for each plant model.
@MainActor
class PlantAnimationProvider: Sendable {
    static var shared = PlantAnimationProvider()
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the celebration animations for each type of plant.
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)

2024-11-04 14:07:51,050 - INFO - Animation example:
public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
2024-11-04 14:07:51,050 - INFO - Context:
Loads and provides access to plant animations.
*/

import Foundation
import RealityKit
import BOTanistAssets
import SwiftUI
import Spatial

/// An object that loads and provides all the necessary animations for each plant model.
@MainActor
class PlantAnimationProvider: Sendable {
    static var shared = PlantAnimationProvider()
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the celebration animations for each type of plant.
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }

2024-11-04 14:07:51,050 - INFO - Animation example:
public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
2024-11-04 14:07:51,051 - INFO - Context:

import Foundation
import RealityKit
import BOTanistAssets
import SwiftUI
import Spatial

/// An object that loads and provides all the necessary animations for each plant model.
@MainActor
class PlantAnimationProvider: Sendable {
    static var shared = PlantAnimationProvider()
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the celebration animations for each type of plant.
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim

2024-11-04 14:07:51,051 - INFO - Animation example:
public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
2024-11-04 14:07:51,051 - INFO - Context:
import RealityKit
import BOTanistAssets
import SwiftUI
import Spatial

/// An object that loads and provides all the necessary animations for each plant model.
@MainActor
class PlantAnimationProvider: Sendable {
    static var shared = PlantAnimationProvider()
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the celebration animations for each type of plant.
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }

2024-11-04 14:07:51,051 - INFO - Animation example:
await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
2024-11-04 14:07:51,051 - INFO - Context:

/// An object that loads and provides all the necessary animations for each plant model.
@MainActor
class PlantAnimationProvider: Sendable {
    static var shared = PlantAnimationProvider()
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the celebration animations for each type of plant.
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    

2024-11-04 14:07:51,051 - INFO - Animation example:
let growAnim = await self.generateGrowAnimationResource(for: plantType)
2024-11-04 14:07:51,051 - INFO - Context:
class PlantAnimationProvider: Sendable {
    static var shared = PlantAnimationProvider()
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the celebration animations for each type of plant.
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"

2024-11-04 14:07:51,051 - INFO - Animation example:
let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
2024-11-04 14:07:51,051 - INFO - Context:
    static var shared = PlantAnimationProvider()
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the celebration animations for each type of plant.
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil

2024-11-04 14:07:51,051 - INFO - Animation example:
return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
2024-11-04 14:07:51,051 - INFO - Context:
    
    /// A dictionary of the grow animations for each type of plant.
    public var growAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the celebration animations for each type of plant.
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {

2024-11-04 14:07:51,051 - INFO - Animation example:
growAnimations[result.plantType] = result.growAnim
2024-11-04 14:07:51,051 - INFO - Context:
    public var celebrateAnimations = [PlantComponent.PlantTypeKey: AnimationResource]()
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value

2024-11-04 14:07:51,051 - INFO - Animation example:
celebrateAnimations[result.plantType] = result.celebrateAnim
2024-11-04 14:07:51,051 - INFO - Context:
    /// A dictionary of the current animation controllers for each type of plant.
    public var currentGrowAnimations = [PlantComponent.PlantTypeKey: AnimationPlaybackController]()
    
    init() {
        Task { @MainActor in
            await withTaskGroup(of: PlantAnimationResult.self) { taskGroup in
                for plantType in PlantComponent.PlantTypeKey.allCases {
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }

2024-11-04 14:07:51,051 - INFO - Animation example:
private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
2024-11-04 14:07:51,051 - INFO - Context:
                    taskGroup.addTask {
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }

2024-11-04 14:07:51,051 - INFO - Animation example:
let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
2024-11-04 14:07:51,051 - INFO - Context:
                        let growAnim = await self.generateGrowAnimationResource(for: plantType)
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    

2024-11-04 14:07:51,051 - INFO - Animation example:
var ret: AnimationResource? = nil
2024-11-04 14:07:51,051 - INFO - Context:
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    
    /// Loads the celebration animation for the given plant type.

2024-11-04 14:07:51,051 - INFO - Animation example:
if let index = entity.animationLibraryComponent?.animations.startIndex {
2024-11-04 14:07:51,051 - INFO - Context:
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    
    /// Loads the celebration animation for the given plant type.
    private func generateCelebrateAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_celebrate_anim"
        var ret: AnimationResource? = nil
        do {

2024-11-04 14:07:51,051 - INFO - Animation example:
ret = entity.animationLibraryComponent?.animations[index].value
2024-11-04 14:07:51,051 - INFO - Context:
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    
    /// Loads the celebration animation for the given plant type.
    private func generateCelebrateAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_celebrate_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)

2024-11-04 14:07:51,051 - INFO - Animation example:
guard let ret else { fatalError("Animation resource unexpectedly nil.") }
2024-11-04 14:07:51,052 - INFO - Context:
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    
    /// Loads the celebration animation for the given plant type.
    private func generateCelebrateAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_celebrate_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
             rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                 ret = entity.animationLibraryComponent?.defaultAnimation
             }

2024-11-04 14:07:51,052 - INFO - Animation example:
private func generateCelebrateAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
2024-11-04 14:07:51,052 - INFO - Context:
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    
    /// Loads the celebration animation for the given plant type.
    private func generateCelebrateAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_celebrate_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
             rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                 ret = entity.animationLibraryComponent?.defaultAnimation
             }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
}


2024-11-04 14:07:51,052 - INFO - Animation example:
let sceneName = "Assets/plants/animations/\(plantType.rawValue)_celebrate_anim"
2024-11-04 14:07:51,052 - INFO - Context:
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    
    /// Loads the celebration animation for the given plant type.
    private func generateCelebrateAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_celebrate_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
             rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                 ret = entity.animationLibraryComponent?.defaultAnimation
             }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
}

@MainActor

2024-11-04 14:07:51,052 - INFO - Animation example:
var ret: AnimationResource? = nil
2024-11-04 14:07:51,052 - INFO - Context:
                        let celeAnim = await self.generateCelebrateAnimationResource(for: plantType)
                        return PlantAnimationResult(growAnim: growAnim, celebrateAnim: celeAnim, plantType: plantType)
                    }
                }
                for await result in taskGroup {
                    growAnimations[result.plantType] = result.growAnim
                    celebrateAnimations[result.plantType] = result.celebrateAnim
                }
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    
    /// Loads the celebration animation for the given plant type.

2024-11-04 14:07:51,052 - INFO - Animation example:
ret = entity.animationLibraryComponent?.defaultAnimation
2024-11-04 14:07:51,052 - INFO - Context:
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    
    /// Loads the celebration animation for the given plant type.
    private func generateCelebrateAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_celebrate_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
             rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                 ret = entity.animationLibraryComponent?.defaultAnimation
             }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
}

@MainActor
public struct PlantAnimationResult: Sendable {
    var growAnim: AnimationResource
    var celebrateAnim: AnimationResource
    var plantType: PlantComponent.PlantTypeKey
}

2024-11-04 14:07:51,052 - INFO - Animation example:
guard let ret else { fatalError("Animation resource unexpectedly nil.") }
2024-11-04 14:07:51,052 - INFO - Context:
            }
        }
    }
    
    /// Loads the grow animation for the given plant type.
    private func generateGrowAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_grow_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
            rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                if let index = entity.animationLibraryComponent?.animations.startIndex {
                    ret = entity.animationLibraryComponent?.animations[index].value
                }
            }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
    
    /// Loads the celebration animation for the given plant type.
    private func generateCelebrateAnimationResource(for plantType: PlantComponent.PlantTypeKey) async -> AnimationResource {
        let sceneName = "Assets/plants/animations/\(plantType.rawValue)_celebrate_anim"
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
             rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                 ret = entity.animationLibraryComponent?.defaultAnimation
             }

2024-11-04 14:07:51,052 - INFO - Animation example:
public struct PlantAnimationResult: Sendable {
2024-11-04 14:07:51,052 - INFO - Context:
        var ret: AnimationResource? = nil
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
             rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                 ret = entity.animationLibraryComponent?.defaultAnimation
             }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
}

@MainActor
public struct PlantAnimationResult: Sendable {
    var growAnim: AnimationResource
    var celebrateAnim: AnimationResource
    var plantType: PlantComponent.PlantTypeKey
}


2024-11-04 14:07:51,052 - INFO - Animation example:
var growAnim: AnimationResource
2024-11-04 14:07:51,052 - INFO - Context:
        do {
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
             rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                 ret = entity.animationLibraryComponent?.defaultAnimation
             }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
}

@MainActor
public struct PlantAnimationResult: Sendable {
    var growAnim: AnimationResource
    var celebrateAnim: AnimationResource
    var plantType: PlantComponent.PlantTypeKey
}


2024-11-04 14:07:51,052 - INFO - Animation example:
var celebrateAnim: AnimationResource
2024-11-04 14:07:51,053 - INFO - Context:
            let rootEntity = try await Entity(named: sceneName, in: BOTanistAssetsBundle)
             rootEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                 ret = entity.animationLibraryComponent?.defaultAnimation
             }
            guard let ret else { fatalError("Animation resource unexpectedly nil.") }
            return ret
        } catch {
            fatalError("Error: \(error.localizedDescription)")
        }
    }
}

@MainActor
public struct PlantAnimationResult: Sendable {
    var growAnim: AnimationResource
    var celebrateAnim: AnimationResource
    var plantType: PlantComponent.PlantTypeKey
}


2024-11-04 14:07:51,053 - INFO - 
Analyzing AppState+Exploration.swift:
2024-11-04 14:07:51,053 - INFO - Found 3 transform/rotation examples
2024-11-04 14:07:51,053 - INFO - Transform example:
robot?.head.transform.rotation = simd_quatf()
2024-11-04 14:07:51,053 - INFO - Context:
    
    /// Exits the exploration phase of the app and return to the creation view.
    public func exitExploration() {
        if let bodies = RobotProvider.shared.robotParts[.body] {
            for body in bodies {
                body.stopAllAnimations()
            }
        }

        robot?.animationState = .idle
        robot?.head.removeFromParent()
        robot?.body.removeFromParent()
        robot?.backpack.removeFromParent()
        
        robot?.head.transform.translation = .zero
        robot?.head.transform.rotation = simd_quatf()
        robot?.body.transform.translation = .zero
        robot?.body.transform.rotation = simd_quatf()
        robot?.backpack.transform.translation = .zero
        robot?.backpack.transform.rotation = simd_quatf()
       
        if let skeleton = robot?.body.findEntity(named: "rig_grp") {
            skeleton.jointPinComponent = nil
        }
        
        let children = explorationRoot.children
        for child in children {
            child.removeFromParent()
        }
        
        explorationEnvironment = nil

2024-11-04 14:07:51,053 - INFO - Transform example:
robot?.body.transform.rotation = simd_quatf()
2024-11-04 14:07:51,053 - INFO - Context:
    public func exitExploration() {
        if let bodies = RobotProvider.shared.robotParts[.body] {
            for body in bodies {
                body.stopAllAnimations()
            }
        }

        robot?.animationState = .idle
        robot?.head.removeFromParent()
        robot?.body.removeFromParent()
        robot?.backpack.removeFromParent()
        
        robot?.head.transform.translation = .zero
        robot?.head.transform.rotation = simd_quatf()
        robot?.body.transform.translation = .zero
        robot?.body.transform.rotation = simd_quatf()
        robot?.backpack.transform.translation = .zero
        robot?.backpack.transform.rotation = simd_quatf()
       
        if let skeleton = robot?.body.findEntity(named: "rig_grp") {
            skeleton.jointPinComponent = nil
        }
        
        let children = explorationRoot.children
        for child in children {
            child.removeFromParent()
        }
        
        explorationEnvironment = nil
    
        restoreRobotInCreator()

2024-11-04 14:07:51,053 - INFO - Transform example:
robot?.backpack.transform.rotation = simd_quatf()
2024-11-04 14:07:51,053 - INFO - Context:
            for body in bodies {
                body.stopAllAnimations()
            }
        }

        robot?.animationState = .idle
        robot?.head.removeFromParent()
        robot?.body.removeFromParent()
        robot?.backpack.removeFromParent()
        
        robot?.head.transform.translation = .zero
        robot?.head.transform.rotation = simd_quatf()
        robot?.body.transform.translation = .zero
        robot?.body.transform.rotation = simd_quatf()
        robot?.backpack.transform.translation = .zero
        robot?.backpack.transform.rotation = simd_quatf()
       
        if let skeleton = robot?.body.findEntity(named: "rig_grp") {
            skeleton.jointPinComponent = nil
        }
        
        let children = explorationRoot.children
        for child in children {
            child.removeFromParent()
        }
        
        explorationEnvironment = nil
    
        restoreRobotInCreator()
        phase = .playing
    }

2024-11-04 14:07:51,053 - INFO - Found 5 animation examples
2024-11-04 14:07:51,053 - INFO - Animation example:
Extensions to global app state with animation-related functions.
2024-11-04 14:07:51,053 - INFO - Context:
/*
See the LICENSE.txt file for this sampleâ€™s licensing information.

Abstract:
Extensions to global app state with animation-related functions.
*/

import Foundation
import RealityKit
import BOTanistAssets
import SwiftUI
import Spatial

extension AppState {
    
    /// Prepares the app to transition from the creation phase to the exploration phase.
    public func prepareForExploration() {
        do {
            
            // Load the environment entity and set the blendshape weight mapping for each entity with a BlendShapeWeightsComponent.

2024-11-04 14:07:51,053 - INFO - Animation example:
robot?.animationState.transition(to: .idle)
2024-11-04 14:07:51,054 - INFO - Context:
        let cameraTilt = -0.5
        let rotationAngle = Angle2D(radians: cameraTilt)
        let rotation = Rotation3D(angle: rotationAngle, axis: RotationAxis3D.x)
        let startOrientation = Rotation3D()
        let newOrientation = startOrientation.rotated(by: rotation)
        explorationCamera.setOrientation(.init(newOrientation), relativeTo: nil)
        
        explorationRoot.addChild(robot.characterParent)
        explorationRoot.addChild(explorationEnvironment)
        explorationRoot.scale = SIMD3<Float>(repeating: 0.7)
    }
    
    /// Resets the environment so that no plants have been collected and the robot is back in the intial position.
    public func resetExploration() {
        robot?.plantsFound = 0
        robot?.animationState.transition(to: .idle)
        celebrating = false
        explorationRoot.forEachDescendant(withComponent: PlantComponent.self) { entity, component in
            var plantComponent = component
            plantComponent.interactedWith = false
            entity.components.set(plantComponent)
            entity.stopAllAnimations(recursive: true)
        }
        explorationEnvironment!.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
            Task { @MainActor [entity] in
                entity.components[BlendShapeWeightsComponent.self]!.weightSet[0].weights = BlendShapeWeights([0, 1, 0, 0, 0, 0, 0])
            }
        }
        robot?.characterParent.teleportCharacter(to: [0, 0.065, 0], relativeTo: explorationEnvironment)
    }
    

2024-11-04 14:07:51,054 - INFO - Animation example:
entity.stopAllAnimations(recursive: true)
2024-11-04 14:07:51,054 - INFO - Context:
        
        explorationRoot.addChild(robot.characterParent)
        explorationRoot.addChild(explorationEnvironment)
        explorationRoot.scale = SIMD3<Float>(repeating: 0.7)
    }
    
    /// Resets the environment so that no plants have been collected and the robot is back in the intial position.
    public func resetExploration() {
        robot?.plantsFound = 0
        robot?.animationState.transition(to: .idle)
        celebrating = false
        explorationRoot.forEachDescendant(withComponent: PlantComponent.self) { entity, component in
            var plantComponent = component
            plantComponent.interactedWith = false
            entity.components.set(plantComponent)
            entity.stopAllAnimations(recursive: true)
        }
        explorationEnvironment!.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
            Task { @MainActor [entity] in
                entity.components[BlendShapeWeightsComponent.self]!.weightSet[0].weights = BlendShapeWeights([0, 1, 0, 0, 0, 0, 0])
            }
        }
        robot?.characterParent.teleportCharacter(to: [0, 0.065, 0], relativeTo: explorationEnvironment)
    }
    
    /// Exits the exploration phase of the app and return to the creation view.
    public func exitExploration() {
        if let bodies = RobotProvider.shared.robotParts[.body] {
            for body in bodies {
                body.stopAllAnimations()
            }

2024-11-04 14:07:51,055 - INFO - Animation example:
body.stopAllAnimations()
2024-11-04 14:07:51,055 - INFO - Context:
            entity.components.set(plantComponent)
            entity.stopAllAnimations(recursive: true)
        }
        explorationEnvironment!.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
            Task { @MainActor [entity] in
                entity.components[BlendShapeWeightsComponent.self]!.weightSet[0].weights = BlendShapeWeights([0, 1, 0, 0, 0, 0, 0])
            }
        }
        robot?.characterParent.teleportCharacter(to: [0, 0.065, 0], relativeTo: explorationEnvironment)
    }
    
    /// Exits the exploration phase of the app and return to the creation view.
    public func exitExploration() {
        if let bodies = RobotProvider.shared.robotParts[.body] {
            for body in bodies {
                body.stopAllAnimations()
            }
        }

        robot?.animationState = .idle
        robot?.head.removeFromParent()
        robot?.body.removeFromParent()
        robot?.backpack.removeFromParent()
        
        robot?.head.transform.translation = .zero
        robot?.head.transform.rotation = simd_quatf()
        robot?.body.transform.translation = .zero
        robot?.body.transform.rotation = simd_quatf()
        robot?.backpack.transform.translation = .zero
        robot?.backpack.transform.rotation = simd_quatf()
       

2024-11-04 14:07:51,059 - INFO - Animation example:
robot?.animationState = .idle
2024-11-04 14:07:51,059 - INFO - Context:
            Task { @MainActor [entity] in
                entity.components[BlendShapeWeightsComponent.self]!.weightSet[0].weights = BlendShapeWeights([0, 1, 0, 0, 0, 0, 0])
            }
        }
        robot?.characterParent.teleportCharacter(to: [0, 0.065, 0], relativeTo: explorationEnvironment)
    }
    
    /// Exits the exploration phase of the app and return to the creation view.
    public func exitExploration() {
        if let bodies = RobotProvider.shared.robotParts[.body] {
            for body in bodies {
                body.stopAllAnimations()
            }
        }

        robot?.animationState = .idle
        robot?.head.removeFromParent()
        robot?.body.removeFromParent()
        robot?.backpack.removeFromParent()
        
        robot?.head.transform.translation = .zero
        robot?.head.transform.rotation = simd_quatf()
        robot?.body.transform.translation = .zero
        robot?.body.transform.rotation = simd_quatf()
        robot?.backpack.transform.translation = .zero
        robot?.backpack.transform.rotation = simd_quatf()
       
        if let skeleton = robot?.body.findEntity(named: "rig_grp") {
            skeleton.jointPinComponent = nil
        }
        

2024-11-04 14:07:51,060 - INFO - 
Analyzing BOTanistApp.swift:
2024-11-04 14:07:51,060 - INFO - 
Analyzing Package.swift:
2024-11-04 14:07:51,060 - INFO - 
Analyzing BOTanistAssets.swift:
2024-11-04 14:07:51,060 - INFO - 
Analyzing EntityExtensions.swift:
2024-11-04 14:07:51,060 - INFO - Found 3 animation examples
2024-11-04 14:07:51,060 - INFO - Animation example:
var animationLibraryComponent: AnimationLibraryComponent? {
2024-11-04 14:07:51,060 - INFO - Context:
    /// Recursive search of children looking for any descendants with a specific component and calling a closure with them.
    func forEachDescendant<T: Component>(withComponent componentClass: T.Type, _ closure: (Entity, T) -> Void) {
        for child in children {
            if let component = child.components[componentClass] {
                closure(child, component)
            }
            child.forEachDescendant(withComponent: componentClass, closure)
        }
    }
    
    var modelComponent: ModelComponent? {
        get { components[ModelComponent.self] }
        set { components[ModelComponent.self] = newValue }
    }
    
    var animationLibraryComponent: AnimationLibraryComponent? {
        get { components[AnimationLibraryComponent.self] }
        set { components[AnimationLibraryComponent.self] = newValue }
    }
}


2024-11-04 14:07:51,060 - INFO - Animation example:
get { components[AnimationLibraryComponent.self] }
2024-11-04 14:07:51,060 - INFO - Context:
    func forEachDescendant<T: Component>(withComponent componentClass: T.Type, _ closure: (Entity, T) -> Void) {
        for child in children {
            if let component = child.components[componentClass] {
                closure(child, component)
            }
            child.forEachDescendant(withComponent: componentClass, closure)
        }
    }
    
    var modelComponent: ModelComponent? {
        get { components[ModelComponent.self] }
        set { components[ModelComponent.self] = newValue }
    }
    
    var animationLibraryComponent: AnimationLibraryComponent? {
        get { components[AnimationLibraryComponent.self] }
        set { components[AnimationLibraryComponent.self] = newValue }
    }
}


2024-11-04 14:07:51,060 - INFO - Animation example:
set { components[AnimationLibraryComponent.self] = newValue }
2024-11-04 14:07:51,060 - INFO - Context:
        for child in children {
            if let component = child.components[componentClass] {
                closure(child, component)
            }
            child.forEachDescendant(withComponent: componentClass, closure)
        }
    }
    
    var modelComponent: ModelComponent? {
        get { components[ModelComponent.self] }
        set { components[ModelComponent.self] = newValue }
    }
    
    var animationLibraryComponent: AnimationLibraryComponent? {
        get { components[AnimationLibraryComponent.self] }
        set { components[AnimationLibraryComponent.self] = newValue }
    }
}


2024-11-04 14:07:51,060 - INFO - 
Analyzing PlantComponent.swift:
2024-11-04 14:07:51,060 - INFO - 
Analyzing RobotCharacter+Movement.swift:
2024-11-04 14:07:51,060 - INFO - Found 11 animation examples
2024-11-04 14:07:51,060 - INFO - Animation example:
guard ![.celebrate, .wave].contains(animationState) else { return }
2024-11-04 14:07:51,060 - INFO - Context:

Abstract:
A class extension containing movement-related functions.
*/

import BOTanistAssets
import Combine
import Foundation
import RealityKit
import Spatial
import SwiftUI

extension RobotCharacter {
    /// Handles the movement of the robot every time RealityKit updates the scene.
    func handleMovement(deltaTime: Float) {
        guard ![.celebrate, .wave].contains(animationState) else { return }
        if movementVector != .zero {
            handleNonZeroMovement(deltaTime: deltaTime)
        } else {
            handleZeroMovement(deltaTime: deltaTime)
        }
    }
    
    /// Handles the behavior of the robot if its movement vector is non-zero.
    private func handleNonZeroMovement(deltaTime: Float) {
        // If the player is moving the robot, reset the idle timer.
        idleTimer = 0
        
        // Normalizing the movement vector makes sure diagonal movement doesn't have a higher speed
        // than movement in the cardinal directions.
        let normalizedMovement = movementVector / max(100, length(movementVector))

2024-11-04 14:07:51,060 - INFO - Animation example:
if animationState == .walkEnd {
2024-11-04 14:07:51,060 - INFO - Context:
            handleNonZeroMovement(deltaTime: deltaTime)
        } else {
            handleZeroMovement(deltaTime: deltaTime)
        }
    }
    
    /// Handles the behavior of the robot if its movement vector is non-zero.
    private func handleNonZeroMovement(deltaTime: Float) {
        // If the player is moving the robot, reset the idle timer.
        idleTimer = 0
        
        // Normalizing the movement vector makes sure diagonal movement doesn't have a higher speed
        // than movement in the cardinal directions.
        let normalizedMovement = movementVector / max(100, length(movementVector))
        var speed = baseSpeed
        if animationState == .walkEnd {
            speed = 0.001
        }

        // Move the robot in the direction of the movement vector with scaling applied to account for volume size changes.
        // In the event of a collision, check if the collision object is a plant that hasn't been interacted with.
        // If it is a plant, trigger the plant's grow animation.
        characterParent.moveCharacter(by: normalizedMovement * speed * speedScale * deltaTime, deltaTime: deltaTime, relativeTo: nil) { collision in
            if var plantComponent = collision.hitEntity.plantComponent {
                if plantComponent.interactedWith == false {
                    plantComponent.interactedWith = true
                    collision.hitEntity.components.set(plantComponent)
                    self.plantsFound += 1
                    if let growAnimation = PlantAnimationProvider.shared.growAnimations[plantComponent.plantType] {
                        collision.hitEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                            let playbackController = entity.playAnimation(growAnimation)

2024-11-04 14:07:51,060 - INFO - Animation example:
if let growAnimation = PlantAnimationProvider.shared.growAnimations[plantComponent.plantType] {
2024-11-04 14:07:51,060 - INFO - Context:
        let normalizedMovement = movementVector / max(100, length(movementVector))
        var speed = baseSpeed
        if animationState == .walkEnd {
            speed = 0.001
        }

        // Move the robot in the direction of the movement vector with scaling applied to account for volume size changes.
        // In the event of a collision, check if the collision object is a plant that hasn't been interacted with.
        // If it is a plant, trigger the plant's grow animation.
        characterParent.moveCharacter(by: normalizedMovement * speed * speedScale * deltaTime, deltaTime: deltaTime, relativeTo: nil) { collision in
            if var plantComponent = collision.hitEntity.plantComponent {
                if plantComponent.interactedWith == false {
                    plantComponent.interactedWith = true
                    collision.hitEntity.components.set(plantComponent)
                    self.plantsFound += 1
                    if let growAnimation = PlantAnimationProvider.shared.growAnimations[plantComponent.plantType] {
                        collision.hitEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                            let playbackController = entity.playAnimation(growAnimation)
                            PlantAnimationProvider.shared.currentGrowAnimations[plantComponent.plantType] = playbackController
                        }
                    }
                }
            }
            if self.plantsFound == self.appState.totalPlants && self.animationState != .celebrate {
                self.animationState.transition(to: .celebrate)
            }
        }
        // Make sure the robot's facing the direction of the movement.
        characterModel.look(at: characterModel.position(relativeTo: characterParent) - normalizedMovement,
                            from: characterModel.position(relativeTo: characterParent), relativeTo: characterParent)
    }

2024-11-04 14:07:51,060 - INFO - Animation example:
let playbackController = entity.playAnimation(growAnimation)
2024-11-04 14:07:51,060 - INFO - Context:
        if animationState == .walkEnd {
            speed = 0.001
        }

        // Move the robot in the direction of the movement vector with scaling applied to account for volume size changes.
        // In the event of a collision, check if the collision object is a plant that hasn't been interacted with.
        // If it is a plant, trigger the plant's grow animation.
        characterParent.moveCharacter(by: normalizedMovement * speed * speedScale * deltaTime, deltaTime: deltaTime, relativeTo: nil) { collision in
            if var plantComponent = collision.hitEntity.plantComponent {
                if plantComponent.interactedWith == false {
                    plantComponent.interactedWith = true
                    collision.hitEntity.components.set(plantComponent)
                    self.plantsFound += 1
                    if let growAnimation = PlantAnimationProvider.shared.growAnimations[plantComponent.plantType] {
                        collision.hitEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                            let playbackController = entity.playAnimation(growAnimation)
                            PlantAnimationProvider.shared.currentGrowAnimations[plantComponent.plantType] = playbackController
                        }
                    }
                }
            }
            if self.plantsFound == self.appState.totalPlants && self.animationState != .celebrate {
                self.animationState.transition(to: .celebrate)
            }
        }
        // Make sure the robot's facing the direction of the movement.
        characterModel.look(at: characterModel.position(relativeTo: characterParent) - normalizedMovement,
                            from: characterModel.position(relativeTo: characterParent), relativeTo: characterParent)
    }
    
    /// Handles the behavior of the robot if its movement vector is zero.

2024-11-04 14:07:51,060 - INFO - Animation example:
PlantAnimationProvider.shared.currentGrowAnimations[plantComponent.plantType] = playbackController
2024-11-04 14:07:51,060 - INFO - Context:
            speed = 0.001
        }

        // Move the robot in the direction of the movement vector with scaling applied to account for volume size changes.
        // In the event of a collision, check if the collision object is a plant that hasn't been interacted with.
        // If it is a plant, trigger the plant's grow animation.
        characterParent.moveCharacter(by: normalizedMovement * speed * speedScale * deltaTime, deltaTime: deltaTime, relativeTo: nil) { collision in
            if var plantComponent = collision.hitEntity.plantComponent {
                if plantComponent.interactedWith == false {
                    plantComponent.interactedWith = true
                    collision.hitEntity.components.set(plantComponent)
                    self.plantsFound += 1
                    if let growAnimation = PlantAnimationProvider.shared.growAnimations[plantComponent.plantType] {
                        collision.hitEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                            let playbackController = entity.playAnimation(growAnimation)
                            PlantAnimationProvider.shared.currentGrowAnimations[plantComponent.plantType] = playbackController
                        }
                    }
                }
            }
            if self.plantsFound == self.appState.totalPlants && self.animationState != .celebrate {
                self.animationState.transition(to: .celebrate)
            }
        }
        // Make sure the robot's facing the direction of the movement.
        characterModel.look(at: characterModel.position(relativeTo: characterParent) - normalizedMovement,
                            from: characterModel.position(relativeTo: characterParent), relativeTo: characterParent)
    }
    
    /// Handles the behavior of the robot if its movement vector is zero.
    private func handleZeroMovement (deltaTime: Float) {

2024-11-04 14:07:51,061 - INFO - Animation example:
if self.plantsFound == self.appState.totalPlants && self.animationState != .celebrate {
2024-11-04 14:07:51,061 - INFO - Context:
        // If it is a plant, trigger the plant's grow animation.
        characterParent.moveCharacter(by: normalizedMovement * speed * speedScale * deltaTime, deltaTime: deltaTime, relativeTo: nil) { collision in
            if var plantComponent = collision.hitEntity.plantComponent {
                if plantComponent.interactedWith == false {
                    plantComponent.interactedWith = true
                    collision.hitEntity.components.set(plantComponent)
                    self.plantsFound += 1
                    if let growAnimation = PlantAnimationProvider.shared.growAnimations[plantComponent.plantType] {
                        collision.hitEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                            let playbackController = entity.playAnimation(growAnimation)
                            PlantAnimationProvider.shared.currentGrowAnimations[plantComponent.plantType] = playbackController
                        }
                    }
                }
            }
            if self.plantsFound == self.appState.totalPlants && self.animationState != .celebrate {
                self.animationState.transition(to: .celebrate)
            }
        }
        // Make sure the robot's facing the direction of the movement.
        characterModel.look(at: characterModel.position(relativeTo: characterParent) - normalizedMovement,
                            from: characterModel.position(relativeTo: characterParent), relativeTo: characterParent)
    }
    
    /// Handles the behavior of the robot if its movement vector is zero.
    private func handleZeroMovement (deltaTime: Float) {
        idleTimer += deltaTime
        guard idleTimer > idleTimeout && animationState == .idle && !isRotatingToFaceFront else { return }
        
        guard hasChangedOrientationSinceLastWave else {
            return

2024-11-04 14:07:51,061 - INFO - Animation example:
self.animationState.transition(to: .celebrate)
2024-11-04 14:07:51,061 - INFO - Context:
        characterParent.moveCharacter(by: normalizedMovement * speed * speedScale * deltaTime, deltaTime: deltaTime, relativeTo: nil) { collision in
            if var plantComponent = collision.hitEntity.plantComponent {
                if plantComponent.interactedWith == false {
                    plantComponent.interactedWith = true
                    collision.hitEntity.components.set(plantComponent)
                    self.plantsFound += 1
                    if let growAnimation = PlantAnimationProvider.shared.growAnimations[plantComponent.plantType] {
                        collision.hitEntity.forEachDescendant(withComponent: BlendShapeWeightsComponent.self) { entity, component in
                            let playbackController = entity.playAnimation(growAnimation)
                            PlantAnimationProvider.shared.currentGrowAnimations[plantComponent.plantType] = playbackController
                        }
                    }
                }
            }
            if self.plantsFound == self.appState.totalPlants && self.animationState != .celebrate {
                self.animationState.transition(to: .celebrate)
            }
        }
        // Make sure the robot's facing the direction of the movement.
        characterModel.look(at: characterModel.position(relativeTo: characterParent) - normalizedMovement,
                            from: characterModel.position(relativeTo: characterParent), relativeTo: characterParent)
    }
    
    /// Handles the behavior of the robot if its movement vector is zero.
    private func handleZeroMovement (deltaTime: Float) {
        idleTimer += deltaTime
        guard idleTimer > idleTimeout && animationState == .idle && !isRotatingToFaceFront else { return }
        
        guard hasChangedOrientationSinceLastWave else {
            return
        }

2024-11-04 14:07:51,061 - INFO - Animation example:
guard idleTimer > idleTimeout && animationState == .idle && !isRotatingToFaceFront else { return }
2024-11-04 14:07:51,061 - INFO - Context:
                    }
                }
            }
            if self.plantsFound == self.appState.totalPlants && self.animationState != .celebrate {
                self.animationState.transition(to: .celebrate)
            }
        }
        // Make sure the robot's facing the direction of the movement.
        characterModel.look(at: characterModel.position(relativeTo: characterParent) - normalizedMovement,
                            from: characterModel.position(relativeTo: characterParent), relativeTo: characterParent)
    }
    
    /// Handles the behavior of the robot if its movement vector is zero.
    private func handleZeroMovement (deltaTime: Float) {
        idleTimer += deltaTime
        guard idleTimer > idleTimeout && animationState == .idle && !isRotatingToFaceFront else { return }
        
        guard hasChangedOrientationSinceLastWave else {
            return
        }

#if os(visionOS)
        // Generate a rotation animation for the model parent to face the given viewpoint.
        guard let rotateAnimation = characterModel.getRotationAnimation(toFace: self.idleViewpoint,
                                                                        duration: rotationDuration) else { fatalError() }
        hasChangedOrientationSinceLastWave = false
        isRotatingToFaceFront = true
        self.animationState.transition(to: .wave)
        
        Task { @MainActor in
            try? await Task.sleep(for: .seconds(rotationDuration / 2.0))

2024-11-04 14:07:51,061 - INFO - Animation example:
guard let rotateAnimation = characterModel.getRotationAnimation(toFace: self.idleViewpoint,
2024-11-04 14:07:51,061 - INFO - Context:
        characterModel.look(at: characterModel.position(relativeTo: characterParent) - normalizedMovement,
                            from: characterModel.position(relativeTo: characterParent), relativeTo: characterParent)
    }
    
    /// Handles the behavior of the robot if its movement vector is zero.
    private func handleZeroMovement (deltaTime: Float) {
        idleTimer += deltaTime
        guard idleTimer > idleTimeout && animationState == .idle && !isRotatingToFaceFront else { return }
        
        guard hasChangedOrientationSinceLastWave else {
            return
        }

#if os(visionOS)
        // Generate a rotation animation for the model parent to face the given viewpoint.
        guard let rotateAnimation = characterModel.getRotationAnimation(toFace: self.idleViewpoint,
                                                                        duration: rotationDuration) else { fatalError() }
        hasChangedOrientationSinceLastWave = false
        isRotatingToFaceFront = true
        self.animationState.transition(to: .wave)
        
        Task { @MainActor in
            try? await Task.sleep(for: .seconds(rotationDuration / 2.0))
            characterModel.playAnimation(rotateAnimation)
            try? await Task.sleep(for: .seconds(rotationDuration / 2.0))
            let angle = self.idleViewpoint.orientation.angle.radians
            let finalOrientation = simd_quatf(angle: Float(angle), axis: SIMD3<Float>(x: 0, y: 1, z: 0))
            self.characterModel.orientation = finalOrientation
            self.idleTimer = 0
            self.isRotatingToFaceFront = false
        }

2024-11-04 14:07:51,061 - INFO - Animation example:
self.animationState.transition(to: .wave)
2024-11-04 14:07:51,061 - INFO - Context:
    /// Handles the behavior of the robot if its movement vector is zero.
    private func handleZeroMovement (deltaTime: Float) {
        idleTimer += deltaTime
        guard idleTimer > idleTimeout && animationState == .idle && !isRotatingToFaceFront else { return }
        
        guard hasChangedOrientationSinceLastWave else {
            return
        }

#if os(visionOS)
        // Generate a rotation animation for the model parent to face the given viewpoint.
        guard let rotateAnimation = characterModel.getRotationAnimation(toFace: self.idleViewpoint,
                                                                        duration: rotationDuration) else { fatalError() }
        hasChangedOrientationSinceLastWave = false
        isRotatingToFaceFront = true
        self.animationState.transition(to: .wave)
        
        Task { @MainActor in
            try? await Task.sleep(for: .seconds(rotationDuration / 2.0))
            characterModel.playAnimation(rotateAnimation)
            try? await Task.sleep(for: .seconds(rotationDuration / 2.0))
            let angle = self.idleViewpoint.orientation.angle.radians
            let finalOrientation = simd_quatf(angle: Float(angle), axis: SIMD3<Float>(x: 0, y: 1, z: 0))
            self.characterModel.orientation = finalOrientation
            self.idleTimer = 0
            self.isRotatingToFaceFront = false
        }
#endif
    }
}


2024-11-04 14:07:51,061 - INFO - Animation example:
characterModel.playAnimation(rotateAnimation)
2024-11-04 14:07:51,061 - INFO - Context:
        
        guard hasChangedOrientationSinceLastWave else {
            return
        }

#if os(visionOS)
        // Generate a rotation animation for the model parent to face the given viewpoint.
        guard let rotateAnimation = characterModel.getRotationAnimation(toFace: self.idleViewpoint,
                                                                        duration: rotationDuration) else { fatalError() }
        hasChangedOrientationSinceLastWave = false
        isRotatingToFaceFront = true
        self.animationState.transition(to: .wave)
        
        Task { @MainActor in
            try? await Task.sleep(for: .seconds(rotationDuration / 2.0))
            characterModel.playAnimation(rotateAnimation)
            try? await Task.sleep(for: .seconds(rotationDuration / 2.0))
            let angle = self.idleViewpoint.orientation.angle.radians
            let finalOrientation = simd_quatf(angle: Float(angle), axis: SIMD3<Float>(x: 0, y: 1, z: 0))
            self.characterModel.orientation = finalOrientation
            self.idleTimer = 0
            self.isRotatingToFaceFront = false
        }
#endif
    }
}


2024-11-04 14:07:51,061 - INFO - 
Analyzing RobotProvider.swift:
2024-11-04 14:07:51,061 - INFO - 
Analyzing RobotProvider+Loading.swift:
2024-11-04 14:07:51,061 - INFO - Found 7 animation examples
2024-11-04 14:07:51,061 - INFO - Animation example:
var libComponent = AnimationLibraryComponent()
2024-11-04 14:07:51,061 - INFO - Context:
            fatalError("\tEncountered fatal error: \(error.localizedDescription)")
        }
        return materials
    }
    
    /// Loads each robot part asynchronously as a task that this method adds to a provided task group.
    func loadRobotParts(taskGroup: inout TaskGroup<RobotPartLoadResult>) async {
        RobotPart.allCases.forEach { part in
            for (index, sceneName) in part.sceneNames.enumerated() {
                taskGroup.addTask {
                    do {
                        let partName = part.partNames[index]
                        logger.info("Loading scene \(sceneName), part: \(partName) for part type \(part.rawValue)")
                        if let entity = try await self.loadEntityFromRCPro(named: partName, fromSceneNamed: sceneName) {
                            if part == .body {
                                var libComponent = AnimationLibraryComponent()
                                let animationDirectory = "Assets/Robot/animations/\(partName)/"
                                for animationType in AnimationState.allCases {
                                    if let rootEntity = try? await Entity(named: "\(animationDirectory)\(partName)\(animationType.fileSuffix())",
                                                                          in: BOTanistAssetsBundle) {
                                        if let animationEntity = await rootEntity.findEntity(named: "rig_grp") {
                                            if let animationLibraryComponent = await animationEntity.animationLibraryComponent {
                                                libComponent.animations[animationType.rawValue] = animationLibraryComponent.defaultAnimation
                                            }
                                        }
                                    }
                                }
                                await entity.components.set(libComponent)
                            }
                            return RobotPartLoadResult(entity: entity, type: part, index: index)
                        } else {

2024-11-04 14:07:51,061 - INFO - Animation example:
let animationDirectory = "Assets/Robot/animations/\(partName)/"
2024-11-04 14:07:51,062 - INFO - Context:
        }
        return materials
    }
    
    /// Loads each robot part asynchronously as a task that this method adds to a provided task group.
    func loadRobotParts(taskGroup: inout TaskGroup<RobotPartLoadResult>) async {
        RobotPart.allCases.forEach { part in
            for (index, sceneName) in part.sceneNames.enumerated() {
                taskGroup.addTask {
                    do {
                        let partName = part.partNames[index]
                        logger.info("Loading scene \(sceneName), part: \(partName) for part type \(part.rawValue)")
                        if let entity = try await self.loadEntityFromRCPro(named: partName, fromSceneNamed: sceneName) {
                            if part == .body {
                                var libComponent = AnimationLibraryComponent()
                                let animationDirectory = "Assets/Robot/animations/\(partName)/"
                                for animationType in AnimationState.allCases {
                                    if let rootEntity = try? await Entity(named: "\(animationDirectory)\(partName)\(animationType.fileSuffix())",
                                                                          in: BOTanistAssetsBundle) {
                                        if let animationEntity = await rootEntity.findEntity(named: "rig_grp") {
                                            if let animationLibraryComponent = await animationEntity.animationLibraryComponent {
                                                libComponent.animations[animationType.rawValue] = animationLibraryComponent.defaultAnimation
                                            }
                                        }
                                    }
                                }
                                await entity.components.set(libComponent)
                            }
                            return RobotPartLoadResult(entity: entity, type: part, index: index)
                        } else {
                            fatalError("Error loading robot part \(partName) from scene \(sceneName)")

2024-11-04 14:07:51,062 - INFO - Animation example:
for animationType in AnimationState.allCases {
2024-11-04 14:07:51,062 - INFO - Context:
        return materials
    }
    
    /// Loads each robot part asynchronously as a task that this method adds to a provided task group.
    func loadRobotParts(taskGroup: inout TaskGroup<RobotPartLoadResult>) async {
        RobotPart.allCases.forEach { part in
            for (index, sceneName) in part.sceneNames.enumerated() {
                taskGroup.addTask {
                    do {
                        let partName = part.partNames[index]
                        logger.info("Loading scene \(sceneName), part: \(partName) for part type \(part.rawValue)")
                        if let entity = try await self.loadEntityFromRCPro(named: partName, fromSceneNamed: sceneName) {
                            if part == .body {
                                var libComponent = AnimationLibraryComponent()
                                let animationDirectory = "Assets/Robot/animations/\(partName)/"
                                for animationType in AnimationState.allCases {
                                    if let rootEntity = try? await Entity(named: "\(animationDirectory)\(partName)\(animationType.fileSuffix())",
                                                                          in: BOTanistAssetsBundle) {
                                        if let animationEntity = await rootEntity.findEntity(named: "rig_grp") {
                                            if let animationLibraryComponent = await animationEntity.animationLibraryComponent {
                                                libComponent.animations[animationType.rawValue] = animationLibraryComponent.defaultAnimation
                                            }
                                        }
                                    }
                                }
                                await entity.components.set(libComponent)
                            }
                            return RobotPartLoadResult(entity: entity, type: part, index: index)
                        } else {
                            fatalError("Error loading robot part \(partName) from scene \(sceneName)")
                        }

2024-11-04 14:07:51,062 - INFO - Animation example:
if let rootEntity = try? await Entity(named: "\(animationDirectory)\(partName)\(animationType.fileSuffix())",
2024-11-04 14:07:51,062 - INFO - Context:
    }
    
    /// Loads each robot part asynchronously as a task that this method adds to a provided task group.
    func loadRobotParts(taskGroup: inout TaskGroup<RobotPartLoadResult>) async {
        RobotPart.allCases.forEach { part in
            for (index, sceneName) in part.sceneNames.enumerated() {
                taskGroup.addTask {
                    do {
                        let partName = part.partNames[index]
                        logger.info("Loading scene \(sceneName), part: \(partName) for part type \(part.rawValue)")
                        if let entity = try await self.loadEntityFromRCPro(named: partName, fromSceneNamed: sceneName) {
                            if part == .body {
                                var libComponent = AnimationLibraryComponent()
                                let animationDirectory = "Assets/Robot/animations/\(partName)/"
                                for animationType in AnimationState.allCases {
                                    if let rootEntity = try? await Entity(named: "\(animationDirectory)\(partName)\(animationType.fileSuffix())",
                                                                          in: BOTanistAssetsBundle) {
                                        if let animationEntity = await rootEntity.findEntity(named: "rig_grp") {
                                            if let animationLibraryComponent = await animationEntity.animationLibraryComponent {
                                                libComponent.animations[animationType.rawValue] = animationLibraryComponent.defaultAnimation
                                            }
                                        }
                                    }
                                }
                                await entity.components.set(libComponent)
                            }
                            return RobotPartLoadResult(entity: entity, type: part, index: index)
                        } else {
                            fatalError("Error loading robot part \(partName) from scene \(sceneName)")
                        }
                    } catch {

2024-11-04 14:07:51,062 - INFO - Animation example:
if let animationEntity = await rootEntity.findEntity(named: "rig_grp") {
2024-11-04 14:07:51,062 - INFO - Context:
    /// Loads each robot part asynchronously as a task that this method adds to a provided task group.
    func loadRobotParts(taskGroup: inout TaskGroup<RobotPartLoadResult>) async {
        RobotPart.allCases.forEach { part in
            for (index, sceneName) in part.sceneNames.enumerated() {
                taskGroup.addTask {
                    do {
                        let partName = part.partNames[index]
                        logger.info("Loading scene \(sceneName), part: \(partName) for part type \(part.rawValue)")
                        if let entity = try await self.loadEntityFromRCPro(named: partName, fromSceneNamed: sceneName) {
                            if part == .body {
                                var libComponent = AnimationLibraryComponent()
                                let animationDirectory = "Assets/Robot/animations/\(partName)/"
                                for animationType in AnimationState.allCases {
                                    if let rootEntity = try? await Entity(named: "\(animationDirectory)\(partName)\(animationType.fileSuffix())",
                                                                          in: BOTanistAssetsBundle) {
                                        if let animationEntity = await rootEntity.findEntity(named: "rig_grp") {
                                            if let animationLibraryComponent = await animationEntity.animationLibraryComponent {
                                                libComponent.animations[animationType.rawValue] = animationLibraryComponent.defaultAnimation
                                            }
                                        }
                                    }
                                }
                                await entity.components.set(libComponent)
                            }
                            return RobotPartLoadResult(entity: entity, type: part, index: index)
                        } else {
                            fatalError("Error loading robot part \(partName) from scene \(sceneName)")
                        }
                    } catch {
                        fatalError("Error loading scene \(sceneName) for part \(part.rawValue)")
                    }

2024-11-04 14:07:51,062 - INFO - Animation example:
if let animationLibraryComponent = await animationEntity.animationLibraryComponent {
2024-11-04 14:07:51,062 - INFO - Context:
    func loadRobotParts(taskGroup: inout TaskGroup<RobotPartLoadResult>) async {
        RobotPart.allCases.forEach { part in
            for (index, sceneName) in part.sceneNames.enumerated() {
                taskGroup.addTask {
                    do {
                        let partName = part.partNames[index]
                        logger.info("Loading scene \(sceneName), part: \(partName) for part type \(part.rawValue)")
                        if let entity = try await self.loadEntityFromRCPro(named: partName, fromSceneNamed: sceneName) {
                            if part == .body {
                                var libComponent = AnimationLibraryComponent()
                                let animationDirectory = "Assets/Robot/animations/\(partName)/"
                                for animationType in AnimationState.allCases {
                                    if let rootEntity = try? await Entity(named: "\(animationDirectory)\(partName)\(animationType.fileSuffix())",
                                                                          in: BOTanistAssetsBundle) {
                                        if let animationEntity = await rootEntity.findEntity(named: "rig_grp") {
                                            if let animationLibraryComponent = await animationEntity.animationLibraryComponent {
                                                libComponent.animations[animationType.rawValue] = animationLibraryComponent.defaultAnimation
                                            }
                                        }
                                    }
                                }
                                await entity.components.set(libComponent)
                            }
                            return RobotPartLoadResult(entity: entity, type: part, index: index)
                        } else {
                            fatalError("Error loading robot part \(partName) from scene \(sceneName)")
                        }
                    } catch {
                        fatalError("Error loading scene \(sceneName) for part \(part.rawValue)")
                    }
                }

2024-11-04 14:07:51,062 - INFO - Animation example:
libComponent.animations[animationType.rawValue] = animationLibraryComponent.defaultAnimation
2024-11-04 14:07:51,062 - INFO - Context:
        RobotPart.allCases.forEach { part in
            for (index, sceneName) in part.sceneNames.enumerated() {
                taskGroup.addTask {
                    do {
                        let partName = part.partNames[index]
                        logger.info("Loading scene \(sceneName), part: \(partName) for part type \(part.rawValue)")
                        if let entity = try await self.loadEntityFromRCPro(named: partName, fromSceneNamed: sceneName) {
                            if part == .body {
                                var libComponent = AnimationLibraryComponent()
                                let animationDirectory = "Assets/Robot/animations/\(partName)/"
                                for animationType in AnimationState.allCases {
                                    if let rootEntity = try? await Entity(named: "\(animationDirectory)\(partName)\(animationType.fileSuffix())",
                                                                          in: BOTanistAssetsBundle) {
                                        if let animationEntity = await rootEntity.findEntity(named: "rig_grp") {
                                            if let animationLibraryComponent = await animationEntity.animationLibraryComponent {
                                                libComponent.animations[animationType.rawValue] = animationLibraryComponent.defaultAnimation
                                            }
                                        }
                                    }
                                }
                                await entity.components.set(libComponent)
                            }
                            return RobotPartLoadResult(entity: entity, type: part, index: index)
                        } else {
                            fatalError("Error loading robot part \(partName) from scene \(sceneName)")
                        }
                    } catch {
                        fatalError("Error loading scene \(sceneName) for part \(part.rawValue)")
                    }
                }
            }

2024-11-04 14:07:51,063 - INFO - 
Analyzing RobotCharacter.swift:
2024-11-04 14:07:51,063 - INFO - Found 21 animation examples
2024-11-04 14:07:51,063 - INFO - Animation example:
var animationState: AnimationState = .idle
2024-11-04 14:07:51,063 - INFO - Context:
    
    /// The vector that represents the direction of the robot's movement.
    var movementVector: SIMD3<Float> = .zero
    /// A multiplier you use to calculate the movement speed for the robot.
    var baseSpeed: Float = 0.165
    /// A multiplier you use to calculate the movement speed for the robot.
    ///
    /// When a person resizes the volume, this value updates to keep the robot's speed consistent.
    var speedScale: Float = 1
    /// The number of plants the robot has planted.
    var plantsFound: Int = 0
    var collisionCapsuleRadius: Float = 0.2
    var collisionCapsuleHeight: Float = 2
    
    /// The robot's current animation state.
    var animationState: AnimationState = .idle
    var subscriptions = [any Cancellable]()
    var appState: AppState
    
    #if os(visionOS)
    /// The direction the robot turns to face front after the idle timer expires.
    var idleViewpoint: SquareAzimuth = .front
    #endif
    
    /// The amount of idle time before the robot turns to face the direction in the idle Viewpoint.
    let idleTimeout: Float = 2.0
    /// The amount of time the robot has been idle.
    var idleTimer: Float = 0.0
    
    /// A Boolean value that indicates whether the robot is rotating.
    var isRotatingToFaceFront = false

2024-11-04 14:07:51,063 - INFO - Animation example:
var animationControllers = [AnimationState: AnimationPlaybackController]()
2024-11-04 14:07:51,063 - INFO - Context:
    /// The amount of idle time before the robot turns to face the direction in the idle Viewpoint.
    let idleTimeout: Float = 2.0
    /// The amount of time the robot has been idle.
    var idleTimer: Float = 0.0
    
    /// A Boolean value that indicates whether the robot is rotating.
    var isRotatingToFaceFront = false
    /// A Boolean value that indicates whether the person using the app has changed the orientation they're viewing the volume from.
    var hasChangedOrientationSinceLastWave = false
    
    /// The scale factor of the 3D models that comprise the robot.
    private var modelScale: Float = 0.065

    let rotationDuration = 0.5
    
    var animationControllers = [AnimationState: AnimationPlaybackController]()
    
    init(head: Entity, body: Entity, backpack: Entity, appState: AppState, headOffset: SIMD3<Float>? = nil, backpackOffset: SIMD3<Float>? = nil) {
        self.head = head
        self.body = body
        self.backpack = backpack
        self.appState = appState
        
        self.body.removeFromParent()
        self.head.removeFromParent()
        self.backpack.removeFromParent()
        
        guard let skeleton = body.findEntity(named: "rig_grp") as? ModelEntity else {
            fatalError("Didn't find expected rig_grp entity as descendent of rigged body.")
        }
        

2024-11-04 14:07:51,079 - INFO - Animation example:
animationState.registerHandler { @MainActor state in
2024-11-04 14:07:51,079 - INFO - Context:
                                                            backpackOffset: Transform(translation: backpackOffset).matrix,
                                                            bodyEntity: self.body)
        
        characterParent.components.set(CharacterControllerComponent(radius: collisionCapsuleRadius,
                                                                    height: collisionCapsuleHeight,
                                                                    slopeLimit: 0,
                                                                    stepLimit: 0))
        characterParent.setPosition([0, collisionCapsuleHeight / 2 * modelScale, 0], relativeTo: nil)
        characterModel.addChild(self.head)
        characterModel.addChild(self.body)
        characterModel.addChild(self.backpack)
        characterParent.addChild(characterModel)
        characterModel.setPosition([0, -collisionCapsuleHeight / 2, 0], relativeTo: characterParent)
        
        characterParent.scale = SIMD3<Float>(repeating: modelScale)
        animationState.registerHandler { @MainActor state in
            self.playAnimation(state)
        }
    }
    
    /// Plays the robot animation for the given animation state.
    func playAnimation(_ animState: AnimationState) {
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)

2024-11-04 14:07:51,079 - INFO - Animation example:
self.playAnimation(state)
2024-11-04 14:07:51,079 - INFO - Context:
                                                            bodyEntity: self.body)
        
        characterParent.components.set(CharacterControllerComponent(radius: collisionCapsuleRadius,
                                                                    height: collisionCapsuleHeight,
                                                                    slopeLimit: 0,
                                                                    stepLimit: 0))
        characterParent.setPosition([0, collisionCapsuleHeight / 2 * modelScale, 0], relativeTo: nil)
        characterModel.addChild(self.head)
        characterModel.addChild(self.body)
        characterModel.addChild(self.backpack)
        characterParent.addChild(characterModel)
        characterModel.setPosition([0, -collisionCapsuleHeight / 2, 0], relativeTo: characterParent)
        
        characterParent.scale = SIMD3<Float>(repeating: modelScale)
        animationState.registerHandler { @MainActor state in
            self.playAnimation(state)
        }
    }
    
    /// Plays the robot animation for the given animation state.
    func playAnimation(_ animState: AnimationState) {
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback

2024-11-04 14:07:51,079 - INFO - Animation example:
func playAnimation(_ animState: AnimationState) {
2024-11-04 14:07:51,079 - INFO - Context:
                                                                    stepLimit: 0))
        characterParent.setPosition([0, collisionCapsuleHeight / 2 * modelScale, 0], relativeTo: nil)
        characterModel.addChild(self.head)
        characterModel.addChild(self.body)
        characterModel.addChild(self.backpack)
        characterParent.addChild(characterModel)
        characterModel.setPosition([0, -collisionCapsuleHeight / 2, 0], relativeTo: characterParent)
        
        characterParent.scale = SIMD3<Float>(repeating: modelScale)
        animationState.registerHandler { @MainActor state in
            self.playAnimation(state)
        }
    }
    
    /// Plays the robot animation for the given animation state.
    func playAnimation(_ animState: AnimationState) {
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                

2024-11-04 14:07:51,079 - INFO - Animation example:
guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
2024-11-04 14:07:51,079 - INFO - Context:
        characterParent.setPosition([0, collisionCapsuleHeight / 2 * modelScale, 0], relativeTo: nil)
        characterModel.addChild(self.head)
        characterModel.addChild(self.body)
        characterModel.addChild(self.backpack)
        characterParent.addChild(characterModel)
        characterModel.setPosition([0, -collisionCapsuleHeight / 2, 0], relativeTo: characterParent)
        
        characterParent.scale = SIMD3<Float>(repeating: modelScale)
        animationState.registerHandler { @MainActor state in
            self.playAnimation(state)
        }
    }
    
    /// Plays the robot animation for the given animation state.
    func playAnimation(_ animState: AnimationState) {
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)

2024-11-04 14:07:51,079 - INFO - Animation example:
fatalError("Didn't find requested animation in library.")
2024-11-04 14:07:51,080 - INFO - Context:
        characterModel.addChild(self.head)
        characterModel.addChild(self.body)
        characterModel.addChild(self.backpack)
        characterParent.addChild(characterModel)
        characterModel.setPosition([0, -collisionCapsuleHeight / 2, 0], relativeTo: characterParent)
        
        characterParent.scale = SIMD3<Float>(repeating: modelScale)
        animationState.registerHandler { @MainActor state in
            self.playAnimation(state)
        }
    }
    
    /// Plays the robot animation for the given animation state.
    func playAnimation(_ animState: AnimationState) {
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in

2024-11-04 14:07:51,080 - INFO - Animation example:
let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
2024-11-04 14:07:51,080 - INFO - Context:
        animationState.registerHandler { @MainActor state in
            self.playAnimation(state)
        }
    }
    
    /// Plays the robot animation for the given animation state.
    func playAnimation(_ animState: AnimationState) {
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in
                        guard let self = self else { fatalError("Could not get reference to 'self' in closure.") }
                        let nextState = self.animationState.nextState
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0

2024-11-04 14:07:51,080 - INFO - Animation example:
animationControllers[animState] = playback
2024-11-04 14:07:51,080 - INFO - Context:
            self.playAnimation(state)
        }
    }
    
    /// Plays the robot animation for the given animation state.
    func playAnimation(_ animState: AnimationState) {
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in
                        guard let self = self else { fatalError("Could not get reference to 'self' in closure.") }
                        let nextState = self.animationState.nextState
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }

2024-11-04 14:07:51,080 - INFO - Animation example:
let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
2024-11-04 14:07:51,080 - INFO - Context:
    
    /// Plays the robot animation for the given animation state.
    func playAnimation(_ animState: AnimationState) {
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in
                        guard let self = self else { fatalError("Could not get reference to 'self' in closure.") }
                        let nextState = self.animationState.nextState
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {

2024-11-04 14:07:51,080 - INFO - Animation example:
animationControllers[animState] = playback
2024-11-04 14:07:51,080 - INFO - Context:
            self.playAnimation(state)
        }
    }
    
    /// Plays the robot animation for the given animation state.
    func playAnimation(_ animState: AnimationState) {
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in
                        guard let self = self else { fatalError("Could not get reference to 'self' in closure.") }
                        let nextState = self.animationState.nextState
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }

2024-11-04 14:07:51,080 - INFO - Animation example:
let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
2024-11-04 14:07:51,080 - INFO - Context:
        guard let anim = body.animationLibraryComponent?.animations[animState.rawValue] else {
            fatalError("Didn't find requested animation in library.")
        }
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in
                        guard let self = self else { fatalError("Could not get reference to 'self' in closure.") }
                        let nextState = self.animationState.nextState
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }

2024-11-04 14:07:51,080 - INFO - Animation example:
let nextState = self.animationState.nextState
2024-11-04 14:07:51,080 - INFO - Context:
        if let rigGroup = body.findEntity(named: "rig_grp") {
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in
                        guard let self = self else { fatalError("Could not get reference to 'self' in closure.") }
                        let nextState = self.animationState.nextState
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }
        }
    }
    

2024-11-04 14:07:51,080 - INFO - Animation example:
if self.animationState != self.animationState.nextState {
2024-11-04 14:07:51,080 - INFO - Context:
            switch animState.loopingBehavior {
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in
                        guard let self = self else { fatalError("Could not get reference to 'self' in closure.") }
                        let nextState = self.animationState.nextState
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }
        }
    }
    
    func stopAllAnimations() {

2024-11-04 14:07:51,080 - INFO - Animation example:
self.animationState.transition(to: nextState)
2024-11-04 14:07:51,080 - INFO - Context:
            case .infinite:
                // Pause automatic state transitions while rotating to face front.
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in
                        guard let self = self else { fatalError("Could not get reference to 'self' in closure.") }
                        let nextState = self.animationState.nextState
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }
        }
    }
    
    func stopAllAnimations() {
        for animState in AnimationState.allCases {

2024-11-04 14:07:51,080 - INFO - Animation example:
if self.animationState != .idle {
2024-11-04 14:07:51,080 - INFO - Context:
                if !isRotatingToFaceFront {
                    let playback = rigGroup.playAnimation(anim.repeat(), separateAnimatedValue: true, startsPaused: false)
                    animationControllers[animState] = playback
                }
            case .finite(let times):
                let playback = rigGroup.playAnimation(anim.repeat(count: times), separateAnimatedValue: true, startsPaused: false)
                animationControllers[animState] = playback
                
                let entitySubscription = rigGroup.scene?.publisher(for: AnimationEvents.PlaybackCompleted.self, on: rigGroup)
                    .sink { [weak self] _ in
                        guard let self = self else { fatalError("Could not get reference to 'self' in closure.") }
                        let nextState = self.animationState.nextState
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }
        }
    }
    
    func stopAllAnimations() {
        for animState in AnimationState.allCases {
            let controller = animationControllers[animState]
            controller?.stop()

2024-11-04 14:07:51,080 - INFO - Animation example:
func stopAllAnimations() {
2024-11-04 14:07:51,080 - INFO - Context:
                        if self.animationState != self.animationState.nextState {
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }
        }
    }
    
    func stopAllAnimations() {
        for animState in AnimationState.allCases {
            let controller = animationControllers[animState]
            controller?.stop()
            animationControllers[animState] = nil
        }
        body.stopAllAnimations(recursive: true)
    }
    
    private func getJointHierarchy(_ skeleton: ModelEntity, for jointName: String) -> [Int] {
        guard let jointIndex = skeleton.getJointIndex(suffix: jointName) else { fatalError("Unable to retrieve joint named \(jointName).") }
        let jointNames = skeleton.jointNames
        let jointPath = jointNames[jointIndex]
        var components = jointPath.components(separatedBy: "/")
        var indices: [Int] = []
        while !components.isEmpty {

2024-11-04 14:07:51,080 - INFO - Animation example:
for animState in AnimationState.allCases {
2024-11-04 14:07:51,080 - INFO - Context:
                            self.animationState.transition(to: nextState)
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }
        }
    }
    
    func stopAllAnimations() {
        for animState in AnimationState.allCases {
            let controller = animationControllers[animState]
            controller?.stop()
            animationControllers[animState] = nil
        }
        body.stopAllAnimations(recursive: true)
    }
    
    private func getJointHierarchy(_ skeleton: ModelEntity, for jointName: String) -> [Int] {
        guard let jointIndex = skeleton.getJointIndex(suffix: jointName) else { fatalError("Unable to retrieve joint named \(jointName).") }
        let jointNames = skeleton.jointNames
        let jointPath = jointNames[jointIndex]
        var components = jointPath.components(separatedBy: "/")
        var indices: [Int] = []
        while !components.isEmpty {
            let path = components.joined(separator: "/")

2024-11-04 14:07:51,080 - INFO - Animation example:
let controller = animationControllers[animState]
2024-11-04 14:07:51,080 - INFO - Context:
                        } else {
                            if self.animationState != .idle {
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }
        }
    }
    
    func stopAllAnimations() {
        for animState in AnimationState.allCases {
            let controller = animationControllers[animState]
            controller?.stop()
            animationControllers[animState] = nil
        }
        body.stopAllAnimations(recursive: true)
    }
    
    private func getJointHierarchy(_ skeleton: ModelEntity, for jointName: String) -> [Int] {
        guard let jointIndex = skeleton.getJointIndex(suffix: jointName) else { fatalError("Unable to retrieve joint named \(jointName).") }
        let jointNames = skeleton.jointNames
        let jointPath = jointNames[jointIndex]
        var components = jointPath.components(separatedBy: "/")
        var indices: [Int] = []
        while !components.isEmpty {
            let path = components.joined(separator: "/")
            indices.append(jointNames.firstIndex(of: path)!)

2024-11-04 14:07:51,080 - INFO - Animation example:
animationControllers[animState] = nil
2024-11-04 14:07:51,080 - INFO - Context:
                                self.idleTimer = 0
                            }
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }
        }
    }
    
    func stopAllAnimations() {
        for animState in AnimationState.allCases {
            let controller = animationControllers[animState]
            controller?.stop()
            animationControllers[animState] = nil
        }
        body.stopAllAnimations(recursive: true)
    }
    
    private func getJointHierarchy(_ skeleton: ModelEntity, for jointName: String) -> [Int] {
        guard let jointIndex = skeleton.getJointIndex(suffix: jointName) else { fatalError("Unable to retrieve joint named \(jointName).") }
        let jointNames = skeleton.jointNames
        let jointPath = jointNames[jointIndex]
        var components = jointPath.components(separatedBy: "/")
        var indices: [Int] = []
        while !components.isEmpty {
            let path = components.joined(separator: "/")
            indices.append(jointNames.firstIndex(of: path)!)
            components.removeLast()
        }

2024-11-04 14:07:51,081 - INFO - Animation example:
body.stopAllAnimations(recursive: true)
2024-11-04 14:07:51,081 - INFO - Context:
                        }
                    }
                if let subscription = entitySubscription {
                    subscriptions.append(subscription)
                }
            }
        }
    }
    
    func stopAllAnimations() {
        for animState in AnimationState.allCases {
            let controller = animationControllers[animState]
            controller?.stop()
            animationControllers[animState] = nil
        }
        body.stopAllAnimations(recursive: true)
    }
    
    private func getJointHierarchy(_ skeleton: ModelEntity, for jointName: String) -> [Int] {
        guard let jointIndex = skeleton.getJointIndex(suffix: jointName) else { fatalError("Unable to retrieve joint named \(jointName).") }
        let jointNames = skeleton.jointNames
        let jointPath = jointNames[jointIndex]
        var components = jointPath.components(separatedBy: "/")
        var indices: [Int] = []
        while !components.isEmpty {
            let path = components.joined(separator: "/")
            indices.append(jointNames.firstIndex(of: path)!)
            components.removeLast()
        }
        
        var boneList = [String]()

2024-11-04 14:07:51,081 - INFO - 
Analyzing RobotData.swift:
2024-11-04 14:07:51,081 - INFO - 
Analyzing AnimationStateMachine.swift:
2024-11-04 14:07:51,081 - INFO - Found 14 animation examples
2024-11-04 14:07:51,081 - INFO - Animation example:
A state machine that tracks the robot's animations.
2024-11-04 14:07:51,081 - INFO - Context:
/*
See the LICENSE.txt file for this sampleâ€™s licensing information.

Abstract:
A state machine that tracks the robot's animations.
*/

import Foundation
import RealityKit

typealias AnimationStateMachineHandler = (AnimationState) -> Void

/// An enumeration that represents a state machine that tracks the current animation state of the robot.
public enum AnimationState: String, Codable, Sendable, Equatable, CaseIterable {
    case idle
    case walkLoop
    case walkEnd
    case plant
    case celebrate
    case wave

2024-11-04 14:07:51,081 - INFO - Animation example:
typealias AnimationStateMachineHandler = (AnimationState) -> Void
2024-11-04 14:07:51,081 - INFO - Context:
/*
See the LICENSE.txt file for this sampleâ€™s licensing information.

Abstract:
A state machine that tracks the robot's animations.
*/

import Foundation
import RealityKit

typealias AnimationStateMachineHandler = (AnimationState) -> Void

/// An enumeration that represents a state machine that tracks the current animation state of the robot.
public enum AnimationState: String, Codable, Sendable, Equatable, CaseIterable {
    case idle
    case walkLoop
    case walkEnd
    case plant
    case celebrate
    case wave
    
    public enum AnimationLoopingBehavior {
        case infinite
        case finite (times: Int)
    }
    

2024-11-04 14:07:51,081 - INFO - Animation example:
public enum AnimationState: String, Codable, Sendable, Equatable, CaseIterable {
2024-11-04 14:07:51,081 - INFO - Context:
/*
See the LICENSE.txt file for this sampleâ€™s licensing information.

Abstract:
A state machine that tracks the robot's animations.
*/

import Foundation
import RealityKit

typealias AnimationStateMachineHandler = (AnimationState) -> Void

/// An enumeration that represents a state machine that tracks the current animation state of the robot.
public enum AnimationState: String, Codable, Sendable, Equatable, CaseIterable {
    case idle
    case walkLoop
    case walkEnd
    case plant
    case celebrate
    case wave
    
    public enum AnimationLoopingBehavior {
        case infinite
        case finite (times: Int)
    }
    
    @MainActor static var handlers = [AnimationStateMachineHandler]()
    
    /// Returns an array containing all valid state transitions from the current state.

2024-11-04 14:07:51,081 - INFO - Animation example:
public enum AnimationLoopingBehavior {
2024-11-04 14:07:51,081 - INFO - Context:

import Foundation
import RealityKit

typealias AnimationStateMachineHandler = (AnimationState) -> Void

/// An enumeration that represents a state machine that tracks the current animation state of the robot.
public enum AnimationState: String, Codable, Sendable, Equatable, CaseIterable {
    case idle
    case walkLoop
    case walkEnd
    case plant
    case celebrate
    case wave
    
    public enum AnimationLoopingBehavior {
        case infinite
        case finite (times: Int)
    }
    
    @MainActor static var handlers = [AnimationStateMachineHandler]()
    
    /// Returns an array containing all valid state transitions from the current state.
    var validNextStates: [AnimationState] {
        switch self {
            case .idle:
                return [.walkLoop, .plant, .celebrate, .wave]
            case .walkLoop:
                return [.walkEnd, .celebrate]
            case .walkEnd, .plant:
                return [.idle, .celebrate, .wave, .walkLoop]

2024-11-04 14:07:51,081 - INFO - Animation example:
@MainActor static var handlers = [AnimationStateMachineHandler]()
2024-11-04 14:07:51,081 - INFO - Context:

/// An enumeration that represents a state machine that tracks the current animation state of the robot.
public enum AnimationState: String, Codable, Sendable, Equatable, CaseIterable {
    case idle
    case walkLoop
    case walkEnd
    case plant
    case celebrate
    case wave
    
    public enum AnimationLoopingBehavior {
        case infinite
        case finite (times: Int)
    }
    
    @MainActor static var handlers = [AnimationStateMachineHandler]()
    
    /// Returns an array containing all valid state transitions from the current state.
    var validNextStates: [AnimationState] {
        switch self {
            case .idle:
                return [.walkLoop, .plant, .celebrate, .wave]
            case .walkLoop:
                return [.walkEnd, .celebrate]
            case .walkEnd, .plant:
                return [.idle, .celebrate, .wave, .walkLoop]
            case .celebrate, .wave:
                return [.idle]
        }
    }
    

2024-11-04 14:07:51,081 - INFO - Animation example:
var validNextStates: [AnimationState] {
2024-11-04 14:07:51,081 - INFO - Context:
    case idle
    case walkLoop
    case walkEnd
    case plant
    case celebrate
    case wave
    
    public enum AnimationLoopingBehavior {
        case infinite
        case finite (times: Int)
    }
    
    @MainActor static var handlers = [AnimationStateMachineHandler]()
    
    /// Returns an array containing all valid state transitions from the current state.
    var validNextStates: [AnimationState] {
        switch self {
            case .idle:
                return [.walkLoop, .plant, .celebrate, .wave]
            case .walkLoop:
                return [.walkEnd, .celebrate]
            case .walkEnd, .plant:
                return [.idle, .celebrate, .wave, .walkLoop]
            case .celebrate, .wave:
                return [.idle]
        }
    }
    
    @MainActor
    func registerHandler(_ handler: @escaping AnimationStateMachineHandler) {
        AnimationState.handlers.append(handler)

2024-11-04 14:07:51,081 - INFO - Animation example:
func registerHandler(_ handler: @escaping AnimationStateMachineHandler) {
2024-11-04 14:07:51,081 - INFO - Context:
    /// Returns an array containing all valid state transitions from the current state.
    var validNextStates: [AnimationState] {
        switch self {
            case .idle:
                return [.walkLoop, .plant, .celebrate, .wave]
            case .walkLoop:
                return [.walkEnd, .celebrate]
            case .walkEnd, .plant:
                return [.idle, .celebrate, .wave, .walkLoop]
            case .celebrate, .wave:
                return [.idle]
        }
    }
    
    @MainActor
    func registerHandler(_ handler: @escaping AnimationStateMachineHandler) {
        AnimationState.handlers.append(handler)
        // Call the handler for the current state, since it doesn't exist during the transition.
        handler(self)
    }
   
    /// The looping behavior of the animation state.
    var loopingBehavior: AnimationLoopingBehavior {
        if [.idle, .walkLoop, .celebrate].contains(self) {
            return .infinite
        } else {
            return .finite(times: 1)
        }
    }
    
    var nextState: AnimationState {

2024-11-04 14:07:51,081 - INFO - Animation example:
AnimationState.handlers.append(handler)
2024-11-04 14:07:51,081 - INFO - Context:
    var validNextStates: [AnimationState] {
        switch self {
            case .idle:
                return [.walkLoop, .plant, .celebrate, .wave]
            case .walkLoop:
                return [.walkEnd, .celebrate]
            case .walkEnd, .plant:
                return [.idle, .celebrate, .wave, .walkLoop]
            case .celebrate, .wave:
                return [.idle]
        }
    }
    
    @MainActor
    func registerHandler(_ handler: @escaping AnimationStateMachineHandler) {
        AnimationState.handlers.append(handler)
        // Call the handler for the current state, since it doesn't exist during the transition.
        handler(self)
    }
   
    /// The looping behavior of the animation state.
    var loopingBehavior: AnimationLoopingBehavior {
        if [.idle, .walkLoop, .celebrate].contains(self) {
            return .infinite
        } else {
            return .finite(times: 1)
        }
    }
    
    var nextState: AnimationState {
        switch self {

2024-11-04 14:07:51,081 - INFO - Animation example:
var loopingBehavior: AnimationLoopingBehavior {
2024-11-04 14:07:51,081 - INFO - Context:
            case .walkEnd, .plant:
                return [.idle, .celebrate, .wave, .walkLoop]
            case .celebrate, .wave:
                return [.idle]
        }
    }
    
    @MainActor
    func registerHandler(_ handler: @escaping AnimationStateMachineHandler) {
        AnimationState.handlers.append(handler)
        // Call the handler for the current state, since it doesn't exist during the transition.
        handler(self)
    }
   
    /// The looping behavior of the animation state.
    var loopingBehavior: AnimationLoopingBehavior {
        if [.idle, .walkLoop, .celebrate].contains(self) {
            return .infinite
        } else {
            return .finite(times: 1)
        }
    }
    
    var nextState: AnimationState {
        switch self {
        case .walkEnd, .celebrate, .plant, .wave:
                return .idle
            default:
                return self
        }
    }

2024-11-04 14:07:51,081 - INFO - Animation example:
var nextState: AnimationState {
2024-11-04 14:07:51,081 - INFO - Context:
    func registerHandler(_ handler: @escaping AnimationStateMachineHandler) {
        AnimationState.handlers.append(handler)
        // Call the handler for the current state, since it doesn't exist during the transition.
        handler(self)
    }
   
    /// The looping behavior of the animation state.
    var loopingBehavior: AnimationLoopingBehavior {
        if [.idle, .walkLoop, .celebrate].contains(self) {
            return .infinite
        } else {
            return .finite(times: 1)
        }
    }
    
    var nextState: AnimationState {
        switch self {
        case .walkEnd, .celebrate, .plant, .wave:
                return .idle
            default:
                return self
        }
    }
    
    func fileSuffix() -> String {
        return "_\(self.rawValue)_anim"
    }
    
    @MainActor
    mutating func reset() {
        self = .idle

2024-11-04 14:07:51,081 - INFO - Animation example:
for handler in AnimationState.handlers {
2024-11-04 14:07:51,082 - INFO - Context:
        switch self {
        case .walkEnd, .celebrate, .plant, .wave:
                return .idle
            default:
                return self
        }
    }
    
    func fileSuffix() -> String {
        return "_\(self.rawValue)_anim"
    }
    
    @MainActor
    mutating func reset() {
        self = .idle
        for handler in AnimationState.handlers {
            handler(self)
        }
    }
    
    func isValidNextState(_ state: AnimationState) -> Bool {
        return validNextStates.contains(state)
    }
    
    /// Requests a state transition.
    @MainActor
    @discardableResult
    mutating public func transition(to newState: AnimationState) -> Bool {
        let oldValue = self.rawValue
        logger.info("Attempting to change state from \(oldValue) to \(newState.rawValue)")
        guard self != newState else {

2024-11-04 14:07:51,082 - INFO - Animation example:
func isValidNextState(_ state: AnimationState) -> Bool {
2024-11-04 14:07:51,082 - INFO - Context:
        }
    }
    
    func fileSuffix() -> String {
        return "_\(self.rawValue)_anim"
    }
    
    @MainActor
    mutating func reset() {
        self = .idle
        for handler in AnimationState.handlers {
            handler(self)
        }
    }
    
    func isValidNextState(_ state: AnimationState) -> Bool {
        return validNextStates.contains(state)
    }
    
    /// Requests a state transition.
    @MainActor
    @discardableResult
    mutating public func transition(to newState: AnimationState) -> Bool {
        let oldValue = self.rawValue
        logger.info("Attempting to change state from \(oldValue) to \(newState.rawValue)")
        guard self != newState else {
            logger.debug("Attempting to change phase to \(newState.rawValue) but already in that state. Treating as a no-op.")
            return false
        }
        guard isValidNextState(newState) else {
            logger.error("Requested transition from \(oldValue) to \(newState.rawValue), but that's not a valid transition.")

2024-11-04 14:07:51,082 - INFO - Animation example:
mutating public func transition(to newState: AnimationState) -> Bool {
2024-11-04 14:07:51,082 - INFO - Context:
    @MainActor
    mutating func reset() {
        self = .idle
        for handler in AnimationState.handlers {
            handler(self)
        }
    }
    
    func isValidNextState(_ state: AnimationState) -> Bool {
        return validNextStates.contains(state)
    }
    
    /// Requests a state transition.
    @MainActor
    @discardableResult
    mutating public func transition(to newState: AnimationState) -> Bool {
        let oldValue = self.rawValue
        logger.info("Attempting to change state from \(oldValue) to \(newState.rawValue)")
        guard self != newState else {
            logger.debug("Attempting to change phase to \(newState.rawValue) but already in that state. Treating as a no-op.")
            return false
        }
        guard isValidNextState(newState) else {
            logger.error("Requested transition from \(oldValue) to \(newState.rawValue), but that's not a valid transition.")
            return false
        }
        self = newState
        for handler in AnimationState.handlers {
            handler(self)
        }
        return true

2024-11-04 14:07:51,082 - INFO - Animation example:
for handler in AnimationState.handlers {
2024-11-04 14:07:51,082 - INFO - Context:
        switch self {
        case .walkEnd, .celebrate, .plant, .wave:
                return .idle
            default:
                return self
        }
    }
    
    func fileSuffix() -> String {
        return "_\(self.rawValue)_anim"
    }
    
    @MainActor
    mutating func reset() {
        self = .idle
        for handler in AnimationState.handlers {
            handler(self)
        }
    }
    
    func isValidNextState(_ state: AnimationState) -> Bool {
        return validNextStates.contains(state)
    }
    
    /// Requests a state transition.
    @MainActor
    @discardableResult
    mutating public func transition(to newState: AnimationState) -> Bool {
        let oldValue = self.rawValue
        logger.info("Attempting to change state from \(oldValue) to \(newState.rawValue)")
        guard self != newState else {

2024-11-04 14:07:51,082 - INFO - 
Analyzing RealityView+TouchControls.swift:
2024-11-04 14:07:51,082 - INFO - Found 6 animation examples
2024-11-04 14:07:51,082 - INFO - Animation example:
if movementVector != .zero && appState.robot?.animationState == .idle {
2024-11-04 14:07:51,082 - INFO - Context:

import Foundation
import RealityKit
import SwiftUI

public extension View {
    
    func platformTouchControls(appState: AppState) -> some View {
#if !os(visionOS)
        return simultaneousGesture(DragGesture()
            .onChanged { value in
                let translation = value.translation
                let movementVector = SIMD3<Float>(x: Float(translation.width), y: 0, z: Float(translation.height))
                appState.robot?.movementVector = movementVector
                
                if movementVector != .zero && appState.robot?.animationState == .idle {
                    appState.robot?.animationState.transition(to: .walkLoop)
                }
            }
            .onEnded { value in
                appState.robot?.animationState.transition(to: .walkEnd)
                appState.robot?.movementVector = .zero
            }
        )
#else
        return simultaneousGesture(DragGesture()
            .targetedToEntity(appState.robot?.characterParent ?? Entity()) // This could be nil during app state restore.
            .onChanged { @MainActor value in
                guard let robot = appState.robot else { fatalError("No robot.") }
                let translation = value.translation3D
                let movementVector = SIMD3<Float>(x: Float(translation.x), y: 0, z: Float(translation.z))

2024-11-04 14:07:51,082 - INFO - Animation example:
appState.robot?.animationState.transition(to: .walkLoop)
2024-11-04 14:07:51,082 - INFO - Context:
import Foundation
import RealityKit
import SwiftUI

public extension View {
    
    func platformTouchControls(appState: AppState) -> some View {
#if !os(visionOS)
        return simultaneousGesture(DragGesture()
            .onChanged { value in
                let translation = value.translation
                let movementVector = SIMD3<Float>(x: Float(translation.width), y: 0, z: Float(translation.height))
                appState.robot?.movementVector = movementVector
                
                if movementVector != .zero && appState.robot?.animationState == .idle {
                    appState.robot?.animationState.transition(to: .walkLoop)
                }
            }
            .onEnded { value in
                appState.robot?.animationState.transition(to: .walkEnd)
                appState.robot?.movementVector = .zero
            }
        )
#else
        return simultaneousGesture(DragGesture()
            .targetedToEntity(appState.robot?.characterParent ?? Entity()) // This could be nil during app state restore.
            .onChanged { @MainActor value in
                guard let robot = appState.robot else { fatalError("No robot.") }
                let translation = value.translation3D
                let movementVector = SIMD3<Float>(x: Float(translation.x), y: 0, z: Float(translation.z))
                

2024-11-04 14:07:51,082 - INFO - Animation example:
appState.robot?.animationState.transition(to: .walkEnd)
2024-11-04 14:07:51,082 - INFO - Context:
public extension View {
    
    func platformTouchControls(appState: AppState) -> some View {
#if !os(visionOS)
        return simultaneousGesture(DragGesture()
            .onChanged { value in
                let translation = value.translation
                let movementVector = SIMD3<Float>(x: Float(translation.width), y: 0, z: Float(translation.height))
                appState.robot?.movementVector = movementVector
                
                if movementVector != .zero && appState.robot?.animationState == .idle {
                    appState.robot?.animationState.transition(to: .walkLoop)
                }
            }
            .onEnded { value in
                appState.robot?.animationState.transition(to: .walkEnd)
                appState.robot?.movementVector = .zero
            }
        )
#else
        return simultaneousGesture(DragGesture()
            .targetedToEntity(appState.robot?.characterParent ?? Entity()) // This could be nil during app state restore.
            .onChanged { @MainActor value in
                guard let robot = appState.robot else { fatalError("No robot.") }
                let translation = value.translation3D
                let movementVector = SIMD3<Float>(x: Float(translation.x), y: 0, z: Float(translation.z))
                
                // Starting movement while idle
                if robot.movementVector == .zero && movementVector != .zero {
                    robot.animationState.transition(to: .walkLoop)
                }

2024-11-04 14:07:51,082 - INFO - Animation example:
robot.animationState.transition(to: .walkLoop)
2024-11-04 14:07:51,082 - INFO - Context:
            .onEnded { value in
                appState.robot?.animationState.transition(to: .walkEnd)
                appState.robot?.movementVector = .zero
            }
        )
#else
        return simultaneousGesture(DragGesture()
            .targetedToEntity(appState.robot?.characterParent ?? Entity()) // This could be nil during app state restore.
            .onChanged { @MainActor value in
                guard let robot = appState.robot else { fatalError("No robot.") }
                let translation = value.translation3D
                let movementVector = SIMD3<Float>(x: Float(translation.x), y: 0, z: Float(translation.z))
                
                // Starting movement while idle
                if robot.movementVector == .zero && movementVector != .zero {
                    robot.animationState.transition(to: .walkLoop)
                }
                
                // Ending movement while walking
                if robot.movementVector != .zero && movementVector == .zero {
                    robot.animationState.transition(to: .walkEnd)
                }
                robot.movementVector = movementVector
                
            } .onEnded { value in
                appState.robot?.movementVector = SIMD3<Float>(x: 0, y: 0, z: 0)
                appState.robot?.animationState.transition(to: .walkEnd)
            }
        )
#endif
    }

2024-11-04 14:07:51,082 - INFO - Animation example:
robot.animationState.transition(to: .walkEnd)
2024-11-04 14:07:51,082 - INFO - Context:
#else
        return simultaneousGesture(DragGesture()
            .targetedToEntity(appState.robot?.characterParent ?? Entity()) // This could be nil during app state restore.
            .onChanged { @MainActor value in
                guard let robot = appState.robot else { fatalError("No robot.") }
                let translation = value.translation3D
                let movementVector = SIMD3<Float>(x: Float(translation.x), y: 0, z: Float(translation.z))
                
                // Starting movement while idle
                if robot.movementVector == .zero && movementVector != .zero {
                    robot.animationState.transition(to: .walkLoop)
                }
                
                // Ending movement while walking
                if robot.movementVector != .zero && movementVector == .zero {
                    robot.animationState.transition(to: .walkEnd)
                }
                robot.movementVector = movementVector
                
            } .onEnded { value in
                appState.robot?.movementVector = SIMD3<Float>(x: 0, y: 0, z: 0)
                appState.robot?.animationState.transition(to: .walkEnd)
            }
        )
#endif
    }
}


2024-11-04 14:07:51,082 - INFO - Animation example:
appState.robot?.animationState.transition(to: .walkEnd)
2024-11-04 14:07:51,082 - INFO - Context:
public extension View {
    
    func platformTouchControls(appState: AppState) -> some View {
#if !os(visionOS)
        return simultaneousGesture(DragGesture()
            .onChanged { value in
                let translation = value.translation
                let movementVector = SIMD3<Float>(x: Float(translation.width), y: 0, z: Float(translation.height))
                appState.robot?.movementVector = movementVector
                
                if movementVector != .zero && appState.robot?.animationState == .idle {
                    appState.robot?.animationState.transition(to: .walkLoop)
                }
            }
            .onEnded { value in
                appState.robot?.animationState.transition(to: .walkEnd)
                appState.robot?.movementVector = .zero
            }
        )
#else
        return simultaneousGesture(DragGesture()
            .targetedToEntity(appState.robot?.characterParent ?? Entity()) // This could be nil during app state restore.
            .onChanged { @MainActor value in
                guard let robot = appState.robot else { fatalError("No robot.") }
                let translation = value.translation3D
                let movementVector = SIMD3<Float>(x: Float(translation.x), y: 0, z: Float(translation.z))
                
                // Starting movement while idle
                if robot.movementVector == .zero && movementVector != .zero {
                    robot.animationState.transition(to: .walkLoop)
                }

2024-11-04 14:07:51,082 - INFO - 
Analyzing EntityExtensions.swift:
2024-11-04 14:07:51,082 - INFO - Found 2 transform/rotation examples
2024-11-04 14:07:51,082 - INFO - Transform example:
let toTransform = Transform(scale: transform.scale, rotation: quat, translation: transform.translation)
2024-11-04 14:07:51,082 - INFO - Context:
import RealityKit
import Foundation
import SwiftUI

public extension Entity {
    var jointPinComponent: JointPinComponent? {
        get { components[JointPinComponent.self] }
        set { components[JointPinComponent.self] = newValue }
    }

    #if os(visionOS)
    /// Generates a rotation animation for the entity from its current orientation to face the person playing.
    func getRotationAnimation(toFace: SquareAzimuth, duration: TimeInterval) -> AnimationResource? {
        let quat = simd_quatf(toFace.orientation)
        let fromTransform = transform
        let toTransform = Transform(scale: transform.scale, rotation: quat, translation: transform.translation)
        let rotateAnim = FromToByAnimation(name: "rotation", from: fromTransform, to: toTransform, duration: duration, bindTarget: .transform )
        return try? AnimationResource.generate(with: rotateAnim)
    }
    #endif
}

extension ModelEntity {
    func getJointIndex(suffix: String) -> Int? {
        return jointNames
            .enumerated()
            .first(where: { $0.element.hasSuffix(suffix) })?
            .offset
    }
}


2024-11-04 14:07:51,082 - INFO - Transform example:
let rotateAnim = FromToByAnimation(name: "rotation", from: fromTransform, to: toTransform, duration: duration, bindTarget: .transform )
2024-11-04 14:07:51,082 - INFO - Context:
import Foundation
import SwiftUI

public extension Entity {
    var jointPinComponent: JointPinComponent? {
        get { components[JointPinComponent.self] }
        set { components[JointPinComponent.self] = newValue }
    }

    #if os(visionOS)
    /// Generates a rotation animation for the entity from its current orientation to face the person playing.
    func getRotationAnimation(toFace: SquareAzimuth, duration: TimeInterval) -> AnimationResource? {
        let quat = simd_quatf(toFace.orientation)
        let fromTransform = transform
        let toTransform = Transform(scale: transform.scale, rotation: quat, translation: transform.translation)
        let rotateAnim = FromToByAnimation(name: "rotation", from: fromTransform, to: toTransform, duration: duration, bindTarget: .transform )
        return try? AnimationResource.generate(with: rotateAnim)
    }
    #endif
}

extension ModelEntity {
    func getJointIndex(suffix: String) -> Int? {
        return jointNames
            .enumerated()
            .first(where: { $0.element.hasSuffix(suffix) })?
            .offset
    }
}


2024-11-04 14:07:51,083 - INFO - Found 3 animation examples
2024-11-04 14:07:51,083 - INFO - Animation example:
func getRotationAnimation(toFace: SquareAzimuth, duration: TimeInterval) -> AnimationResource? {
2024-11-04 14:07:51,083 - INFO - Context:
Extensions on Entity and ModelEntity that add commonly used custom variables and functions.
*/

import RealityKit
import Foundation
import SwiftUI

public extension Entity {
    var jointPinComponent: JointPinComponent? {
        get { components[JointPinComponent.self] }
        set { components[JointPinComponent.self] = newValue }
    }

    #if os(visionOS)
    /// Generates a rotation animation for the entity from its current orientation to face the person playing.
    func getRotationAnimation(toFace: SquareAzimuth, duration: TimeInterval) -> AnimationResource? {
        let quat = simd_quatf(toFace.orientation)
        let fromTransform = transform
        let toTransform = Transform(scale: transform.scale, rotation: quat, translation: transform.translation)
        let rotateAnim = FromToByAnimation(name: "rotation", from: fromTransform, to: toTransform, duration: duration, bindTarget: .transform )
        return try? AnimationResource.generate(with: rotateAnim)
    }
    #endif
}

extension ModelEntity {
    func getJointIndex(suffix: String) -> Int? {
        return jointNames
            .enumerated()
            .first(where: { $0.element.hasSuffix(suffix) })?
            .offset

2024-11-04 14:07:51,083 - INFO - Animation example:
let rotateAnim = FromToByAnimation(name: "rotation", from: fromTransform, to: toTransform, duration: duration, bindTarget: .transform )
2024-11-04 14:07:51,083 - INFO - Context:
import Foundation
import SwiftUI

public extension Entity {
    var jointPinComponent: JointPinComponent? {
        get { components[JointPinComponent.self] }
        set { components[JointPinComponent.self] = newValue }
    }

    #if os(visionOS)
    /// Generates a rotation animation for the entity from its current orientation to face the person playing.
    func getRotationAnimation(toFace: SquareAzimuth, duration: TimeInterval) -> AnimationResource? {
        let quat = simd_quatf(toFace.orientation)
        let fromTransform = transform
        let toTransform = Transform(scale: transform.scale, rotation: quat, translation: transform.translation)
        let rotateAnim = FromToByAnimation(name: "rotation", from: fromTransform, to: toTransform, duration: duration, bindTarget: .transform )
        return try? AnimationResource.generate(with: rotateAnim)
    }
    #endif
}

extension ModelEntity {
    func getJointIndex(suffix: String) -> Int? {
        return jointNames
            .enumerated()
            .first(where: { $0.element.hasSuffix(suffix) })?
            .offset
    }
}


2024-11-04 14:07:51,083 - INFO - Animation example:
return try? AnimationResource.generate(with: rotateAnim)
2024-11-04 14:07:51,083 - INFO - Context:
import SwiftUI

public extension Entity {
    var jointPinComponent: JointPinComponent? {
        get { components[JointPinComponent.self] }
        set { components[JointPinComponent.self] = newValue }
    }

    #if os(visionOS)
    /// Generates a rotation animation for the entity from its current orientation to face the person playing.
    func getRotationAnimation(toFace: SquareAzimuth, duration: TimeInterval) -> AnimationResource? {
        let quat = simd_quatf(toFace.orientation)
        let fromTransform = transform
        let toTransform = Transform(scale: transform.scale, rotation: quat, translation: transform.translation)
        let rotateAnim = FromToByAnimation(name: "rotation", from: fromTransform, to: toTransform, duration: duration, bindTarget: .transform )
        return try? AnimationResource.generate(with: rotateAnim)
    }
    #endif
}

extension ModelEntity {
    func getJointIndex(suffix: String) -> Int? {
        return jointNames
            .enumerated()
            .first(where: { $0.element.hasSuffix(suffix) })?
            .offset
    }
}


2024-11-04 14:07:51,083 - INFO - 
Analyzing StringExtensions.swift:
2024-11-04 14:07:51,083 - INFO - 
Analyzing Preview+AppStateEnvironment.swift:
2024-11-04 14:07:51,083 - INFO - 
Analyzing ColorExtensions.swift:
2024-11-04 14:07:51,083 - INFO - 
Analyzing RealityView+KeyboardControls.swift:
2024-11-04 14:07:51,083 - INFO - Found 2 animation examples
2024-11-04 14:07:51,083 - INFO - Animation example:
appState.robot?.animationState.transition(to: .walkLoop)
2024-11-04 14:07:51,083 - INFO - Context:
        var ret = Set<KeyEquivalent>()
        for (key, _) in keyBindings {
            ret.insert(key)
        }
        return ret
    }
    
    fileprivate func forEachValidKeyPress(_ press: KeyPress, _ handler: @escaping (SIMD3<Float>) -> Void) {
        if let vector = keyBindings[press.key] {
            handler(vector)
        }
    }
     
    func installTouchControls(appState: AppState) -> some View {
        return onKeyPress(keys: boundKeys, phases: .down) { press in
            appState.robot?.animationState.transition(to: .walkLoop)
            forEachValidKeyPress(press) { vector in
                appState.robot?.movementVector += vector
            }
            
            return .handled
        }
        .onKeyPress(keys: boundKeys, phases: .up) { press in
            Task { @MainActor in
                try? await Task.sleep(for: .seconds(0.1))
                if appState.robot?.movementVector == .zero {
                    appState.robot?.animationState.transition(to: .walkEnd)
                }
            }
            forEachValidKeyPress(press) { vector in
                appState.robot?.movementVector -= vector

2024-11-04 14:07:51,083 - INFO - Animation example:
appState.robot?.animationState.transition(to: .walkEnd)
2024-11-04 14:07:51,083 - INFO - Context:
    }
     
    func installTouchControls(appState: AppState) -> some View {
        return onKeyPress(keys: boundKeys, phases: .down) { press in
            appState.robot?.animationState.transition(to: .walkLoop)
            forEachValidKeyPress(press) { vector in
                appState.robot?.movementVector += vector
            }
            
            return .handled
        }
        .onKeyPress(keys: boundKeys, phases: .up) { press in
            Task { @MainActor in
                try? await Task.sleep(for: .seconds(0.1))
                if appState.robot?.movementVector == .zero {
                    appState.robot?.animationState.transition(to: .walkEnd)
                }
            }
            forEachValidKeyPress(press) { vector in
                appState.robot?.movementVector -= vector
            }
            return .handled
        }
        .onKeyPress(keys: boundKeys, phases: .repeat) { press in
            return .handled
        }
    }
}


2024-11-04 14:07:51,083 - INFO - 
Analyzing CaseIterableExtensions.swift:
2024-11-04 14:07:51,083 - INFO - 
Analyzing JointPinComponent.swift:
2024-11-04 14:07:51,083 - INFO - 
Analyzing JointPinSystem.swift:
2024-11-04 14:07:51,083 - INFO - 
Analyzing StartScreenView.swift:
2024-11-04 14:07:51,084 - INFO - 
Analyzing OrnamentView.swift:
2024-11-04 14:07:51,084 - INFO - 
Analyzing SelectorViews.swift:
2024-11-04 14:07:51,084 - INFO - 
Analyzing RobotView.swift:
2024-11-04 14:07:51,084 - INFO - 
Analyzing RobotCustomizationView.swift:
2024-11-04 14:07:51,084 - INFO - Found 1 animation examples
2024-11-04 14:07:51,084 - INFO - Animation example:
withAnimation {
2024-11-04 14:07:51,084 - INFO - Context:
                        FaceSelectorView(currentFace: $currentFace)
                    }
                    MaterialSelectView(currentPart: $currentRobotPart,
                                       materialSelection: $partMaterials,
                                       colorSelection: $partColors)
                    
                    MaterialColorSelectView(currentPart: $currentRobotPart,
                                            materialSelection: $partMaterials,
                                            colorSelection: $partColors)
                    
                    LightColorSelectView(currentPart: $currentRobotPart,
                                         lightColorSelection: $partLights)
                }
                .padding(.horizontal)
                .onChange(of: currentRobotPart) {
                    withAnimation {
                        value.scrollTo("topView", anchor: .top)
                    }
                }
            }
        }
        .padding([.top, .leading, .trailing])
    }
}

#Preview(traits: .sampleAppState) {
    RobotCustomizationView()
}


2024-11-04 14:07:51,086 - INFO - 
Analyzing ExplorationView.swift:
2024-11-04 14:07:51,086 - INFO - Found 4 animation examples
2024-11-04 14:07:51,086 - INFO - Animation example:
let updateEvent = content.subscribe(to: SceneEvents.Update.self, { event in
2024-11-04 14:07:51,086 - INFO - Context:
struct ExplorationView: View {
    @Environment(AppState.self) private var appState
    @Environment(\.scenePhase) private var scenePhase
    @Environment(\.openWindow) var openWindow
    
    @State private var cancellables = [EventSubscription]()
    @FocusState var focusable: Bool
    
    #if os(visionOS)
    /// The current viewpoint from which a person using the app is viewing the volume.
    @State private var currentViewpoint: Viewpoint3D = .standard
    #endif
    var body: some View {
        ZStack {
            RealityView { content in
                let updateEvent = content.subscribe(to: SceneEvents.Update.self, { event in
                    let deltaTime = Float(event.deltaTime)
                    appState.robot?.handleMovement(deltaTime: deltaTime)
                })
                let animationStopEvent = content.subscribe(to: AnimationEvents.PlaybackTerminated.self, { event in
                    guard let robot = appState.robot else { return }
                    
                    if robot.plantsFound == appState.totalPlants && !appState.celebrating {
                        for anim in PlantAnimationProvider.shared.currentGrowAnimations.values where anim.isPlaying {
                                return
                        }
                        appState.startCelebration()
                    }
                })
                #if !os(visionOS)
                    if let environment = try? EnvironmentResource(equirectangular: skyImage) {

2024-11-04 14:07:51,087 - INFO - Animation example:
let animationStopEvent = content.subscribe(to: AnimationEvents.PlaybackTerminated.self, { event in
2024-11-04 14:07:51,087 - INFO - Context:
    
    @State private var cancellables = [EventSubscription]()
    @FocusState var focusable: Bool
    
    #if os(visionOS)
    /// The current viewpoint from which a person using the app is viewing the volume.
    @State private var currentViewpoint: Viewpoint3D = .standard
    #endif
    var body: some View {
        ZStack {
            RealityView { content in
                let updateEvent = content.subscribe(to: SceneEvents.Update.self, { event in
                    let deltaTime = Float(event.deltaTime)
                    appState.robot?.handleMovement(deltaTime: deltaTime)
                })
                let animationStopEvent = content.subscribe(to: AnimationEvents.PlaybackTerminated.self, { event in
                    guard let robot = appState.robot else { return }
                    
                    if robot.plantsFound == appState.totalPlants && !appState.celebrating {
                        for anim in PlantAnimationProvider.shared.currentGrowAnimations.values where anim.isPlaying {
                                return
                        }
                        appState.startCelebration()
                    }
                })
                #if !os(visionOS)
                    if let environment = try? EnvironmentResource(equirectangular: skyImage) {
                        content.environment = .skybox(environment)
                    }
                #endif
                cancellables.append(updateEvent)

2024-11-04 14:07:51,087 - INFO - Animation example:
for anim in PlantAnimationProvider.shared.currentGrowAnimations.values where anim.isPlaying {
2024-11-04 14:07:51,087 - INFO - Context:
    #if os(visionOS)
    /// The current viewpoint from which a person using the app is viewing the volume.
    @State private var currentViewpoint: Viewpoint3D = .standard
    #endif
    var body: some View {
        ZStack {
            RealityView { content in
                let updateEvent = content.subscribe(to: SceneEvents.Update.self, { event in
                    let deltaTime = Float(event.deltaTime)
                    appState.robot?.handleMovement(deltaTime: deltaTime)
                })
                let animationStopEvent = content.subscribe(to: AnimationEvents.PlaybackTerminated.self, { event in
                    guard let robot = appState.robot else { return }
                    
                    if robot.plantsFound == appState.totalPlants && !appState.celebrating {
                        for anim in PlantAnimationProvider.shared.currentGrowAnimations.values where anim.isPlaying {
                                return
                        }
                        appState.startCelebration()
                    }
                })
                #if !os(visionOS)
                    if let environment = try? EnvironmentResource(equirectangular: skyImage) {
                        content.environment = .skybox(environment)
                    }
                #endif
                cancellables.append(updateEvent)
                cancellables.append(animationStopEvent)
                if appState.phase == .exploration {
                    content.add(appState.explorationRoot)
                    content.add(appState.explorationCamera)

2024-11-04 14:07:51,087 - INFO - Animation example:
cancellables.append(animationStopEvent)
2024-11-04 14:07:51,087 - INFO - Context:
                    guard let robot = appState.robot else { return }
                    
                    if robot.plantsFound == appState.totalPlants && !appState.celebrating {
                        for anim in PlantAnimationProvider.shared.currentGrowAnimations.values where anim.isPlaying {
                                return
                        }
                        appState.startCelebration()
                    }
                })
                #if !os(visionOS)
                    if let environment = try? EnvironmentResource(equirectangular: skyImage) {
                        content.environment = .skybox(environment)
                    }
                #endif
                cancellables.append(updateEvent)
                cancellables.append(animationStopEvent)
                if appState.phase == .exploration {
                    content.add(appState.explorationRoot)
                    content.add(appState.explorationCamera)
                }
            } update: { updateContent in
                // Reset the idle timer when the robot moves.
                appState.robot?.idleTimer = 0
                #if os(visionOS)
                if appState.robot?.idleViewpoint != currentViewpoint.squareAzimuth {
                    appState.robot?.idleViewpoint = currentViewpoint.squareAzimuth
                    appState.robot?.hasChangedOrientationSinceLastWave = true
                }
                #endif
            }
            .platformTouchControls(appState: appState)

2024-11-04 14:07:51,088 - INFO - 
Analyzing ContentView.swift:
2024-11-04 14:07:51,088 - INFO - 
Found 0 3d_content examples:
2024-11-04 14:07:51,088 - INFO - 
Found 13 animation examples:
2024-11-04 14:07:51,088 - INFO - 
File: AppState.swift
2024-11-04 14:07:51,088 - INFO - 
File: PlantAnimationProvider.swift
2024-11-04 14:07:51,088 - INFO - 
File: AppState+Exploration.swift
2024-11-04 14:07:51,088 - INFO - 
File: EntityExtensions.swift
2024-11-04 14:07:51,088 - INFO - 
File: RobotCharacter+Movement.swift
2024-11-04 14:07:51,088 - INFO - 
File: RobotProvider+Loading.swift
2024-11-04 14:07:51,088 - INFO - 
File: RobotCharacter.swift
2024-11-04 14:07:51,088 - INFO - 
File: AnimationStateMachine.swift
2024-11-04 14:07:51,088 - INFO - 
File: RealityView+TouchControls.swift
2024-11-04 14:07:51,088 - INFO - 
File: EntityExtensions.swift
2024-11-04 14:07:51,088 - INFO - 
File: RealityView+KeyboardControls.swift
2024-11-04 14:07:51,088 - INFO - 
File: RobotCustomizationView.swift
2024-11-04 14:07:51,088 - INFO - 
File: ExplorationView.swift
2024-11-04 14:07:51,088 - INFO - 
Found 2 transforms examples:
2024-11-04 14:07:51,088 - INFO - 
File: AppState+Exploration.swift
2024-11-04 14:07:51,088 - INFO - 
File: EntityExtensions.swift
2024-11-04 14:07:51,088 - INFO - 
Found 0 ui_components examples:
2024-11-04 15:08:54,201 - INFO - Starting subset test with 5 documentation pages...
2024-11-04 15:08:54,201 - INFO - 
Processing: https://developer.apple.com/documentation/visionos/bot-anist
2024-11-04 15:08:57,528 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/0bc6997cb1f0/BOTAnist.zip
2024-11-04 15:08:57,563 - INFO - Found project: BOT-anist
2024-11-04 15:09:03,463 - INFO - Downloaded project to data/projects/bot-anist
2024-11-04 15:09:03,471 - INFO - Downloaded to: data/projects/bot-anist
2024-11-04 15:09:03,472 - INFO - 
Processing: https://developer.apple.com/documentation/visionos/creating-3d-shapes-in-visionos-with-realitykit
2024-11-04 15:09:05,260 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/eca86063e133/Creating3DEntitiesInVisionOSWithRealityKit.zip
2024-11-04 15:09:05,287 - INFO - Found project: Creating 3D entities with RealityKit
2024-11-04 15:09:05,738 - INFO - Downloaded project to data/projects/creating-3d-entities-with-realitykit
2024-11-04 15:09:05,739 - INFO - Downloaded to: data/projects/creating-3d-entities-with-realitykit
2024-11-04 15:09:05,739 - INFO - 
Processing: https://developer.apple.com/documentation/visionos/creating-an-interactable-3d-model-in-visionos
2024-11-04 15:09:07,467 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/7b5bc90de8c3/CreatingA3DModelWithGesturesInVisionOS.zip
2024-11-04 15:09:07,495 - INFO - Found project: Creating an interactive 3D model in visionOS
2024-11-04 15:09:09,315 - INFO - Downloaded project to data/projects/creating-an-interactive-3d-model-in-visionos
2024-11-04 15:09:09,315 - INFO - Downloaded to: data/projects/creating-an-interactive-3d-model-in-visionos
2024-11-04 15:09:09,315 - INFO - 
Processing: https://developer.apple.com/documentation/visionos/swift-splash
2024-11-04 15:09:11,980 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/c615c66bc630/SwiftSplash.zip
2024-11-04 15:09:12,008 - INFO - Found project: Swift Splash
2024-11-04 15:09:21,990 - INFO - Downloaded project to data/projects/swift-splash
2024-11-04 15:09:21,995 - INFO - Downloaded to: data/projects/swift-splash
2024-11-04 15:09:21,995 - INFO - 
Processing: https://developer.apple.com/documentation/visionos/diorama
2024-11-04 15:09:24,614 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/f60567d1cc7d/Diorama.zip
2024-11-04 15:09:24,640 - INFO - Found project: Diorama
2024-11-04 15:09:38,419 - INFO - Downloaded project to data/projects/diorama
2024-11-04 15:09:38,425 - INFO - Downloaded to: data/projects/diorama
2024-11-04 15:09:38,426 - INFO - 
Subset test complete!
2024-11-04 15:11:34,309 - INFO - Starting subset test with 5 documentation pages...
2024-11-04 15:11:34,309 - INFO - 
Processing: https://developer.apple.com/documentation/visionos/bot-anist
2024-11-04 15:11:37,165 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/0bc6997cb1f0/BOTAnist.zip
2024-11-04 15:11:37,192 - INFO - Found project: BOT-anist
2024-11-04 15:11:45,463 - INFO - Downloaded project to data/projects/bot-anist
2024-11-04 15:11:45,475 - INFO - Downloaded to: data/projects/bot-anist
2024-11-04 15:11:45,475 - INFO - 
Processing: https://developer.apple.com/documentation/visionos/creating-3d-shapes-in-visionos-with-realitykit
2024-11-04 15:11:49,643 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/eca86063e133/Creating3DEntitiesInVisionOSWithRealityKit.zip
2024-11-04 15:11:49,688 - INFO - Found project: Creating 3D entities with RealityKit
2024-11-04 15:11:49,821 - INFO - Downloaded project to data/projects/creating-3d-entities-with-realitykit
2024-11-04 15:11:49,821 - INFO - Downloaded to: data/projects/creating-3d-entities-with-realitykit
2024-11-04 15:11:49,821 - INFO - 
Processing: https://developer.apple.com/documentation/visionos/creating-an-interactable-3d-model-in-visionos
2024-11-04 15:11:52,472 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/7b5bc90de8c3/CreatingA3DModelWithGesturesInVisionOS.zip
2024-11-04 15:11:52,500 - INFO - Found project: Creating an interactive 3D model in visionOS
2024-11-04 15:11:54,432 - INFO - Downloaded project to data/projects/creating-an-interactive-3d-model-in-visionos
2024-11-04 15:11:54,432 - INFO - Downloaded to: data/projects/creating-an-interactive-3d-model-in-visionos
2024-11-04 15:11:54,432 - INFO - 
Processing: https://developer.apple.com/documentation/visionos/swift-splash
2024-11-04 15:11:59,221 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/c615c66bc630/SwiftSplash.zip
2024-11-04 15:11:59,253 - INFO - Found project: Swift Splash
2024-11-04 15:12:08,483 - INFO - Downloaded project to data/projects/swift-splash
2024-11-04 15:12:08,489 - INFO - Downloaded to: data/projects/swift-splash
2024-11-04 15:12:08,489 - INFO - 
Processing: https://developer.apple.com/documentation/visionos/diorama
2024-11-04 15:12:10,798 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/f60567d1cc7d/Diorama.zip
2024-11-04 15:12:10,825 - INFO - Found project: Diorama
2024-11-04 15:12:21,691 - INFO - Downloaded project to data/projects/diorama
2024-11-04 15:12:21,697 - INFO - Downloaded to: data/projects/diorama
2024-11-04 15:12:21,697 - INFO - 
Analyzing downloaded projects:
2024-11-04 15:12:21,698 - INFO - 
Analyzing BOT-anist:
2024-11-04 15:12:21,703 - INFO - Found 30 Swift files
2024-11-04 15:12:21,704 - INFO - 
Analyzing AppState.swift:
2024-11-04 15:12:21,704 - ERROR - Error analyzing project: 'ProjectAnalyzer' object has no attribute '_analyze_patterns'
2024-11-04 15:12:21,704 - INFO - Found patterns:
2024-11-04 15:12:21,704 - ERROR - Error in subset test: 'patterns'
Traceback (most recent call last):
  File "/Users/dalecarman/Groove Jones Dropbox/Dale Carman/Projects/documentation_builder/run_scraper.py", line 60, in main
    for category, patterns in analysis['patterns'].items():
                              ~~~~~~~~^^^^^^^^^^^^
KeyError: 'patterns'
2024-11-04 15:32:25,379 - INFO - Starting subset test with 5 documentation pages...
2024-11-04 15:32:25,379 - INFO - 
Processing: https://developer.apple.com/documentation/visionos/bot-anist
2024-11-04 15:32:29,083 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/0bc6997cb1f0/BOTAnist.zip
2024-11-04 15:32:29,117 - INFO - Found project: BOT-anist
2024-11-04 15:32:38,918 - INFO - Downloaded project to data/projects/bot-anist
2024-11-04 15:32:38,924 - INFO - Downloaded to: data/projects/bot-anist
2024-11-04 15:32:38,924 - INFO - 
Processing: https://developer.apple.com/documentation/visionos/creating-3d-shapes-in-visionos-with-realitykit
2024-11-04 15:32:41,803 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/eca86063e133/Creating3DEntitiesInVisionOSWithRealityKit.zip
2024-11-04 15:32:41,839 - INFO - Found project: Creating 3D entities with RealityKit
2024-11-04 15:32:42,176 - INFO - Downloaded project to data/projects/creating-3d-entities-with-realitykit
2024-11-04 15:32:42,176 - INFO - Downloaded to: data/projects/creating-3d-entities-with-realitykit
2024-11-04 15:32:42,176 - INFO - 
Processing: https://developer.apple.com/documentation/visionos/creating-an-interactable-3d-model-in-visionos
2024-11-04 15:32:44,635 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/7b5bc90de8c3/CreatingA3DModelWithGesturesInVisionOS.zip
2024-11-04 15:32:44,673 - INFO - Found project: Creating an interactive 3D model in visionOS
2024-11-04 15:32:46,243 - INFO - Downloaded project to data/projects/creating-an-interactive-3d-model-in-visionos
2024-11-04 15:32:46,244 - INFO - Downloaded to: data/projects/creating-an-interactive-3d-model-in-visionos
2024-11-04 15:32:46,244 - INFO - 
Processing: https://developer.apple.com/documentation/visionos/swift-splash
2024-11-04 15:32:49,694 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/c615c66bc630/SwiftSplash.zip
2024-11-04 15:32:49,721 - INFO - Found project: Swift Splash
2024-11-04 15:32:58,432 - INFO - Downloaded project to data/projects/swift-splash
2024-11-04 15:32:58,438 - INFO - Downloaded to: data/projects/swift-splash
2024-11-04 15:32:58,438 - INFO - 
Processing: https://developer.apple.com/documentation/visionos/diorama
2024-11-04 15:33:02,133 - INFO - Found download URL: https://docs-assets.developer.apple.com/published/f60567d1cc7d/Diorama.zip
2024-11-04 15:33:02,177 - INFO - Found project: Diorama
2024-11-04 15:33:11,309 - INFO - Downloaded project to data/projects/diorama
2024-11-04 15:33:11,316 - INFO - Downloaded to: data/projects/diorama
2024-11-04 15:33:11,317 - INFO - 
Analyzing downloaded projects:
2024-11-04 15:33:11,317 - INFO - 
Analyzing BOT-anist:
2024-11-04 15:33:11,322 - INFO - Found 30 Swift files
2024-11-04 15:33:11,322 - INFO - 
Analyzing AppState.swift:
2024-11-04 15:33:11,322 - INFO - 
Analyzing PlantAnimationProvider.swift:
2024-11-04 15:33:11,322 - INFO - 
Analyzing AppState+Exploration.swift:
2024-11-04 15:33:11,322 - INFO - 
Analyzing BOTanistApp.swift:
2024-11-04 15:33:11,322 - INFO - 
Analyzing Package.swift:
2024-11-04 15:33:11,322 - INFO - 
Analyzing BOTanistAssets.swift:
2024-11-04 15:33:11,323 - INFO - 
Analyzing EntityExtensions.swift:
2024-11-04 15:33:11,323 - INFO - 
Analyzing PlantComponent.swift:
2024-11-04 15:33:11,323 - INFO - 
Analyzing RobotCharacter+Movement.swift:
2024-11-04 15:33:11,323 - INFO - 
Analyzing RobotProvider.swift:
2024-11-04 15:33:11,323 - INFO - 
Analyzing RobotProvider+Loading.swift:
2024-11-04 15:33:11,323 - INFO - 
Analyzing RobotCharacter.swift:
2024-11-04 15:33:11,323 - INFO - 
Analyzing RobotData.swift:
2024-11-04 15:33:11,323 - INFO - 
Analyzing AnimationStateMachine.swift:
2024-11-04 15:33:11,323 - INFO - 
Analyzing RealityView+TouchControls.swift:
2024-11-04 15:33:11,323 - INFO - 
Analyzing EntityExtensions.swift:
2024-11-04 15:33:11,323 - INFO - 
Analyzing StringExtensions.swift:
2024-11-04 15:33:11,323 - INFO - 
Analyzing Preview+AppStateEnvironment.swift:
2024-11-04 15:33:11,323 - INFO - 
Analyzing ColorExtensions.swift:
2024-11-04 15:33:11,323 - INFO - 
Analyzing RealityView+KeyboardControls.swift:
2024-11-04 15:33:11,323 - INFO - 
Analyzing CaseIterableExtensions.swift:
2024-11-04 15:33:11,323 - INFO - 
Analyzing JointPinComponent.swift:
2024-11-04 15:33:11,323 - INFO - 
Analyzing JointPinSystem.swift:
2024-11-04 15:33:11,324 - INFO - 
Analyzing StartScreenView.swift:
2024-11-04 15:33:11,324 - INFO - 
Analyzing OrnamentView.swift:
2024-11-04 15:33:11,324 - INFO - 
Analyzing SelectorViews.swift:
2024-11-04 15:33:11,324 - INFO - 
Analyzing RobotView.swift:
2024-11-04 15:33:11,324 - INFO - 
Analyzing RobotCustomizationView.swift:
2024-11-04 15:33:11,324 - INFO - 
Analyzing ExplorationView.swift:
2024-11-04 15:33:11,324 - INFO - 
Analyzing ContentView.swift:
2024-11-04 15:33:11,324 - INFO - Found patterns:
2024-11-04 15:33:11,324 - INFO - - animation: 3 patterns
2024-11-04 15:33:11,324 - INFO -   â€¢ state_machine in RobotProvider+Loading.swift
2024-11-04 15:33:11,324 - INFO -   â€¢ state_machine in RobotCharacter.swift
2024-11-04 15:33:11,324 - INFO -   â€¢ state_machine in AnimationStateMachine.swift
2024-11-04 15:33:11,324 - INFO - - transforms: 2 patterns
2024-11-04 15:33:11,324 - INFO -   â€¢ rotation in AppState+Exploration.swift
2024-11-04 15:33:11,324 - INFO -   â€¢ rotation in EntityExtensions.swift
2024-11-04 15:33:11,324 - INFO - - ui_components: 1 patterns
2024-11-04 15:33:11,324 - INFO -   â€¢ subscription in ExplorationView.swift
2024-11-04 15:33:11,324 - INFO - 
Pattern usage frequency:
2024-11-04 15:33:11,324 - INFO - - transform_rotation: used 2 times
2024-11-04 15:33:11,324 - INFO - - animation_state_machine: used 3 times
2024-11-04 15:33:11,324 - INFO - - event_subscription: used 1 times
2024-11-04 15:33:11,324 - INFO - 
Analyzing Creating 3D entities with RealityKit:
2024-11-04 15:33:11,325 - INFO - Found 3 Swift files
2024-11-04 15:33:11,325 - INFO - 
Analyzing EntryPoint.swift:
2024-11-04 15:33:11,325 - INFO - 
Analyzing ShapesView.swift:
2024-11-04 15:33:11,325 - INFO - 
Analyzing ShapesView+Entities.swift:
2024-11-04 15:33:11,325 - INFO - Found patterns:
2024-11-04 15:33:11,325 - INFO - 
Pattern usage frequency:
2024-11-04 15:33:11,325 - INFO - 
Analyzing Creating an interactive 3D model in visionOS:
2024-11-04 15:33:11,326 - INFO - Found 4 Swift files
2024-11-04 15:33:11,326 - INFO - 
Analyzing EntryPoint.swift:
2024-11-04 15:33:11,326 - INFO - 
Analyzing SIMD3.swift:
2024-11-04 15:33:11,326 - INFO - 
Analyzing CarView.swift:
2024-11-04 15:33:11,326 - INFO - 
Analyzing MainView.swift:
2024-11-04 15:33:11,326 - INFO - Found patterns:
2024-11-04 15:33:11,326 - INFO - 
Pattern usage frequency:
2024-11-04 15:33:11,326 - INFO - 
Analyzing Swift Splash:
2024-11-04 15:33:11,330 - INFO - Found 36 Swift files
2024-11-04 15:33:11,330 - INFO - 
Analyzing SwiftSplashApp.swift:
2024-11-04 15:33:11,330 - INFO - 
Analyzing AppState.swift:
2024-11-04 15:33:11,330 - INFO - 
Analyzing AppState+Phases.swift:
2024-11-04 15:33:11,331 - INFO - 
Analyzing Piece.swift:
2024-11-04 15:33:11,331 - INFO - 
Analyzing AppState+PieceSelection.swift:
2024-11-04 15:33:11,331 - INFO - 
Analyzing SoundEffects.swift:
2024-11-04 15:33:11,331 - INFO - 
Analyzing AppPhase.swift:
2024-11-04 15:33:11,331 - INFO - 
Analyzing AppState+RideRunning.swift:
2024-11-04 15:33:11,331 - INFO - 
Analyzing AppState+TrackUpdates.swift:
2024-11-04 15:33:11,331 - INFO - 
Analyzing AppState+PieceManagement.swift:
2024-11-04 15:33:11,331 - INFO - 
Analyzing AppState+Transparency.swift:
2024-11-04 15:33:11,331 - INFO - 
Analyzing AppState+PieceLoading.swift:
2024-11-04 15:33:11,331 - INFO - 
Analyzing AppConfig.swift:
2024-11-04 15:33:11,331 - INFO - 
Analyzing Date+Logging.swift:
2024-11-04 15:33:11,331 - INFO - 
Analyzing Entity+SwiftSplash.swift:
2024-11-04 15:33:11,331 - INFO - 
Analyzing ContentToolbar.swift:
2024-11-04 15:33:11,331 - INFO - 
Analyzing SplashScreenView.swift:
2024-11-04 15:33:11,331 - INFO - 
Analyzing TrackBuildingView+Rotation.swift:
2024-11-04 15:33:11,331 - INFO - 
Analyzing PieceShelfTrackButtonsView.swift:
2024-11-04 15:33:11,331 - INFO - 
Analyzing TrackBuildingView.swift:
2024-11-04 15:33:11,332 - INFO - 
Analyzing RideControlView.swift:
2024-11-04 15:33:11,332 - INFO - 
Analyzing TrackBuildingView+Snapping.swift:
2024-11-04 15:33:11,332 - INFO - 
Analyzing PieceShelfView.swift:
2024-11-04 15:33:11,332 - INFO - 
Analyzing ImageButton.swift:
2024-11-04 15:33:11,332 - INFO - 
Analyzing PlaceStartPieceView.swift:
2024-11-04 15:33:11,332 - INFO - 
Analyzing TrackBuildingView+Drag.swift:
2024-11-04 15:33:11,332 - INFO - 
Analyzing EditTrackPieceView.swift:
2024-11-04 15:33:11,332 - INFO - 
Analyzing ContentView.swift:
2024-11-04 15:33:11,332 - INFO - 
Analyzing Package.swift:
2024-11-04 15:33:11,332 - INFO - 
Analyzing SwiftSplashTrackPieces.swift:
2024-11-04 15:33:11,332 - INFO - 
Analyzing Float+Utilities.swift:
2024-11-04 15:33:11,332 - INFO - 
Analyzing Entity+Utilities.swift:
2024-11-04 15:33:11,332 - INFO - 
Analyzing SIMD+Utilities.swift:
2024-11-04 15:33:11,332 - INFO - 
Analyzing ConnectableStateComponent.swift:
2024-11-04 15:33:11,332 - INFO - 
Analyzing Connectable.swift:
2024-11-04 15:33:11,333 - INFO - 
Analyzing MarkerComponents.swift:
2024-11-04 15:33:11,333 - INFO - Found patterns:
2024-11-04 15:33:11,333 - INFO - 
Pattern usage frequency:
2024-11-04 15:33:11,333 - INFO - 
Analyzing Diorama:
2024-11-04 15:33:11,335 - INFO - Found 19 Swift files
2024-11-04 15:33:11,335 - INFO - 
Analyzing DioramaView.swift:
2024-11-04 15:33:11,335 - INFO - 
Analyzing ViewModel.swift:
2024-11-04 15:33:11,335 - INFO - 
Analyzing DioramaApp.swift:
2024-11-04 15:33:11,335 - INFO - 
Analyzing FlockingComponent.swift:
2024-11-04 15:33:11,335 - INFO - 
Analyzing LearnMoreView.swift:
2024-11-04 15:33:11,335 - INFO - 
Analyzing ContentView.swift:
2024-11-04 15:33:11,335 - INFO - 
Analyzing Components.swift:
2024-11-04 15:33:11,335 - INFO - 
Analyzing FlockingSystem.swift:
2024-11-04 15:33:11,335 - INFO - 
Analyzing AttachmentsProvider.swift:
2024-11-04 15:33:11,335 - INFO - 
Analyzing Package.swift:
2024-11-04 15:33:11,335 - INFO - 
Analyzing PointOfInterestComponent.swift:
2024-11-04 15:33:11,335 - INFO - 
Analyzing BillboardSystem.swift:
2024-11-04 15:33:11,335 - INFO - 
Analyzing ShaderGraphMaterials.swift:
2024-11-04 15:33:11,336 - INFO - 
Analyzing RegionSpecificComponent.swift:
2024-11-04 15:33:11,336 - INFO - 
Analyzing TrailAnimationSystem.swift:
2024-11-04 15:33:11,336 - INFO - 
Analyzing BillboardComponent.swift:
2024-11-04 15:33:11,336 - INFO - 
Analyzing TrailComponent.swift:
2024-11-04 15:33:11,336 - INFO - 
Analyzing Style.swift:
2024-11-04 15:33:11,336 - INFO - 
Analyzing RealityKitContent.swift:
2024-11-04 15:33:11,336 - INFO - Found patterns:
2024-11-04 15:33:11,336 - INFO - - ui_components: 1 patterns
2024-11-04 15:33:11,336 - INFO -   â€¢ subscription in DioramaView.swift
2024-11-04 15:33:11,336 - INFO - 
Pattern usage frequency:
2024-11-04 15:33:11,336 - INFO - - event_subscription: used 1 times
2024-11-04 15:33:11,336 - INFO - 
Subset test complete!
